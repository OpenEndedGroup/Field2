three_js_docs = [[{"inside": "WebGLRenderer", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) object with properties defining the renderer's behaviour. The constructor also accepts no parameters at all. In all cases, it will assume sane defaults when parameters are missing. The following are valid parameters:"}, {"ret": "Boolean", "name": "autoClear", "inside": "WebGLRenderer", "ty": "property", "doc": "Defines whether the renderer should automatically clear its output before rendering a frame."}, {"ret": "Boolean", "name": "autoClearColor", "inside": "WebGLRenderer", "ty": "property", "doc": "If [page:.autoClear autoClear] is true, defines whether the renderer should clear the color buffer. Default is *true*."}, {"ret": "Boolean", "name": "autoClearDepth", "inside": "WebGLRenderer", "ty": "property", "doc": "If [page:.autoClear autoClear] is true, defines whether the renderer should clear the depth buffer. Default is *true*."}, {"ret": "Boolean", "name": "autoClearStencil", "inside": "WebGLRenderer", "ty": "property", "doc": "If [page:.autoClear autoClear] is true, defines whether the renderer should clear the stencil buffer. Default is *true*."}, {"ret": "Object", "name": "capabilities", "inside": "WebGLRenderer", "ty": "property", "doc": "An object containing details about the capabilities of the current RenderingContext."}, {"ret": "Array", "name": "clippingPlanes", "inside": "WebGLRenderer", "ty": "property", "doc": "User-defined clipping planes specified as THREE.Plane objects in world space. These planes apply globally. Points in space whose dot product with the plane is negative are cut away. Default is []."}, {"ret": "WebGLRenderingContext", "name": "context", "inside": "WebGLRenderer", "ty": "property", "doc": "The renderer obtains a RenderingContext context from its <i>WebGLRenderer.domElement</i> by default, using [link:https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext HTMLCanvasElement.getContext]()."}, {"ret": "DOMElement", "name": "domElement", "inside": "WebGLRenderer", "ty": "property", "doc": "A canvas where the renderer draws its output."}, {"ret": "Object", "name": "extensions", "inside": "WebGLRenderer", "ty": "property", "doc": "A wrapper for the [page:WebGLRenderer.extensions.get .extensions.get] method, used to check whether various WebGL extensions are supported."}, {"ret": "Float", "name": "gammaFactor", "inside": "WebGLRenderer", "ty": "property", "doc": "Default is *2*."}, {"ret": "Boolean", "name": "gammaInput", "inside": "WebGLRenderer", "ty": "property", "doc": "If set, then it expects that all textures and colors are premultiplied gamma. Default is *false*."}, {"ret": "Boolean", "name": "gammaOutput", "inside": "WebGLRenderer", "ty": "property", "doc": "If set, then it expects that all textures and colors need to be outputted in premultiplied gamma. Default is *false*."}, {"ret": "Object", "name": "info", "inside": "WebGLRenderer", "ty": "property", "doc": "An object with a series of statistical information about the graphics board memory and the rendering process. Useful for debugging or just for the sake of curiosity. The object contains the following fields:"}, {"ret": "Boolean", "name": "localClippingEnabled", "inside": "WebGLRenderer", "ty": "property", "doc": "Defines whether the renderer respects object-level clipping planes. Default is *false*."}, {"ret": "Integer", "name": "maxMorphTargets", "inside": "WebGLRenderer", "ty": "property", "doc": "Default is 8. The maximum number of MorphTargets allowed in a shader. Keep in mind that the standard materials only allow 8 MorphTargets."}, {"ret": "Integer", "name": "maxMorphNormals", "inside": "WebGLRenderer", "ty": "property", "doc": "Default is 4. The maximum number of MorphNormals allowed in a shader. Keep in mind that the standard materials only allow 4 MorphNormals."}, {"ret": "Boolean", "name": "physicallyCorrectLights", "inside": "WebGLRenderer", "ty": "property", "doc": "Whether to use physically correct lighting mode. Default is *false*. See the [example:webgl_lights_physical lights / physical] example."}, {"ret": "Object", "name": "properties", "inside": "WebGLRenderer", "ty": "property", "doc": "Used internally by the renderer to keep track of various sub object properties."}, {"ret": "WebGLRenderLists", "name": "renderLists", "inside": "WebGLRenderer", "ty": "property", "doc": "Used internally to handle ordering of scene object rendering."}, {"ret": "WebGLShadowMap", "name": "shadowMap", "inside": "WebGLRenderer", "ty": "property", "doc": "This contains the reference to the shadow map, if used."}, {"ret": "Boolean", "name": "sortObjects", "inside": "WebGLRenderer", "ty": "property", "doc": "Defines whether the renderer should sort objects. Default is *true*."}, {"ret": "Object", "name": "state", "inside": "WebGLRenderer", "ty": "property", "doc": "Contains functions for setting various properties of the [page:WebGLRenderer.context] state."}, {"ret": "Constant", "name": "toneMapping", "inside": "WebGLRenderer", "ty": "property", "doc": "Default is <i>>Renderer LinearToneMapping</i>. See the [page:Renderer Renderer constants] for other choices."}, {"ret": "Number", "name": "toneMappingExposure", "inside": "WebGLRenderer", "ty": "property", "doc": "Exposure level of tone mapping. Default is *1*."}, {"ret": "Number", "name": "toneMappingWhitePoint", "inside": "WebGLRenderer", "ty": "property", "doc": "Tone mapping white point. Default is *1*."}, {"ret": "null", "name": "clear", "inside": "WebGLRenderer", "args": [["Boolean", "color"], ["Boolean", "depth"], ["Boolean", "stencil"]], "ty": "method", "doc": "Tells the renderer to clear its color, depth or stencil drawing buffer(s). This method initializes the color buffer to the current clear color value."}, {"ret": "null", "name": "clearColor", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Clear the color buffer. Equivalent to calling [page:WebGLRenderer.clear .clear]( true, false, false )."}, {"ret": "null", "name": "clearDepth", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Clear the depth buffer. Equivalent to calling [page:WebGLRenderer.clear .clear]( false, true, false )."}, {"ret": "null", "name": "clearStencil", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Clear the stencil buffers. Equivalent to calling [page:WebGLRenderer.clear .clear]( false, false, true )."}, {"ret": "null", "name": "compile", "inside": "WebGLRenderer", "args": [["Scene", "scene"], ["Camera", "camera"]], "ty": "method", "doc": "Compiles all materials in the scene with the camera. This is useful to precompile shaders before the first rendering."}, {"ret": "null", "name": "copyFramebufferToTexture", "inside": "WebGLRenderer", "args": [["Vector2", "position"], ["Texture", "texture"], ["Number", "level"]], "ty": "method", "doc": "Copies pixels from the current WebGLFramebuffer into a 2D texture. Enables access to [link:https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexImage2D WebGLRenderingContext.copyTexImage2D]."}, {"ret": "null", "name": "copyTextureToTexture", "inside": "WebGLRenderer", "args": [["Vector2", "position"], ["Texture", "srcTexture"], ["Texture", "dstTexture"], ["Number", "level"]], "ty": "method", "doc": "Copies all pixels of a texture to an existing texture starting from the given position. Enables access to [link:https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D WebGLRenderingContext.texSubImage2D]."}, {"ret": "null", "name": "dispose", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Dispose of the current rendering context."}, {"ret": "null", "name": "forceContextLoss", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Simulate loss of the WebGL context. This requires support for the WebGLStats, as of February 2016 90% of WebGL enabled devices support this."}, {"ret": "Float", "name": "getClearAlpha", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Returns a <i>>Float float</i> with the current clear alpha. Ranges from 0 to 1."}, {"ret": "Color", "name": "getClearColor", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Returns a [page:Color THREE.Color] instance with the current clear color."}, {"ret": "WebGLRenderingContext", "name": "getContext", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Return the current WebGL context."}, {"ret": "WebGLContextAttributes", "name": "getContextAttributes", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Returns an object that describes the attributes set on the WebGL context when it was created."}, {"ret": "RenderTarget", "name": "getRenderTarget", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Returns the current RenderTarget, if any."}, {"ret": "RenderTarget", "name": "getCurrentViewport", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Returns the current viewport."}, {"ret": "Object", "name": "getDrawingBufferSize", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Returns an object containing the width and height of the renderer's drawing buffer, in pixels."}, {"ret": "number", "name": "getPixelRatio", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Returns current device pixel ratio used."}, {"ret": "Object", "name": "getSize", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Returns an object containing the width and height of the renderer's output canvas, in pixels."}, {"ret": "null", "name": "resetGLState", "inside": "WebGLRenderer", "args": [], "ty": "method", "doc": "Reset the GL state to default. Called internally if the WebGL context is lost."}, {"ret": "null", "name": "readRenderTargetPixels", "inside": "WebGLRenderer", "args": [["WebGLRenderTarget", "renderTarget"], ["Float", "x"], ["Float", "y"], ["Float", "width"], ["Float", "height"]], "ty": "method", "doc": "Reads the pixel data from the renderTarget into the buffer you pass in. This is a wrapper around [link:https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels WebGLRenderingContext.readPixels]()."}, {"ret": "null", "name": "render", "inside": "WebGLRenderer", "args": [["Scene", "scene"], ["Camera", "camera"], ["WebGLRenderTarget", "renderTarget"], ["Boolean", "forceClear"]], "ty": "method", "doc": "Render a <i>>Scene scene</i> using a <i>>Camera camera</i>."}, {"ret": "null", "name": "renderBufferDirect", "inside": "WebGLRenderer", "args": [["Camera", "camera"], ["Fog", "fog"], ["Geometry", "geometry"], ["Material", "material"], ["Object3D", "object"], ["Object", "group"]], "ty": "method", "doc": "Render a buffer geometry group using the camera and with the specified material."}, {"ret": "null", "name": "renderBufferImmediate", "inside": "WebGLRenderer", "args": [["Object3D", "object"], ["shaderprogram", "program"], ["Material", "shading"]], "ty": "method", "doc": "object - an instance of <i>Object3D</i>"}, {"ret": "null", "name": "setAnimationLoop", "inside": "WebGLRenderer", "args": [["Function", "callback"]], "ty": "method", "doc": "<i>>Function callback</i> \u2014 The function will be called every available frame. If `null` is passed it will stop any already ongoing animation."}, {"ret": "null", "name": "setClearAlpha", "inside": "WebGLRenderer", "args": [["Float", "alpha"]], "ty": "method", "doc": "Sets the clear alpha. Valid input is a float between *0.0* and *1.0*."}, {"ret": "null", "name": "setClearColor", "inside": "WebGLRenderer", "args": [["Color", "color"], ["Float", "alpha"]], "ty": "method", "doc": "Sets the clear color and opacity."}, {"ret": "null", "name": "setPixelRatio", "inside": "WebGLRenderer", "args": [["number", "value"]], "ty": "method", "doc": "Sets device pixel ratio. This is usually used for HiDPI device to prevent bluring output canvas."}, {"ret": "null", "name": "setRenderTarget", "inside": "WebGLRenderer", "args": [["WebGLRenderTarget", "renderTarget"]], "ty": "method", "doc": "renderTarget -- The <i>>WebGLRenderTarget renderTarget</i> that needs to be activated (optional)."}, {"ret": "null", "name": "setScissor", "inside": "WebGLRenderer", "args": [["Integer", "x"], ["Integer", "y"], ["Integer", "width"], ["Integer", "height"]], "ty": "method", "doc": "Sets the scissor area from (x, y) to (x + width, y + height)"}, {"ret": "null", "name": "setScissorTest", "inside": "WebGLRenderer", "args": [["Boolean", "boolean"]], "ty": "method", "doc": "Enable or disable the scissor test. When this is enabled, only the pixels within the defined scissor area will be affected by further renderer actions."}, {"ret": "null", "name": "setSize", "inside": "WebGLRenderer", "args": [["Integer", "width"], ["Integer", "height"], ["Boolean", "updateStyle"]], "ty": "method", "doc": "Resizes the output canvas to (width, height) with device pixel ratio taken into account, and also sets the viewport to fit that size, starting in (0, 0). Setting <i>>Boolean updateStyle</i> to false prevents any style changes to the output canvas."}, {"ret": "null", "name": "setTexture2D", "inside": "WebGLRenderer", "args": [["Texture", "texture"], ["number", "slot"]], "ty": "method", "doc": "texture -- The <i>>Texture texture</i> that needs to be set."}, {"ret": "null", "name": "setTextureCube", "inside": "WebGLRenderer", "args": [["CubeTexture", "cubeTexture"], ["Number", "slot"]], "ty": "method", "doc": "texture -- The <i>>CubeTexture cubeTexture</i> that needs to be set."}, {"ret": "null", "name": "setViewport", "inside": "WebGLRenderer", "args": [["Integer", "x"], ["Integer", "y"], ["Integer", "width"], ["Integer", "height"]], "ty": "method", "doc": "Sets the viewport to render from (x, y) to (x + width, y + height)."}] ,
[{"inside": "WebGLRenderTargetCube", "args": [["Number", "width"], ["Number", "height"], ["Object", "options"]], "ty": "constructor", "doc": "<i>>Float width</i> - The width of the renderTarget."}, {"ret": "integer", "name": "activeCubeFace", "inside": "WebGLRenderTargetCube", "ty": "property", "doc": "The activeCubeFace property corresponds to a cube side (PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5) and is used and set internally by the <i>CubeCamera</i>."}] ,
[{"inside": "WebGLRenderTarget", "args": [["Number", "width"], ["Number", "height"], ["Object", "options"]], "ty": "constructor", "doc": "<i>>Float width</i> - The width of the renderTarget."}, {"ret": "number", "name": "width", "inside": "WebGLRenderTarget", "ty": "property", "doc": "The width of the render target."}, {"ret": "number", "name": "height", "inside": "WebGLRenderTarget", "ty": "property", "doc": "The height of the render target."}, {"ret": "Vector4", "name": "scissor", "inside": "WebGLRenderTarget", "ty": "property", "doc": "A rectangular area inside the render target's viewport. Fragments that are outside the area will be discarded."}, {"ret": "boolean", "name": "scissorTest", "inside": "WebGLRenderTarget", "ty": "property", "doc": "Indicates whether the scissor test is active or not."}, {"ret": "Vector4", "name": "viewport", "inside": "WebGLRenderTarget", "ty": "property", "doc": "The viewport of this render target."}, {"ret": "Texture", "name": "texture", "inside": "WebGLRenderTarget", "ty": "property", "doc": "This texture instance holds the rendered pixels. Use it as input for further processing."}, {"ret": "boolean", "name": "depthBuffer", "inside": "WebGLRenderTarget", "ty": "property", "doc": "Renders to the depth buffer. Default is true."}, {"ret": "boolean", "name": "stencilBuffer", "inside": "WebGLRenderTarget", "ty": "property", "doc": "Renders to the stencil buffer. Default is true."}, {"ret": "DepthTexture", "name": "depthTexture", "inside": "WebGLRenderTarget", "ty": "property", "doc": "If set, the scene depth will be rendered to this texture. Default is null."}, {"ret": "null", "name": "setSize", "inside": "WebGLRenderTarget", "args": [["Number", "width"], ["Number", "height"]], "ty": "method", "doc": "Sets the size of the render target."}, {"ret": "WebGLRenderTarget", "name": "clone", "inside": "WebGLRenderTarget", "args": [], "ty": "method", "doc": "Creates a copy of this render target."}, {"ret": "WebGLRenderTarget", "name": "copy", "inside": "WebGLRenderTarget", "args": [["WebGLRenderTarget", "source"]], "ty": "method", "doc": "Adopts the settings of the given render target."}, {"ret": "null", "name": "dispose", "inside": "WebGLRenderTarget", "args": [], "ty": "method", "doc": "Dispatches a dispose event."}] ,
[{"inside": "WebGLProgram", "args": [["WebGLRenderer", "renderer"], ["Object", "code"], ["Material", "material"], ["Object", "parameters"]], "ty": "constructor", "doc": "For parameters see <i>>WebGLRenderer WebGLRenderer</i>"}, {"ret": "String", "name": "id", "inside": "WebGLProgram", "ty": "property"}, {"ret": "String", "name": "code", "inside": "WebGLProgram", "ty": "property"}, {"ret": "Integer", "name": "usedTimes", "inside": "WebGLProgram", "ty": "property"}, {"ret": "Object", "name": "program", "inside": "WebGLProgram", "ty": "property"}, {"ret": "WebGLShader", "name": "vertexShader", "inside": "WebGLProgram", "ty": "property"}, {"ret": "WebGLShader", "name": "fragmentShader", "inside": "WebGLProgram", "ty": "property", "doc": "Methods"}, {"ret": "Object", "name": "getUniforms", "inside": "WebGLProgram", "args": [], "ty": "method", "doc": "Returns a name-value mapping of all active uniform locations."}, {"ret": "Object", "name": "getAttributes", "inside": "WebGLProgram", "args": [], "ty": "method", "doc": "Returns a name-value mapping of all active vertex attribute locations."}] ,
[{"ret": "null", "name": "enable", "inside": "WebGLState", "args": [["integer", "id"], ["boolean", "boolean"]], "ty": "method", "doc": "TODO"}, {"ret": "null", "name": "disable", "inside": "WebGLState", "args": [["integer", "id"], ["boolean", "boolean"]], "ty": "method", "doc": "TODO"}, {"ret": "null", "name": "setDepthTest", "inside": "WebGLState", "args": [["boolean", "depthTest"]], "ty": "method", "doc": "depthTest -- The boolean to decide if depth of a fragment needs to be tested against the depth buffer ."}, {"ret": "null", "name": "setDepthWrite", "inside": "WebGLState", "args": [["boolean", "depthWrite"]], "ty": "method", "doc": "depthWrite -- The boolean to decide if depth of a fragment needs to be kept."}, {"ret": "null", "name": "setBlending", "inside": "WebGLState", "args": [["number", "blending"], ["number", "blendEquation"], ["number", "blendSrc"], ["number", "blendDst"]], "ty": "method", "doc": "blending -- A number indicating the blending mode. Possible value are THREE.NoBlending, THREE.NormalBlending, THREE.AdditiveBlending, THREE.SubtractiveBlending, THREE.MultiplyBlending or THREE.CustomBlending"}] ,
[{"inside": "Texture", "args": [], "ty": "constructor", "doc": "Example"}, {"ret": "Integer", "name": "id", "inside": "Texture", "ty": "property", "doc": "Readonly - unique number for this texture instance."}, {"ret": "String", "name": "uuid", "inside": "Texture", "ty": "property", "doc": "UUID of this object instance. This gets automatically assigned, so this shouldn't be edited."}, {"ret": "String", "name": "name", "inside": "Texture", "ty": "property", "doc": "Optional name of the object (doesn't need to be unique). Default is an empty string."}, {"ret": "Image", "name": "image", "inside": "Texture", "ty": "property", "doc": "An image object, typically created using the [page:TextureLoader.load] method. This can be any image (e.g., PNG, JPG, GIF, DDS) or video (e.g., MP4, OGG/OGV) type supported by three.js."}, {"ret": "array", "name": "mipmaps", "inside": "Texture", "ty": "property", "doc": "Array of user-specified mipmaps (optional)."}, {"ret": "number", "name": "mapping", "inside": "Texture", "ty": "property", "doc": "How the image is applied to the object. An object type of [page:Textures THREE.UVMapping] is the default, where the U,V coordinates are used to apply the map."}, {"ret": "number", "name": "wrapS", "inside": "Texture", "ty": "property", "doc": "This defines how the texture is wrapped horizontally and corresponds to *U* in UV mapping."}, {"ret": "number", "name": "wrapT", "inside": "Texture", "ty": "property", "doc": "This defines how the texture is wrapped vertically and corresponds to *V* in UV mapping."}, {"ret": "number", "name": "magFilter", "inside": "Texture", "ty": "property", "doc": "How the texture is sampled when a texel covers more than one pixel. The default is [page:Textures THREE.LinearFilter], which takes the four closest texels and bilinearly interpolates among them. The other option is [page:Textures THREE.NearestFilter], which uses the value of the closest texel."}, {"ret": "number", "name": "minFilter", "inside": "Texture", "ty": "property", "doc": "How the texture is sampled when a texel covers less than one pixel. The default is [page:Textures THREE.LinearMipMapLinearFilter], which uses mipmapping and a trilinear filter."}, {"ret": "number", "name": "anisotropy", "inside": "Texture", "ty": "property", "doc": "The number of samples taken along the axis through the pixel that has the highest density of texels. By default, this value is 1. A higher value gives a less blurry result than a basic mipmap, at the cost of more texture samples being used. Use [page:WebGLRenderer.getMaxAnisotropy renderer.getMaxAnisotropy]() to find the maximum valid anisotropy value for the GPU; this value is usually a power of 2."}, {"ret": "number", "name": "format", "inside": "Texture", "ty": "property", "doc": "The default is [page:Textures THREE.RGBAFormat], although the <i>>TextureLoader TextureLoader</i> will automatically set this to [page:Textures THREE.RGBFormat] for JPG images."}, {"ret": "number", "name": "type", "inside": "Texture", "ty": "property", "doc": "This must correspond to the [page:Texture.format .format]. The default is [page:Textures THREE.UnsignedByteType], which will be used for most texture formats."}, {"ret": "Vector2", "name": "offset", "inside": "Texture", "ty": "property", "doc": "How much a single repetition of the texture is offset from the beginning, in each direction U and V. Typical range is *0.0* to *1.0*. _Note:_ The offset property is a convenience modifier and only affects the Texture's application to the first set of UVs on a model. If the Texture is used as a map requiring additional UV sets (e.g. the aoMap or lightMap of most stock materials), those UVs must be manually assigned to achieve the desired offset."}, {"ret": "Vector2", "name": "repeat", "inside": "Texture", "ty": "property", "doc": "How many times the texture is repeated across the surface, in each direction U and V. If repeat is set greater than 1 in either direction, the corresponding Wrap parameter should also be set to [page:Textures THREE.RepeatWrapping] or [page:Textures THREE.MirroredRepeatWrapping] to achieve the desired tiling effect. _Note:_ The repeat property is a convenience modifier and only affects the Texture's application to the first set of UVs on a model. If the Texture is used as a map requiring additional UV sets (e.g. the aoMap or lightMap of most stock materials), those UVs must be manually assigned to achieve the desired repetiton."}, {"ret": "number", "name": "rotation", "inside": "Texture", "ty": "property", "doc": "How much the texture is rotated around the center point, in radians. Postive values are counter-clockwise. Default is *0*."}, {"ret": "Vector2", "name": "center", "inside": "Texture", "ty": "property", "doc": "The point around which rotation occurs. A value of (0.5, 0.5) corresponds to the center of the texture. Default is (0, 0), the lower left."}, {"ret": "boolean", "name": "matrixAutoUpdate", "inside": "Texture", "ty": "property", "doc": "Whether to update the texture's uv-transform [page:Texture.matrix .matrix] from the texture properties [page:Texture.offset .offset], [page:Texture.repeat .repeat], [page:Texture.rotation .rotation], and [page:Texture.center .center]. True by default. Set this to false if you are specifying the uv-transform matrix directly."}, {"ret": "Matrix3", "name": "matrix", "inside": "Texture", "ty": "property", "doc": "The uv-transform matrix for the texture. Updated by the renderer from the texture properties [page:Texture.offset .offset], [page:Texture.repeat .repeat], [page:Texture.rotation .rotation], and [page:Texture.center .center] when the texture's [page:Texture.matrixAutoUpdate .matrixAutoUpdate] property is true. When [page:Texture.matrixAutoUpdate .matrixAutoUpdate] property is false, this matrix may be set manually. Default is the identity matrix."}, {"ret": "boolean", "name": "generateMipmaps", "inside": "Texture", "ty": "property", "doc": "Whether to generate mipmaps (if possible) for a texture. True by default. Set this to false if you are creating mipmaps manually."}, {"ret": "boolean", "name": "premultiplyAlpha", "inside": "Texture", "ty": "property", "doc": "False by default, which is the norm for PNG images. Set to true if the RGB values have been stored premultiplied by alpha."}, {"ret": "boolean", "name": "flipY", "inside": "Texture", "ty": "property", "doc": "True by default. Flips the image's Y axis to match the WebGL texture coordinate space."}, {"ret": "number", "name": "unpackAlignment", "inside": "Texture", "ty": "property", "doc": "4 by default. Specifies the alignment requirements for the start of each pixel row in memory. The allowable values are 1 (byte-alignment), 2 (rows aligned to even-numbered bytes), 4 (word-alignment), and 8 (rows start on double-word boundaries). See glPixelStorei for more information."}, {"ret": "number", "name": "encoding", "inside": "Texture", "ty": "property", "doc": "[page:Textures THREE.LinearEncoding] is the default. See the [page:Textures texture constants] page for details of other formats."}, {"ret": "Integer", "name": "version", "inside": "Texture", "ty": "property", "doc": "This starts at *0* and counts how many times [property:Boolean needsUpdate] is set to *true*."}, {"ret": "Function", "name": "onUpdate", "inside": "Texture", "ty": "property", "doc": "A callback function, called when the texture is updated (e.g., when needsUpdate has been set to true and then the texture is used)."}, {"ret": "Boolean", "name": "needsUpdate", "inside": "Texture", "ty": "property", "doc": "Set this to *true* to trigger an update next time the texture is used. Particularly important for setting the wrap mode."}, {"ret": "null", "name": "updateMatrix", "inside": "Texture", "args": [], "ty": "method", "doc": "Update the texture's uv-transform [page:Texture.matrix .matrix] from the texture properties [page:Texture.offset .offset], [page:Texture.repeat .repeat], [page:Texture.rotation .rotation], and [page:Texture.center .center]."}, {"ret": "Texture", "name": "clone", "inside": "Texture", "args": [], "ty": "method", "doc": "Make copy of the texture. Note this is not a \"deep copy\", the image is shared."}, {"ret": "Texture", "name": "toJSON", "inside": "Texture", "args": [["Object", "meta"]], "ty": "method", "doc": "meta -- optional object containing metadata."}, {"ret": "null", "name": "dispose", "inside": "Texture", "args": [], "ty": "method", "doc": "Call <i>>EventDispatcher EventDispatcher</i>.dispatchEvent with a 'dispose' event type."}, {"ret": "Vector2", "name": "transformUv", "inside": "Texture", "args": [["Vector2", "uv"]], "ty": "method", "doc": "Transform the uv based on the value of this texture's [page:Texture.offset .offset], [page:Texture.repeat .repeat], [page:Texture.wrapS .wrapS], [page:Texture.wrapT .wrapT] and [page:Texture.flipY .flipY] properties."}] ,
[{"inside": "CubeTexture", "args": [], "ty": "constructor", "doc": "CubeTexture is almost equivalent in functionality and usage to <i>Texture</i>. The only differences are that the images are an array of 6 images as opposed to a single image, and the mapping options are [page:Textures THREE.CubeReflectionMapping] (default) or [page:Textures THREE.CubeRefractionMapping]"}] ,
[{"inside": "DepthTexture", "args": [["Number", "width"], ["Number", "height"], ["Constant", "type"], ["Constant", "wrapS"], ["Constant", "wrapT"], ["Constant", "magFilter"], ["Constant", "minFilter"], ["Number", "anisotropy"], ["Constant", "format"]], "ty": "constructor", "doc": "<i>>Number width</i> -- width of the texture."}] ,
[{"inside": "CompressedTexture", "args": [["Array", "mipmaps"], ["Number", "width"], ["Number", "height"], ["Constant", "format"], ["Constant", "type"], ["Constant", "mapping"], ["Constant", "wrapS"], ["Constant", "wrapT"], ["Constant", "magFilter"], ["Constant", "minFilter"], ["Number", "anisotropy"]], "ty": "constructor", "doc": "<i>>Array mipmaps</i> -- The mipmaps array should contain objects with data, width and height. The mipmaps should be of the correct format and type."}, {"ret": "boolean", "name": "flipY", "inside": "CompressedTexture", "ty": "property", "doc": "False by default. Flipping textures does not work for compressed textures."}, {"ret": "boolean", "name": "generateMipmaps", "inside": "CompressedTexture", "ty": "property", "doc": "False by default. Mipmaps can't be generated for compressed textures"}] ,
[{"inside": "DataTexture", "args": [], "ty": "constructor", "doc": "The data argument must be an ArrayBuffer or a typed array view. Further parameters correspond to the properties inherited from <i>Texture</i>, where both magFilter and minFilter default to THREE.NearestFilter. The properties flipY and generateMipmaps are intially set to false."}, {"ret": "Image", "name": "image", "inside": "DataTexture", "ty": "property", "doc": "Overridden with a record type holding data, width and height."}] ,
[{"inside": "VideoTexture", "args": [["Video", "video"], ["Constant", "mapping"], ["Constant", "wrapS"], ["Constant", "wrapT"], ["Constant", "magFilter"], ["Constant", "minFilter"], ["Constant", "format"], ["Constant", "type"], ["Number", "anisotropy"]], "ty": "constructor", "doc": "<i>>Video video</i> -- The video element to use as the texture."}, {"ret": "boolean", "name": "needsUpdate", "inside": "VideoTexture", "ty": "property", "doc": "You will not need to set this manually here as it is handled by the <i>VideoTexture.update</i> method."}, {"ret": "null", "name": "update", "inside": "VideoTexture", "args": [], "ty": "method", "doc": "This is called automatically and sets [property:boolean needsUpdate] to *true* every time a new frame is available."}] ,
[{"inside": "CanvasTexture", "args": [["HTMLElement", "canvas"], ["Constant", "mapping"], ["Constant", "wrapS"], ["Constant", "wrapT"], ["Constant", "magFilter"], ["Constant", "minFilter"], ["Constant", "format"], ["Constant", "type"], ["Number", "anisotropy"]], "ty": "constructor", "doc": "<i>>HTMLElement canvas</i> -- The HTML canvas element from which to load the texture."}, {"ret": "boolean", "name": "needsUpdate", "inside": "CanvasTexture", "ty": "property", "doc": "True by default. This is required so that the canvas data is loaded."}] ,
[{"inside": "Scene", "args": [], "ty": "constructor", "doc": "Create a new scene object."}, {"ret": "Fog", "name": "fog", "inside": "Scene", "ty": "property", "doc": "A <i>>Fog fog</i> instance defining the type of fog that affects everything rendered in the scene. Default is null."}, {"ret": "Material", "name": "overrideMaterial", "inside": "Scene", "ty": "property", "doc": "If not null, it will force everything in the scene to be rendered with that material. Default is null."}, {"ret": "boolean", "name": "autoUpdate", "inside": "Scene", "ty": "property", "doc": "Default is true. If set, then the renderer checks every frame if the scene and its objects needs matrix updates. When it isn't, then you have to maintain all matrices in the scene yourself."}, {"ret": "Object", "name": "background", "inside": "Scene", "ty": "property", "doc": "If not null, sets the background used when rendering the scene, and is always rendered first. Can be set to a <i>Color</i> which sets the clear color, a <i>Texture</i> covering the canvas, or a <i>CubeTexture</i>. Default is null."}] ,
[{"inside": "FogExp2", "args": [["Integer", "color"], ["Float", "density"]], "ty": "constructor", "doc": "The color parameter is passed to the <i>Color</i> constructor to set the color property. Color can be a hexadecimal integer or a CSS-style string."}, {"ret": "String", "name": "name", "inside": "FogExp2", "ty": "property", "doc": "Optional name of the object (doesn't need to be unique). Default is an empty string."}, {"ret": "Color", "name": "color", "inside": "FogExp2", "ty": "property", "doc": "Fog color. Example: If set to black, far away objects will be rendered black."}, {"ret": "Float", "name": "density", "inside": "FogExp2", "ty": "property", "doc": "Defines how fast the fog will grow dense."}, {"ret": "FogExp2", "name": "clone", "inside": "FogExp2", "args": [], "ty": "method", "doc": "Returns a new FogExp2 instance with the same parameters as this one."}, {"ret": "FogExp2", "name": "toJSON", "inside": "FogExp2", "args": [], "ty": "method", "doc": "Return FogExp2 data in JSON format."}] ,
[{"inside": "Fog", "args": [["Integer", "color"], ["Float", "near"], ["Float", "far"]], "ty": "constructor", "doc": "The color parameter is passed to the <i>Color</i> constructor to set the color property. Color can be a hexadecimal integer or a CSS-style string."}, {"ret": "String", "name": "name", "inside": "Fog", "ty": "property", "doc": "Optional name of the object (doesn't need to be unique). Default is an empty string."}, {"ret": "Color", "name": "color", "inside": "Fog", "ty": "property", "doc": "Fog color. Example: If set to black, far away objects will be rendered black."}, {"ret": "Float", "name": "near", "inside": "Fog", "ty": "property", "doc": "The minimum distance to start applying fog. Objects that are less than 'near' units from the active camera won't be affected by fog."}, {"ret": "Float", "name": "far", "inside": "Fog", "ty": "property", "doc": "The maximum distance at which fog stops being calculated and applied. Objects that are more than 'far' units away from the active camera won't be affected by fog."}, {"ret": "Fog", "name": "clone", "inside": "Fog", "args": [], "ty": "method", "doc": "Returns a new fog instance with the same parameters as this one."}, {"ret": "Fog", "name": "toJSON", "inside": "Fog", "args": [], "ty": "method", "doc": "Return fog data in JSON format."}] ,
[{"inside": "MeshLambertMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i>) can be passed in here."}, {"ret": "Texture", "name": "alphaMap", "inside": "MeshLambertMaterial", "ty": "property", "doc": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null."}, {"ret": "Texture", "name": "aoMap", "inside": "MeshLambertMaterial", "ty": "property", "doc": "The red channel of this texture is used as the ambient occlusion map. Default is null. The aoMap requires a second set of UVs, and consequently will ignore the <i>>Texture repeat</i> and <i>>Texture offset</i> Texture properties."}, {"ret": "Float", "name": "aoMapIntensity", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Intensity of the ambient occlusion effect. Default is 1. Zero is no occlusion effect."}, {"ret": "Color", "name": "color", "inside": "MeshLambertMaterial", "ty": "property", "doc": "<i>Color</i> of the material, by default set to white (0xffffff)."}, {"ret": "Integer", "name": "combine", "inside": "MeshLambertMaterial", "ty": "property", "doc": "How to combine the result of the surface's color with the environment map, if any."}, {"ret": "Color", "name": "emissive", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Emissive (light) color of the material, essentially a solid color unaffected by other lighting. Default is black."}, {"ret": "Texture", "name": "emissiveMap", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Set emissive (glow) map. Default is null. The emissive map color is modulated by the emissive color and the emissive intensity. If you have an emissive map, be sure to set the emissive color to something other than black."}, {"ret": "Float", "name": "emissiveIntensity", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Intensity of the emissive light. Modulates the emissive color. Default is 1."}, {"ret": "TextureCube", "name": "envMap", "inside": "MeshLambertMaterial", "ty": "property", "doc": "The environment map. Default is null."}, {"ret": "Boolean", "name": "isMeshLambertMaterial", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are mesh Lambert materials. Default is *true*."}, {"ret": "Texture", "name": "lightMap", "inside": "MeshLambertMaterial", "ty": "property", "doc": "The light map. Default is null. The lightMap requires a second set of UVs, and consequently will ignore the <i>>Texture repeat</i> and <i>>Texture offset</i> Texture properties."}, {"ret": "Float", "name": "lightMapIntensity", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Intensity of the baked light. Default is 1."}, {"ret": "Texture", "name": "map", "inside": "MeshLambertMaterial", "ty": "property", "doc": "The color map. Default is null."}, {"ret": "boolean", "name": "morphNormals", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Defines whether the material uses morphNormals. Set as true to pass morphNormal attributes from the <i>Geometry</i> to the shader. Default is *false*."}, {"ret": "Boolean", "name": "morphTargets", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Define whether the material uses morphTargets. Default is false."}, {"ret": "Float", "name": "reflectivity", "inside": "MeshLambertMaterial", "ty": "property", "doc": "How much the environment map affects the surface; also see <i>>combine</i>."}, {"ret": "Float", "name": "refractionRatio", "inside": "MeshLambertMaterial", "ty": "property", "doc": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of the material. It is used with environment mapping modes [page:Textures THREE.CubeRefractionMapping] and [page:Textures THREE.EquirectangularRefractionMapping]. The refraction ratio should not exceed 1. Default is *0.98*."}, {"ret": "Boolean", "name": "skinning", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Define whether the material uses skinning. Default is false."}, {"ret": "Texture", "name": "specularMap", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Specular map used by the material. Default is null."}, {"ret": "Boolean", "name": "wireframe", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Render geometry as wireframe. Default is *false* (i.e. render as flat polygons)."}, {"ret": "String", "name": "wireframeLinecap", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Define appearance of line ends. Possible values are \"butt\", \"round\" and \"square\". Default is 'round'."}, {"ret": "String", "name": "wireframeLinejoin", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Define appearance of line joints. Possible values are \"round\", \"bevel\" and \"miter\". Default is 'round'."}, {"ret": "Float", "name": "wireframeLinewidth", "inside": "MeshLambertMaterial", "ty": "property", "doc": "Controls wireframe thickness. Default is 1."}] ,
[{"inside": "MeshBasicMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i>) can be passed in here."}, {"ret": "Texture", "name": "alphaMap", "inside": "MeshBasicMaterial", "ty": "property", "doc": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null."}, {"ret": "Texture", "name": "aoMap", "inside": "MeshBasicMaterial", "ty": "property", "doc": "The red channel of this texture is used as the ambient occlusion map. Default is null. The aoMap requires a second set of UVs, and consequently will ignore the <i>>Texture repeat</i> and <i>>Texture offset</i> Texture properties."}, {"ret": "Float", "name": "aoMapIntensity", "inside": "MeshBasicMaterial", "ty": "property", "doc": "Intensity of the ambient occlusion effect. Default is 1. Zero is no occlusion effect."}, {"ret": "Color", "name": "color", "inside": "MeshBasicMaterial", "ty": "property", "doc": "<i>Color</i> of the material, by default set to white (0xffffff)."}, {"ret": "Integer", "name": "combine", "inside": "MeshBasicMaterial", "ty": "property", "doc": "How to combine the result of the surface's color with the environment map, if any."}, {"ret": "Boolean", "name": "isMeshBasicMaterial", "inside": "MeshBasicMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are mesh basic materials. Default is *true*."}, {"ret": "TextureCube", "name": "envMap", "inside": "MeshBasicMaterial", "ty": "property", "doc": "The environment map. Default is null."}, {"ret": "Texture", "name": "lightMap", "inside": "MeshBasicMaterial", "ty": "property", "doc": "The light map. Default is null. The lightMap requires a second set of UVs, and consequently will ignore the <i>>Texture repeat</i> and <i>>Texture offset</i> Texture properties."}, {"ret": "Float", "name": "lightMapIntensity", "inside": "MeshBasicMaterial", "ty": "property", "doc": "Intensity of the baked light. Default is 1."}, {"ret": "Boolean", "name": "lights", "inside": "MeshBasicMaterial", "ty": "property", "doc": "Whether the material is affected by lights. Default is *false*."}, {"ret": "Texture", "name": "map", "inside": "MeshBasicMaterial", "ty": "property", "doc": "The color map. Default is null."}, {"ret": "Boolean", "name": "morphTargets", "inside": "MeshBasicMaterial", "ty": "property", "doc": "Define whether the material uses morphTargets. Default is false."}, {"ret": "Float", "name": "reflectivity", "inside": "MeshBasicMaterial", "ty": "property", "doc": "How much the environment map affects the surface; also see <i>>combine</i>. The default value is 1 and the valid range is between 0 (no reflections) and 1 (full reflections)."}, {"ret": "Float", "name": "refractionRatio", "inside": "MeshBasicMaterial", "ty": "property", "doc": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of the material. It is used with environment mapping modes [page:Textures THREE.CubeRefractionMapping] and [page:Textures THREE.EquirectangularRefractionMapping]. The refraction ratio should not exceed 1. Default is *0.98*."}, {"ret": "Boolean", "name": "skinning", "inside": "MeshBasicMaterial", "ty": "property", "doc": "Define whether the material uses skinning. Default is false."}, {"ret": "Texture", "name": "specularMap", "inside": "MeshBasicMaterial", "ty": "property", "doc": "Specular map used by the material. Default is null."}, {"ret": "Boolean", "name": "wireframe", "inside": "MeshBasicMaterial", "ty": "property", "doc": "Render geometry as wireframe. Default is *false* (i.e. render as flat polygons)."}, {"ret": "String", "name": "wireframeLinecap", "inside": "MeshBasicMaterial", "ty": "property", "doc": "Define appearance of line ends. Possible values are \"butt\", \"round\" and \"square\". Default is 'round'."}, {"ret": "String", "name": "wireframeLinejoin", "inside": "MeshBasicMaterial", "ty": "property", "doc": "Define appearance of line joints. Possible values are \"round\", \"bevel\" and \"miter\". Default is 'round'."}, {"ret": "Float", "name": "wireframeLinewidth", "inside": "MeshBasicMaterial", "ty": "property", "doc": "Controls wireframe thickness. Default is 1."}] ,
[{"inside": "RawShaderMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i> and <i>ShaderMaterial</i>) can be passed in here."}, {"ret": "Boolean", "name": "isRawShaderMaterial", "inside": "RawShaderMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are raw shader materials. Default is *true*."}] ,
[{"inside": "MeshPhysicalMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i> and <i>MeshStandardMaterial</i>) can be passed in here."}, {"ret": "Float", "name": "clearCoat", "inside": "MeshPhysicalMaterial", "ty": "property", "doc": "ClearCoat level, from *0.0* to *1.0*. Default is *0.0*."}, {"ret": "Float", "name": "clearCoatRoughness", "inside": "MeshPhysicalMaterial", "ty": "property", "doc": "How rough the clearCoat appears, from *0.0* to *1.0*. Default is *0.0*."}, {"ret": "Boolean", "name": "isMeshPhysicalMaterial", "inside": "MeshPhysicalMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are mesh physical materials. Default is *true*."}, {"ret": "Object", "name": "defines", "inside": "MeshPhysicalMaterial", "ty": "property", "doc": "An object of the form:"}, {"ret": "Float", "name": "reflectivity", "inside": "MeshPhysicalMaterial", "ty": "property", "doc": "Degree of reflectivity, from *0.0* to *1.0*. Default is *0.5*."}] ,
[{"inside": "Material", "args": [], "ty": "constructor", "doc": "This creates a generic material."}, {"ret": "Float", "name": "alphaTest", "inside": "Material", "ty": "property", "doc": "Sets the alpha value to be used when running an alpha test. The material will not be renderered if the opacity is lower than this value. Default is *0*."}, {"ret": "Integer", "name": "blendDst", "inside": "Material", "ty": "property", "doc": "Blending destination. Default is <i>>CustomBlendingEquation OneMinusSrcAlphaFactor</i>. See the destination factors <i>>CustomBlendingEquation constants</i> for all possible values."}, {"ret": "Integer", "name": "blendDstAlpha", "inside": "Material", "ty": "property", "doc": "The transparency of the <i>>blendDst</i>. Default is *null*."}, {"ret": "Integer", "name": "blendEquation", "inside": "Material", "ty": "property", "doc": "Blending equation to use when applying blending. Default is <i>>CustomBlendingEquation AddEquation</i>. See the blending equation <i>>CustomBlendingEquation constants</i> for all possible values."}, {"ret": "Integer", "name": "blendEquationAlpha", "inside": "Material", "ty": "property", "doc": "The tranparency of the <i>>blendEquation</i>. Default is *null*."}, {"ret": "Blending", "name": "blending", "inside": "Material", "ty": "property", "doc": "Which blending to use when displaying objects with this material."}, {"ret": "Integer", "name": "blendSrc", "inside": "Material", "ty": "property", "doc": "Blending source. Default is <i>>CustomBlendingEquation SrcAlphaFactor</i>. See the source factors <i>>CustomBlendingEquation constants</i> for all possible values."}, {"ret": "Integer", "name": "blendSrcAlpha", "inside": "Material", "ty": "property", "doc": "The tranparency of the <i>>blendSrc</i>. Default is *null*."}, {"ret": "Boolean", "name": "clipIntersection", "inside": "Material", "ty": "property", "doc": "Changes the behavior of clipping planes so that only their intersection is clipped, rather than their union. Default is *false*."}, {"ret": "Array", "name": "clippingPlanes", "inside": "Material", "ty": "property", "doc": "User-defined clipping planes specified as THREE.Plane objects in world space. These planes apply to the objects this material is attached to. Points in space whose signed distance to the plane is negative are clipped (not rendered). This requires [page:WebGLRenderer.localClippingEnabled] to be *true*. See the [example:webgl_clipping_intersection WebGL / clipping /intersection] example. Default is *null*."}, {"ret": "Boolean", "name": "clipShadows", "inside": "Material", "ty": "property", "doc": "Defines whether to clip shadows according to the clipping planes specified on this material. Default is *false*."}, {"ret": "Boolean", "name": "colorWrite", "inside": "Material", "ty": "property", "doc": "Whether to render the material's color. This can be used in conjunction with a mesh's <i>>Integer renderOrder</i> property to create invisible objects that occlude other objects. Default is *true*."}, {"ret": "Material", "name": "customDepthMaterial", "inside": "Material", "ty": "property", "doc": "Custom depth material to be used by this material when rendering to the depth map. When shadow-casting with a <i>DirectionalLight</i> or <i>SpotLight</i>, if you are (a) modifying vertex positions in the vertex shader, (b) using a displacement map, (c) using an alpha map with alphaTest, or (d) using a transparent texture with alphaTest, you must specify a customDepthMaterial for proper shadows. Default is *undefined*."}, {"ret": "Material", "name": "customDistanceMaterial", "inside": "Material", "ty": "property", "doc": "Same as customDepthMaterial, but used with <i>PointLight</i>. Default is *undefined*."}, {"ret": "Object", "name": "defines", "inside": "Material", "ty": "property", "doc": "Custom defines to be injected into the shader. These are passed in form of an object literal, with key/value pairs. { MY_CUSTOM_DEFINE: '' , PI2: Math.PI * 2 }. The pairs are defined in both vertex and fragment shaders. Default is *undefined*."}, {"ret": "Integer", "name": "depthFunc", "inside": "Material", "ty": "property", "doc": "Which depth function to use. Default is <i>>Materials LessEqualDepth</i>. See the depth mode <i>>Materials constants</i> for all possible values."}, {"ret": "Boolean", "name": "depthTest", "inside": "Material", "ty": "property", "doc": "Whether to have depth test enabled when rendering this material. Default is *true*."}, {"ret": "Boolean", "name": "depthWrite", "inside": "Material", "ty": "property", "doc": "Whether rendering this material has any effect on the depth buffer. Default is *true*."}, {"ret": "Boolean", "name": "flatShading", "inside": "Material", "ty": "property", "doc": "Define whether the material is rendered with flat shading. Default is false."}, {"ret": "Boolean", "name": "fog", "inside": "Material", "ty": "property", "doc": "Whether the material is affected by fog. Default is *true*."}, {"ret": "Integer", "name": "id", "inside": "Material", "ty": "property", "doc": "Unique number for this material instance."}, {"ret": "Boolean", "name": "isMaterial", "inside": "Material", "ty": "property", "doc": "Used to check whether this or derived classes are materials. Default is *true*."}, {"ret": "Boolean", "name": "lights", "inside": "Material", "ty": "property", "doc": "Whether the material is affected by lights. Default is *true*."}, {"ret": "String", "name": "name", "inside": "Material", "ty": "property", "doc": "Optional name of the object (doesn't need to be unique). Default is an empty string."}, {"ret": "Boolean", "name": "needsUpdate", "inside": "Material", "ty": "property", "doc": "Specifies that the material needs to be recompiled."}, {"ret": "Float", "name": "opacity", "inside": "Material", "ty": "property", "doc": "Float in the range of *0.0* - *1.0* indicating how transparent the material is. A value of *0.0* indicates fully transparent, *1.0* is fully opaque."}, {"ret": "Float", "name": "overdraw", "inside": "Material", "ty": "property", "doc": "Amount of triangle expansion at draw time. This is a workaround for cases when gaps appear between triangles when using <i>CanvasRenderer</i>. *0.5* tends to give good results across browsers. Default is *0*."}, {"ret": "Boolean", "name": "polygonOffset", "inside": "Material", "ty": "property", "doc": "Whether to use polygon offset. Default is *false*. This corresponds to the *GL_POLYGON_OFFSET_FILL* WebGL feature."}, {"ret": "Integer", "name": "polygonOffsetFactor", "inside": "Material", "ty": "property", "doc": "Sets the polygon offset factor. Default is *0*."}, {"ret": "Integer", "name": "polygonOffsetUnits", "inside": "Material", "ty": "property", "doc": "Sets the polygon offset units. Default is *0*."}, {"ret": "String", "name": "precision", "inside": "Material", "ty": "property", "doc": "Override the renderer's default precision for this material. Can be \"*highp*\", \"*mediump*\" or \"*lowp*\". Default is *null*."}, {"ret": "Boolean", "name": "premultipliedAlpha", "inside": "Material", "ty": "property", "doc": "Whether to premultiply the alpha (transparency) value. See [Example:webgl_materials_transparency WebGL / Materials / Transparency] for an example of the difference. Default is *false*."}, {"ret": "Boolean", "name": "dithering", "inside": "Material", "ty": "property", "doc": "Whether to apply dithering to the color to remove the appearance of banding. Default is *false*."}, {"ret": "Integer", "name": "shadowSide", "inside": "Material", "ty": "property", "doc": "Defines which side of faces cast shadows. When set, can be [page:Materials THREE.FrontSide], [page:Materials THREE.BackSide], or [page:Materials THREE.DoubleSide]. Default is *null*."}, {"ret": "Integer", "name": "side", "inside": "Material", "ty": "property", "doc": "Defines which side of faces will be rendered - front, back or both. Default is [page:Materials THREE.FrontSide]. Other options are [page:Materials THREE.BackSide] and [page:Materials THREE.DoubleSide]."}, {"ret": "Boolean", "name": "transparent", "inside": "Material", "ty": "property", "doc": "Defines whether this material is transparent. This has an effect on rendering as transparent objects need special treatment and are rendered after non-transparent objects."}, {"ret": "String", "name": "type", "inside": "Material", "ty": "property", "doc": "Value is the string 'Material'. This shouldn't be changed, and can be used to find all objects of this type in a scene."}, {"ret": "String", "name": "uuid", "inside": "Material", "ty": "property", "doc": "UUID of this material instance. This gets automatically assigned, so this shouldn't be edited."}, {"ret": "Integer", "name": "vertexColors", "inside": "Material", "ty": "property", "doc": "Defines whether vertex coloring is used. Default is [page:Materials THREE.NoColors]. Other options are [page:Materials THREE.VertexColors] and [page:Materials THREE.FaceColors]."}, {"ret": "Boolean", "name": "visible", "inside": "Material", "ty": "property", "doc": "Defines whether this material is visible. Default is *true*."}, {"ret": "object", "name": "userData", "inside": "Material", "ty": "property", "doc": "An object that can be used to store custom data about the Material. It should not hold references to functions as these will not be cloned."}, {"ret": "Material", "name": "clone", "inside": "Material", "args": [], "ty": "method", "doc": "Return a new material with the same parameters as this material."}, {"ret": "Material", "name": "copy", "inside": "Material", "args": [["material", "material"]], "ty": "method", "doc": "Copy the parameters from the passed material into this material."}, {"ret": "null", "name": "dispose", "inside": "Material", "args": [], "ty": "method", "doc": "This disposes the material. Textures of a material don't get disposed. These needs to be disposed by <i>>Texture Texture</i>."}, {"ret": "null", "name": "onBeforeCompile", "inside": "Material", "args": [["Object", "shader"], ["WebGLRenderer", "renderer"]], "ty": "method", "doc": "An optional callback that is executed immediately before the shader program is compiled. This function is called with the shader source code as a parameter. Useful for the modification of built-in materials."}, {"ret": "null", "name": "setValues", "inside": "Material", "args": [["object", "values"]], "ty": "method", "doc": "values -- a container with parameters."}, {"ret": "null", "name": "toJSON", "inside": "Material", "args": [["object", "meta"]], "ty": "method", "doc": "meta -- object containing metadata such as textures or images for the material."}] ,
[{"inside": "PointsMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i>) can be passed in here."}, {"ret": "Color", "name": "color", "inside": "PointsMaterial", "ty": "property", "doc": "<i>Color</i> of the material, by default set to white (0xffffff)."}, {"ret": "Boolean", "name": "isPointsMaterial", "inside": "PointsMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are points materials. Default is *true*."}, {"ret": "Texture", "name": "map", "inside": "PointsMaterial", "ty": "property", "doc": "Sets the color of the points using data from a <i>Texture</i>."}, {"ret": "Boolean", "name": "morphTargets", "inside": "PointsMaterial", "ty": "property", "doc": "Define whether the material uses morphTargets. Default is false."}, {"ret": "Number", "name": "size", "inside": "PointsMaterial", "ty": "property", "doc": "Sets the size of the points. Default is 1.0."}, {"ret": "Boolean", "name": "sizeAttenuation", "inside": "PointsMaterial", "ty": "property", "doc": "Specify whether points' size is attenuated by the camera depth. (Perspective camera only.) Default is true."}] ,
[{"inside": "MeshStandardMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i>) can be passed in here."}, {"ret": "Texture", "name": "alphaMap", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null."}, {"ret": "Texture", "name": "aoMap", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The red channel of this texture is used as the ambient occlusion map. Default is null. The aoMap requires a second set of UVs, and consequently will ignore the <i>>Texture repeat</i> and <i>>Texture offset</i> Texture properties."}, {"ret": "Float", "name": "aoMapIntensity", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Intensity of the ambient occlusion effect. Default is 1. Zero is no occlusion effect."}, {"ret": "Texture", "name": "bumpMap", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The texture to create a bump map. The black and white values map to the perceived depth in relation to the lights. Bump doesn't actually affect the geometry of the object, only the lighting. If a normal map is defined this will be ignored."}, {"ret": "Float", "name": "bumpScale", "inside": "MeshStandardMaterial", "ty": "property", "doc": "How much the bump map affects the material. Typical ranges are 0-1. Default is 1."}, {"ret": "Color", "name": "color", "inside": "MeshStandardMaterial", "ty": "property", "doc": "<i>Color</i> of the material, by default set to white (0xffffff)."}, {"ret": "Object", "name": "defines", "inside": "MeshStandardMaterial", "ty": "property", "doc": "An object of the form:"}, {"ret": "Texture", "name": "displacementMap", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh."}, {"ret": "Float", "name": "displacementScale", "inside": "MeshStandardMaterial", "ty": "property", "doc": "How much the displacement map affects the mesh (where black is no displacement, and white is maximum displacement). Without a displacement map set, this value is not applied. Default is 1."}, {"ret": "Float", "name": "displacementBias", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The offset of the displacement map's values on the mesh's vertices. Without a displacement map set, this value is not applied. Default is 0."}, {"ret": "Color", "name": "emissive", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Emissive (light) color of the material, essentially a solid color unaffected by other lighting. Default is black."}, {"ret": "Texture", "name": "emissiveMap", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Set emisssive (glow) map. Default is null. The emissive map color is modulated by the emissive color and the emissive intensity. If you have an emissive map, be sure to set the emissive color to something other than black."}, {"ret": "Float", "name": "emissiveIntensity", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Intensity of the emissive light. Modulates the emissive color. Default is 1."}, {"ret": "TextureCube", "name": "envMap", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The environment map. Default is null. Note that in order for the material roughness property to correctly blur out the environment map, the shader must have access to mipmaps of the env texture. TextureCubes created with default settings are correctly configured; if adjusting texture parameters manually, ensure minFilter is set to one of the MipMap options, and that mip maps have not been otherwise forcibly disabled."}, {"ret": "Float", "name": "envMapIntensity", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Scales the effect of the environment map by multiplying its color."}, {"ret": "Boolean", "name": "isMeshStandardMaterial", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are mesh standard materials. Default is *true*."}, {"ret": "Texture", "name": "lightMap", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The light map. Default is null. The lightMap requires a second set of UVs, and consequently will ignore the <i>>Texture repeat</i> and <i>>Texture offset</i> Texture properties."}, {"ret": "Float", "name": "lightMapIntensity", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Intensity of the baked light. Default is 1."}, {"ret": "Texture", "name": "map", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The color map. Default is null. The texture map color is modulated by the diffuse <i>>color</i>."}, {"ret": "Float", "name": "metalness", "inside": "MeshStandardMaterial", "ty": "property", "doc": "How much the material is like a metal. Non-metallic materials such as wood or stone use 0.0, metallic use 1.0, with nothing (usually) in between. Default is 0.5. A value between 0.0 and 1.0 could be used for a rusty metal look. If metalnessMap is also provided, both values are multiplied."}, {"ret": "Texture", "name": "metalnessMap", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The blue channel of this texture is used to alter the metalness of the material."}, {"ret": "boolean", "name": "morphNormals", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Defines whether the material uses morphNormals. Set as true to pass morphNormal attributes from the <i>Geometry</i> to the shader. Default is *false*."}, {"ret": "Boolean", "name": "morphTargets", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Define whether the material uses morphTargets. Default is false."}, {"ret": "Texture", "name": "normalMap", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The texture to create a normal map. The RGB values affect the surface normal for each pixel fragment and change the way the color is lit. Normal maps do not change the actual shape of the surface, only the lighting."}, {"ret": "Integer", "name": "normalMapType", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The type of normal map."}, {"ret": "Vector2", "name": "normalScale", "inside": "MeshStandardMaterial", "ty": "property", "doc": "How much the normal map affects the material. Typical ranges are 0-1. Default is a <i>Vector2</i> set to (1,1)."}, {"ret": "Float", "name": "refractionRatio", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of the material. It is used with environment mapping modes [page:Textures THREE.CubeRefractionMapping] and [page:Textures THREE.EquirectangularRefractionMapping]. The refraction ratio should not exceed 1. Default is *0.98*."}, {"ret": "Float", "name": "roughness", "inside": "MeshStandardMaterial", "ty": "property", "doc": "How rough the material appears. 0.0 means a smooth mirror reflection, 1.0 means fully diffuse. Default is 0.5. If roughnessMap is also provided, both values are multiplied."}, {"ret": "Texture", "name": "roughnessMap", "inside": "MeshStandardMaterial", "ty": "property", "doc": "The green channel of this texture is used to alter the roughness of the material."}, {"ret": "Boolean", "name": "skinning", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Define whether the material uses skinning. Default is false."}, {"ret": "Boolean", "name": "wireframe", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Render geometry as wireframe. Default is *false* (i.e. render as flat polygons)."}, {"ret": "String", "name": "wireframeLinecap", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Define appearance of line ends. Possible values are \"butt\", \"round\" and \"square\". Default is 'round'."}, {"ret": "String", "name": "wireframeLinejoin", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Define appearance of line joints. Possible values are \"round\", \"bevel\" and \"miter\". Default is 'round'."}, {"ret": "Float", "name": "wireframeLinewidth", "inside": "MeshStandardMaterial", "ty": "property", "doc": "Controls wireframe thickness. Default is 1."}] ,
[{"inside": "ShadowMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i> and <i>ShaderMaterial</i>) can be passed in here."}, {"ret": "Boolean", "name": "isShadowMaterial", "inside": "ShadowMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are shadow materials. Default is *true*."}, {"ret": "Boolean", "name": "lights", "inside": "ShadowMaterial", "ty": "property", "doc": "Whether the material is affected by lights. Default is *true*."}, {"ret": "Boolean", "name": "transparent", "inside": "ShadowMaterial", "ty": "property", "doc": "Defines whether this material is transparent. Default is *true*."}] ,
[{"inside": "LineBasicMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i>) can be passed in here."}, {"ret": "Color", "name": "color", "inside": "LineBasicMaterial", "ty": "property", "doc": "<i>Color</i> of the material, by default set to white (0xffffff)."}, {"ret": "Boolean", "name": "isLineBasicMaterial", "inside": "LineBasicMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are line basic materials. Default is *true*."}, {"ret": "Boolean", "name": "lights", "inside": "LineBasicMaterial", "ty": "property", "doc": "Whether the material is affected by lights. Default is *false*."}, {"ret": "Float", "name": "linewidth", "inside": "LineBasicMaterial", "ty": "property", "doc": "Controls line thickness. Default is *1*."}, {"ret": "String", "name": "linecap", "inside": "LineBasicMaterial", "ty": "property", "doc": "Define appearance of line ends. Possible values are 'butt', 'round' and 'square'. Default is 'round'."}, {"ret": "String", "name": "linejoin", "inside": "LineBasicMaterial", "ty": "property", "doc": "Define appearance of line joints. Possible values are 'round', 'bevel' and 'miter'. Default is 'round'."}] ,
[{"inside": "MeshToonMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i> and <i>MeshStandardMaterial</i>) can be passed in here."}, {"ret": "Texture", "name": "gradientMap", "inside": "MeshToonMaterial", "ty": "property", "doc": "Gradient map for the toon shading. Default is *null*."}, {"ret": "Boolean", "name": "isMeshToonMaterial", "inside": "MeshToonMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are mesh toon materials. Default is *true*."}, {"ret": "Object", "name": "defines", "inside": "MeshToonMaterial", "ty": "property", "doc": "An object of the form:"}] ,
[{"inside": "SpriteMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i>) can be passed in here."}, {"ret": "Color", "name": "color", "inside": "SpriteMaterial", "ty": "property", "doc": "<i>Color</i> of the material, by default set to white (0xffffff). The <i>>map</i> is mutiplied by the color."}, {"ret": "boolean", "name": "fog", "inside": "SpriteMaterial", "ty": "property", "doc": "Whether or not this material affected by the scene's fog. Default is false"}, {"ret": "Boolean", "name": "lights", "inside": "SpriteMaterial", "ty": "property", "doc": "Whether the material is affected by lights. Default is *false*."}, {"ret": "Texture", "name": "map", "inside": "SpriteMaterial", "ty": "property", "doc": "The texture map. Default is null."}, {"ret": "Radians", "name": "rotation", "inside": "SpriteMaterial", "ty": "property", "doc": "The rotation of the sprite in radians. Default is 0."}, {"ret": "Boolean", "name": "sizeAttenuation", "inside": "SpriteMaterial", "ty": "property", "doc": "Whether the size of the sprite is attenuated by the camera depth. (Perspective camera only.) Default is *true*."}] ,
[{"inside": "MeshDepthMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i>) can be passed in here."}, {"ret": "Texture", "name": "alphaMap", "inside": "MeshDepthMaterial", "ty": "property", "doc": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null."}, {"ret": "Constant", "name": "depthPacking", "inside": "MeshDepthMaterial", "ty": "property", "doc": "Encoding for depth packing. Default is <i>>Textures BasicDepthPacking</i>."}, {"ret": "Texture", "name": "displacementMap", "inside": "MeshDepthMaterial", "ty": "property", "doc": "The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh."}, {"ret": "Float", "name": "displacementScale", "inside": "MeshDepthMaterial", "ty": "property", "doc": "How much the displacement map affects the mesh (where black is no displacement, and white is maximum displacement). Without a displacement map set, this value is not applied. Default is 1."}, {"ret": "Float", "name": "displacementBias", "inside": "MeshDepthMaterial", "ty": "property", "doc": "The offset of the displacement map's values on the mesh's vertices. Without a displacement map set, this value is not applied. Default is 0."}, {"ret": "Boolean", "name": "fog", "inside": "MeshDepthMaterial", "ty": "property", "doc": "Whether the material is affected by fog. Default is *false*."}, {"ret": "Boolean", "name": "isMeshDepthMaterial", "inside": "MeshDepthMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are mesh depth materials. Default is *true*."}, {"ret": "Boolean", "name": "lights", "inside": "MeshDepthMaterial", "ty": "property", "doc": "Whether the material is affected by lights. Default is *false*."}, {"ret": "Texture", "name": "map", "inside": "MeshDepthMaterial", "ty": "property", "doc": "The color map. Default is null."}, {"ret": "boolean", "name": "morphTargets", "inside": "MeshDepthMaterial", "ty": "property", "doc": "Define whether the material uses morphTargets. Default is false."}, {"ret": "Boolean", "name": "skinning", "inside": "MeshDepthMaterial", "ty": "property", "doc": "Define whether the material uses skinning. Default is false."}, {"ret": "boolean", "name": "wireframe", "inside": "MeshDepthMaterial", "ty": "property", "doc": "Render geometry as wireframe. Default is false (i.e. render as smooth shaded)."}, {"ret": "Float", "name": "wireframeLinewidth", "inside": "MeshDepthMaterial", "ty": "property", "doc": "Controls wireframe thickness. Default is 1."}] ,
[{"inside": "LineDashedMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i>) can be passed in here."}, {"ret": "Color", "name": "color", "inside": "LineDashedMaterial", "ty": "property", "doc": "<i>Color</i> of the material, by default set to white (0xffffff)."}, {"ret": "number", "name": "dashSize", "inside": "LineDashedMaterial", "ty": "property", "doc": "The size of the dash. This is both the gap with the stroke. Default is *3*."}, {"ret": "number", "name": "gapSize", "inside": "LineDashedMaterial", "ty": "property", "doc": "The size of the gap. Default is *1*."}, {"ret": "Boolean", "name": "isLineDashedMaterial", "inside": "LineDashedMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are line dashed materials. Default is *true*."}, {"ret": "Boolean", "name": "lights", "inside": "LineDashedMaterial", "ty": "property", "doc": "Whether the material is affected by lights. Default is *false*."}, {"ret": "Float", "name": "linewidth", "inside": "LineDashedMaterial", "ty": "property", "doc": "Controls line thickness. Default is *1*."}, {"ret": "number", "name": "scale", "inside": "LineDashedMaterial", "ty": "property", "doc": "The scale of the dashed part of a line. Default is *1*."}] ,
[{"inside": "MeshNormalMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i>) can be passed in here."}, {"ret": "Boolean", "name": "fog", "inside": "MeshNormalMaterial", "ty": "property", "doc": "Whether the material is affected by fog. Default is *false*."}, {"ret": "Boolean", "name": "isMeshNormalMaterial", "inside": "MeshNormalMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are mesh normal materials. Default is *true*."}, {"ret": "Boolean", "name": "lights", "inside": "MeshNormalMaterial", "ty": "property", "doc": "Whether the material is affected by lights. Default is *false*."}, {"ret": "boolean", "name": "morphTargets", "inside": "MeshNormalMaterial", "ty": "property", "doc": "Define whether the material uses morphTargets. Default is false."}, {"ret": "boolean", "name": "wireframe", "inside": "MeshNormalMaterial", "ty": "property", "doc": "Render geometry as wireframe. Default is false (i.e. render as smooth shaded)."}, {"ret": "Float", "name": "wireframeLinewidth", "inside": "MeshNormalMaterial", "ty": "property", "doc": "Controls wireframe thickness. Default is 1."}] ,
[{"inside": "ShaderMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i>) can be passed in here."}, {"ret": "Boolean", "name": "clipping", "inside": "ShaderMaterial", "ty": "property", "doc": "Defines whether this material supports clipping; true to let the renderer pass the clippingPlanes uniform. Default is false."}, {"ret": "Object", "name": "defaultAttributeValues", "inside": "ShaderMaterial", "ty": "property", "doc": "When the rendered geometry doesn't include these attributes but the material does, these default values will be passed to the shaders. This avoids errors when buffer data is missing."}, {"ret": "Object", "name": "defines", "inside": "ShaderMaterial", "ty": "property", "doc": "Defines custom constants using *#define* directives within the GLSL code for both the vertex shader and the fragment shader; each key/value pair yields another directive:"}, {"ret": "Object", "name": "extensions", "inside": "ShaderMaterial", "ty": "property", "doc": "An object with the following properties:"}, {"ret": "Boolean", "name": "fog", "inside": "ShaderMaterial", "ty": "property", "doc": "Define whether the material color is affected by global fog settings; true to pass fog uniforms to the shader. Default is false."}, {"ret": "String", "name": "fragmentShader", "inside": "ShaderMaterial", "ty": "property", "doc": "Fragment shader GLSL code. This is the actual code for the shader. In the example above, the *vertexShader* and *fragmentShader* code is extracted from the DOM; it could be passed as a string directly or loaded via AJAX instead."}, {"ret": "String", "name": "index0AttributeName", "inside": "ShaderMaterial", "ty": "property", "doc": "If set, this calls [link:https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation gl.bindAttribLocation] to bind a generic vertex index to an attribute variable. Default is undefined."}, {"ret": "Boolean", "name": "isShaderMaterial", "inside": "ShaderMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are shader materials. Default is *true*."}, {"ret": "Boolean", "name": "lights", "inside": "ShaderMaterial", "ty": "property", "doc": "Defines whether this material uses lighting; true to pass uniform data related to lighting to this shader. Default is false."}, {"ret": "Float", "name": "linewidth", "inside": "ShaderMaterial", "ty": "property", "doc": "Controls wireframe thickness. Default is 1."}, {"ret": "Boolean", "name": "morphTargets", "inside": "ShaderMaterial", "ty": "property", "doc": "Defines whether the material uses morphTargets; true morphTarget attributes to this shader"}, {"ret": "boolean", "name": "morphNormals", "inside": "ShaderMaterial", "ty": "property", "doc": "Defines whether the material uses morphNormals. Set as true to pass morphNormal attributes from the <i>Geometry</i> to the shader. Default is *false*."}, {"ret": "WebGLProgram", "name": "program", "inside": "ShaderMaterial", "ty": "property", "doc": "The compiled shader program associated with this material, generated by <i>WebGLRenderer</i>. You should not need to access this property."}, {"ret": "Boolean", "name": "flatShading", "inside": "ShaderMaterial", "ty": "property", "doc": "Define whether the material is rendered with flat shading. Default is false."}, {"ret": "Boolean", "name": "skinning", "inside": "ShaderMaterial", "ty": "property", "doc": "Define whether the material uses skinning; true to pass skinning attributes to the shader. Default is false."}, {"ret": "Object", "name": "uniforms", "inside": "ShaderMaterial", "ty": "property", "doc": "An object of the form:"}, {"ret": "Number", "name": "vertexColors", "inside": "ShaderMaterial", "ty": "property", "doc": "Define how the vertices are colored, by defining how the *colors* attribute gets populated. Possible values are [page:Materials THREE.NoColors], [page:Materials THREE.FaceColors] and [page:Materials THREE.VertexColors]. Default is THREE.NoColors."}, {"ret": "String", "name": "vertexShader", "inside": "ShaderMaterial", "ty": "property", "doc": "Vertex shader GLSL code. This is the actual code for the shader. In the example above, the *vertexShader* and *fragmentShader* code is extracted from the DOM; it could be passed as a string directly or loaded via AJAX instead."}, {"ret": "Boolean", "name": "wireframe", "inside": "ShaderMaterial", "ty": "property", "doc": "Render geometry as wireframe (using GL_LINES instead of GL_TRIANGLES). Default is false (i.e. render as flat polygons)."}, {"ret": "Float", "name": "wireframeLinewidth", "inside": "ShaderMaterial", "ty": "property", "doc": "Controls wireframe thickness. Default is 1."}, {"ret": "ShaderMaterial", "name": "clone", "inside": "ShaderMaterial", "args": [], "ty": "method", "doc": "Generates a shallow copy of this material. Note that the vertexShader and fragmentShader are copied"}] ,
[{"inside": "MeshPhongMaterial", "args": [["Object", "parameters"]], "ty": "constructor", "doc": "<i>>Object parameters</i> - (optional) an object with one or more properties defining the material's appearance. Any property of the material (including any property inherited from <i>Material</i>) can be passed in here."}, {"ret": "Texture", "name": "alphaMap", "inside": "MeshPhongMaterial", "ty": "property", "doc": "The alpha map is a grayscale texture that controls the opacity across the surface (black: fully transparent; white: fully opaque). Default is null."}, {"ret": "Texture", "name": "aoMap", "inside": "MeshPhongMaterial", "ty": "property", "doc": "The red channel of this texture is used as the ambient occlusion map. Default is null. The aoMap requires a second set of UVs, and consequently will ignore the <i>>Texture repeat</i> and <i>>Texture offset</i> Texture properties."}, {"ret": "Float", "name": "aoMapIntensity", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Intensity of the ambient occlusion effect. Default is 1. Zero is no occlusion effect."}, {"ret": "Texture", "name": "bumpMap", "inside": "MeshPhongMaterial", "ty": "property", "doc": "The texture to create a bump map. The black and white values map to the perceived depth in relation to the lights. Bump doesn't actually affect the geometry of the object, only the lighting. If a normal map is defined this will be ignored."}, {"ret": "Float", "name": "bumpScale", "inside": "MeshPhongMaterial", "ty": "property", "doc": "How much the bump map affects the material. Typical ranges are 0-1. Default is 1."}, {"ret": "Color", "name": "color", "inside": "MeshPhongMaterial", "ty": "property", "doc": "<i>Color</i> of the material, by default set to white (0xffffff)."}, {"ret": "Integer", "name": "combine", "inside": "MeshPhongMaterial", "ty": "property", "doc": "How to combine the result of the surface's color with the environment map, if any."}, {"ret": "Texture", "name": "displacementMap", "inside": "MeshPhongMaterial", "ty": "property", "doc": "The displacement map affects the position of the mesh's vertices. Unlike other maps which only affect the light and shade of the material the displaced vertices can cast shadows, block other objects, and otherwise act as real geometry. The displacement texture is an image where the value of each pixel (white being the highest) is mapped against, and repositions, the vertices of the mesh."}, {"ret": "Float", "name": "displacementScale", "inside": "MeshPhongMaterial", "ty": "property", "doc": "How much the displacement map affects the mesh (where black is no displacement, and white is maximum displacement). Without a displacement map set, this value is not applied. Default is 1."}, {"ret": "Float", "name": "displacementBias", "inside": "MeshPhongMaterial", "ty": "property", "doc": "The offset of the displacement map's values on the mesh's vertices. Without a displacement map set, this value is not applied. Default is 0."}, {"ret": "Color", "name": "emissive", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Emissive (light) color of the material, essentially a solid color unaffected by other lighting. Default is black."}, {"ret": "Texture", "name": "emissiveMap", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Set emisssive (glow) map. Default is null. The emissive map color is modulated by the emissive color and the emissive intensity. If you have an emissive map, be sure to set the emissive color to something other than black."}, {"ret": "Float", "name": "emissiveIntensity", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Intensity of the emissive light. Modulates the emissive color. Default is 1."}, {"ret": "TextureCube", "name": "envMap", "inside": "MeshPhongMaterial", "ty": "property", "doc": "The environment map. Default is null."}, {"ret": "Boolean", "name": "isMeshPhongMaterial", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Used to check whether this or derived classes are mesh Phong materials. Default is *true*."}, {"ret": "Texture", "name": "lightMap", "inside": "MeshPhongMaterial", "ty": "property", "doc": "The light map. Default is null. The lightMap requires a second set of UVs, and consequently will ignore the <i>>Texture repeat</i> and <i>>Texture offset</i> Texture properties."}, {"ret": "Float", "name": "lightMapIntensity", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Intensity of the baked light. Default is 1."}, {"ret": "Texture", "name": "map", "inside": "MeshPhongMaterial", "ty": "property", "doc": "The color map. Default is null. The texture map color is modulated by the diffuse <i>>color</i>."}, {"ret": "boolean", "name": "morphNormals", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Defines whether the material uses morphNormals. Set as true to pass morphNormal attributes from the <i>Geometry</i> to the shader. Default is *false*."}, {"ret": "Boolean", "name": "morphTargets", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Define whether the material uses morphTargets. Default is false."}, {"ret": "Texture", "name": "normalMap", "inside": "MeshPhongMaterial", "ty": "property", "doc": "The texture to create a normal map. The RGB values affect the surface normal for each pixel fragment and change the way the color is lit. Normal maps do not change the actual shape of the surface, only the lighting."}, {"ret": "Integer", "name": "normalMapType", "inside": "MeshPhongMaterial", "ty": "property", "doc": "The type of normal map."}, {"ret": "Vector2", "name": "normalScale", "inside": "MeshPhongMaterial", "ty": "property", "doc": "How much the normal map affects the material. Typical ranges are 0-1. Default is a <i>Vector2</i> set to (1,1)."}, {"ret": "Float", "name": "reflectivity", "inside": "MeshPhongMaterial", "ty": "property", "doc": "How much the environment map affects the surface; also see <i>>combine</i>. The default value is 1 and the valid range is between 0 (no reflections) and 1 (full reflections)."}, {"ret": "Float", "name": "refractionRatio", "inside": "MeshPhongMaterial", "ty": "property", "doc": "The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of the material. It is used with environment mapping modes [page:Textures THREE.CubeRefractionMapping] and [page:Textures THREE.EquirectangularRefractionMapping]. The refraction ratio should not exceed 1. Default is *0.98*."}, {"ret": "Float", "name": "shininess", "inside": "MeshPhongMaterial", "ty": "property", "doc": "How shiny the <i>>specular</i> highlight is; a higher value gives a sharper highlight. Default is *30*."}, {"ret": "Boolean", "name": "skinning", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Define whether the material uses skinning. Default is false."}, {"ret": "Color", "name": "specular", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Specular color of the material. Default is a <i>Color</i> set to *0x111111* (very dark grey)."}, {"ret": "Texture", "name": "specularMap", "inside": "MeshPhongMaterial", "ty": "property", "doc": "The specular map value affects both how much the specular surface highlight contributes and how much of the environment map affects the surface. Default is null."}, {"ret": "Boolean", "name": "wireframe", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Render geometry as wireframe. Default is *false* (i.e. render as flat polygons)."}, {"ret": "String", "name": "wireframeLinecap", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Define appearance of line ends. Possible values are \"butt\", \"round\" and \"square\". Default is 'round'."}, {"ret": "String", "name": "wireframeLinejoin", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Define appearance of line joints. Possible values are \"round\", \"bevel\" and \"miter\". Default is 'round'."}, {"ret": "Float", "name": "wireframeLinewidth", "inside": "MeshPhongMaterial", "ty": "property", "doc": "Controls wireframe thickness. Default is 1."}] ,
[{"inside": "BufferAttribute", "args": [["TypedArray", "array"], ["Integer", "itemSize"], ["Boolean", "normalized"]], "ty": "constructor", "doc": "<i>>TypedArray array</i> -- Must be a TypedArray. Used to instantiate the buffer."}, {"ret": "TypedArray", "name": "array", "inside": "BufferAttribute", "ty": "property", "doc": "The <i>>TypedArray array</i> holding data stored in the buffer."}, {"ret": "Integer", "name": "count", "inside": "BufferAttribute", "ty": "property", "doc": "Stores the <i>BufferAttribute.array</i>'s length divided by the <i>BufferAttribute.itemSize</i>."}, {"ret": "Boolean", "name": "dynamic", "inside": "BufferAttribute", "ty": "property", "doc": "Whether the buffer is dynamic or not. Default is *false*."}, {"ret": "Boolean", "name": "isBufferAttribute", "inside": "BufferAttribute", "ty": "property", "doc": "Used to check whether this or derived classes are BufferAttributes. Default is *true*."}, {"ret": "Integer", "name": "itemSize", "inside": "BufferAttribute", "ty": "property", "doc": "The length of vectors that are being stored in the <i>BufferAttribute.array</i>."}, {"ret": "String", "name": "name", "inside": "BufferAttribute", "ty": "property", "doc": "Optional name for this attribute instance. Default is an empty string."}, {"ret": "Boolean", "name": "needsUpdate", "inside": "BufferAttribute", "ty": "property", "doc": "Flag to indicate that this attribute has changed and should be re-sent to the GPU. Set this to true when you modify the value of the array."}, {"ret": "Boolean", "name": "normalized", "inside": "BufferAttribute", "ty": "property", "doc": "Indicates how the underlying data in the buffer maps to the values in the GLSL shader code. See the constructor above for details."}, {"ret": "Function", "name": "onUploadCallback", "inside": "BufferAttribute", "ty": "property", "doc": "A callback function that is executed after the Renderer has transferred the attribute array data to the GPU."}, {"ret": "Object", "name": "updateRange", "inside": "BufferAttribute", "ty": "property", "doc": "Object containing:"}, {"ret": "Integer", "name": "version", "inside": "BufferAttribute", "ty": "property", "doc": "A version number, incremented every time the <i>BufferAttribute.needsUpdate</i> property is set to true."}, {"ret": "BufferAttribute", "name": "clone", "inside": "BufferAttribute", "args": [], "ty": "method", "doc": "Return a copy of this bufferAttribute."}, {"ret": "BufferAttribute", "name": "copy", "inside": "BufferAttribute", "args": [["BufferAttribute", "bufferAttribute"]], "ty": "method", "doc": "Copies another BufferAttribute to this BufferAttribute."}, {"ret": "BufferAttribute", "name": "copyArray", "inside": "BufferAttribute", "args": [], "ty": "method", "doc": "Copy the array given here (which can be a normal array or TypedArray) into <i>BufferAttribute.array</i>."}, {"ret": "BufferAttribute", "name": "copyColorsArray", "inside": "BufferAttribute", "args": [["Array", "colors"]], "ty": "method", "doc": "Copy an array representing RGB color values into <i>BufferAttribute.array</i>."}, {"ret": "BufferAttribute", "name": "copyVector2sArray", "inside": "BufferAttribute", "args": [["Array", "vectors"]], "ty": "method", "doc": "Copy an array representing <i>Vector2</i>s into <i>BufferAttribute.array</i>."}, {"ret": "BufferAttribute", "name": "copyVector3sArray", "inside": "BufferAttribute", "args": [["Array", "vectors"]], "ty": "method", "doc": "Copy an array representing <i>Vector3</i>s into <i>BufferAttribute.array</i>."}, {"ret": "BufferAttribute", "name": "copyVector4sArray", "inside": "BufferAttribute", "args": [["Array", "vectors"]], "ty": "method", "doc": "Copy an array representing <i>Vector4</i>s into <i>BufferAttribute.array</i>."}, {"ret": "Number", "name": "getX", "inside": "BufferAttribute", "args": [["Integer", "index"]], "ty": "method", "doc": "Returns the x component of the vector at the given index."}, {"ret": "Number", "name": "getY", "inside": "BufferAttribute", "args": [["Integer", "index"]], "ty": "method", "doc": "Returns the y component of the vector at the given index."}, {"ret": "Number", "name": "getZ", "inside": "BufferAttribute", "args": [["Integer", "index"]], "ty": "method", "doc": "Returns the z component of the vector at the given index."}, {"ret": "Number", "name": "getW", "inside": "BufferAttribute", "args": [["Integer", "index"]], "ty": "method", "doc": "Returns the w component of the vector at the given index."}, {"ret": "null", "name": "onUpload", "inside": "BufferAttribute", "args": [["Function", "callback"]], "ty": "method", "doc": "Sets the value of the onUploadCallback property."}, {"ret": "BufferAttribute", "name": "setX", "inside": "BufferAttribute", "args": [["Integer", "index"], ["Float", "x"]], "ty": "method", "doc": "Sets the x component of the vector at the given index."}, {"ret": "BufferAttribute", "name": "setY", "inside": "BufferAttribute", "args": [["Integer", "index"], ["Float", "y"]], "ty": "method", "doc": "Sets the y component of the vector at the given index."}, {"ret": "BufferAttribute", "name": "setZ", "inside": "BufferAttribute", "args": [["Integer", "index"], ["Float", "z"]], "ty": "method", "doc": "Sets the z component of the vector at the given index."}, {"ret": "BufferAttribute", "name": "setW", "inside": "BufferAttribute", "args": [["Integer", "index"], ["Float", "w"]], "ty": "method", "doc": "Sets the w component of the vector at the given index."}, {"ret": "BufferAttribute", "name": "setXY", "inside": "BufferAttribute", "args": [["Integer", "index"], ["Float", "x"], ["Float", "y"]], "ty": "method", "doc": "Sets the x and y components of the vector at the given index."}, {"ret": "BufferAttribute", "name": "setXYZ", "inside": "BufferAttribute", "args": [["Integer", "index"], ["Float", "x"], ["Float", "y"], ["Float", "z"]], "ty": "method", "doc": "Sets the x, y and z components of the vector at the given index."}, {"ret": "BufferAttribute", "name": "setXYZW", "inside": "BufferAttribute", "args": [["Integer", "index"], ["Float", "x"], ["Float", "y"], ["Float", "z"], ["Float", "w"]], "ty": "method", "doc": "Sets the x, y, z and w components of the vector at the given index."}] ,
[{"inside": "Layers", "args": [], "ty": "constructor", "doc": "Create a new Layers object, with membership initially set to layer 0."}, {"ret": "Integer", "name": "mask", "inside": "Layers", "ty": "property", "doc": "A bit mask storing which of the 32 layers this layers object is currently a member of."}, {"ret": "null", "name": "disable", "inside": "Layers", "args": [["Integer", "layer"]], "ty": "method", "doc": "layer - an integer from 0 to 31."}, {"ret": "null", "name": "enable", "inside": "Layers", "args": [["Integer", "layer"]], "ty": "method", "doc": "layer - an integer from 0 to 31."}, {"ret": "null", "name": "set", "inside": "Layers", "args": [["Integer", "layer"]], "ty": "method", "doc": "layer - an integer from 0 to 31."}, {"ret": "Boolean", "name": "test", "inside": "Layers", "args": [["Layers", "layers"]], "ty": "method", "doc": "layers - a Layers object"}, {"ret": "null", "name": "toggle", "inside": "Layers", "args": [["Integer", "layer"]], "ty": "method", "doc": "layer - an integer from 0 to 31."}] ,
[{"inside": "Object3D", "args": [], "ty": "constructor", "doc": "The constructor takes no arguments."}, {"ret": "Boolean", "name": "castShadow", "inside": "Object3D", "ty": "property", "doc": "Whether the object gets rendered into shadow map. Default is *false*."}, {"ret": "Object3D", "name": "children", "inside": "Object3D", "ty": "property", "doc": "Array with object's children. See <i>Group</i> for info on manually grouping objects."}, {"ret": "Boolean", "name": "frustumCulled", "inside": "Object3D", "ty": "property", "doc": "When this is set, it checks every frame if the object is in the frustum of the camera before rendering the object. Otherwise the object gets rendered every frame even if it isn't visible. Default is *true*."}, {"ret": "Integer", "name": "id", "inside": "Object3D", "ty": "property", "doc": "readonly \u2013 Unique number for this object instance."}, {"ret": "Boolean", "name": "isObject3D", "inside": "Object3D", "ty": "property", "doc": "Used to check whether this or derived classes are Object3Ds. Default is *true*."}, {"ret": "Layers", "name": "layers", "inside": "Object3D", "ty": "property", "doc": "The layer membership of the object. The object is only visible if it has at least one layer in common with the <i>Camera</i> in use."}, {"ret": "Matrix4", "name": "matrix", "inside": "Object3D", "ty": "property", "doc": "The local transform matrix."}, {"ret": "Boolean", "name": "matrixAutoUpdate", "inside": "Object3D", "ty": "property", "doc": "When this is set, it calculates the matrix of position, (rotation or quaternion) and scale every frame and also recalculates the matrixWorld property. Default is [page:Object3D.DefaultMatrixAutoUpdate] (true)."}, {"ret": "Matrix4", "name": "matrixWorld", "inside": "Object3D", "ty": "property", "doc": "The global transform of the object. If the Object3D has no parent, then it's identical to the local transform <i>>matrix</i>."}, {"ret": "Boolean", "name": "matrixWorldNeedsUpdate", "inside": "Object3D", "ty": "property", "doc": "When this is set, it calculates the matrixWorld in that frame and resets this property to false. Default is *false*."}, {"ret": "Matrix4", "name": "modelViewMatrix", "inside": "Object3D", "ty": "property", "doc": "This is passed to the shader and used to calculate the position of the object."}, {"ret": "String", "name": "name", "inside": "Object3D", "ty": "property", "doc": "Optional name of the object (doesn't need to be unique). Default is an empty string."}, {"ret": "Matrix3", "name": "normalMatrix", "inside": "Object3D", "ty": "property", "doc": "This is passed to the shader and used to calculate lighting for the object. It is the transpose of the inverse of the upper left 3x3 sub-matrix of this object's modelViewMatrix."}, {"ret": "function", "name": "onAfterRender", "inside": "Object3D", "ty": "property", "doc": "An optional callback that is executed immediately after the Object3D is rendered. This function is called with the following parameters: renderer, scene, camera, geometry, material, group."}, {"ret": "function", "name": "onBeforeRender", "inside": "Object3D", "ty": "property", "doc": "An optional callback that is executed immediately before the Object3D is rendered. This function is called with the following parameters: renderer, scene, camera, geometry, material, group."}, {"ret": "Object3D", "name": "parent", "inside": "Object3D", "ty": "property", "doc": "Object's parent in the graph. An object can have at most one parent."}, {"ret": "Vector3", "name": "position", "inside": "Object3D", "ty": "property", "doc": "A <i>Vector3</i> representing the object's local position. Default is (0, 0, 0)."}, {"ret": "Quaternion", "name": "quaternion", "inside": "Object3D", "ty": "property", "doc": "Object's local rotation as a <i>>Quaternion Quaternion</i>."}, {"ret": "Boolean", "name": "receiveShadow", "inside": "Object3D", "ty": "property", "doc": "Whether the material receives shadows. Default is *false*."}, {"ret": "Number", "name": "renderOrder", "inside": "Object3D", "ty": "property", "doc": "This value allows the default rendering order of graph objects to be overridden although opaque and transparent objects remain sorted independently. Sorting is from lowest to highest renderOrder. Default value is *0*."}, {"ret": "Euler", "name": "rotation", "inside": "Object3D", "ty": "property", "doc": "Object's local rotation (see angles), in radians."}, {"ret": "Vector3", "name": "scale", "inside": "Object3D", "ty": "property", "doc": "The object's local scale. Default is <i>Vector3</i>( 1, 1, 1 )."}, {"ret": "Vector3", "name": "up", "inside": "Object3D", "ty": "property", "doc": "This is used by the [page:.lookAt lookAt] method, for example, to determine the orientation of the result."}, {"ret": "object", "name": "userData", "inside": "Object3D", "ty": "property", "doc": "An object that can be used to store custom data about the Object3D. It should not hold references to functions as these will not be cloned."}, {"ret": "String", "name": "uuid", "inside": "Object3D", "ty": "property", "doc": "UUID of this object instance. This gets automatically assigned, so this shouldn't be edited."}, {"ret": "Boolean", "name": "visible", "inside": "Object3D", "ty": "property", "doc": "Object gets rendered if *true*. Default is *true*."}, {"ret": "Vector3", "name": "DefaultUp", "inside": "Object3D", "ty": "property", "doc": "The default [page:.up up] direction for objects, also used as the default position for <i>DirectionalLight</i>, <i>HemisphereLight</i> and <i>Spotlight</i> (which creates lights shining from the top down)."}, {"ret": "Vector3", "name": "DefaultMatrixAutoUpdate", "inside": "Object3D", "ty": "property", "doc": "The default setting for [page:.matrixAutoUpdate matrixAutoUpdate] for newly created Object3Ds."}, {"ret": "null", "name": "add", "inside": "Object3D", "args": [["Object3D", "object"]], "ty": "method", "doc": "Adds *object* as child of this object. An arbitrary number of objects may be added. Any current parent on an object passed in here will be removed, since an object can have at most one parent."}, {"ret": "null", "name": "applyMatrix", "inside": "Object3D", "args": [["Matrix4", "matrix"]], "ty": "method", "doc": "Applies the matrix transform to the object and updates the object's position, rotation and scale."}, {"ret": "Object3D", "name": "applyQuaternion", "inside": "Object3D", "args": [["Quaternion", "quaternion"]], "ty": "method", "doc": "Applies the rotation represented by the quaternion to the object."}, {"ret": "Object3D", "name": "clone", "inside": "Object3D", "args": [["Boolean", "recursive"]], "ty": "method", "doc": "recursive -- if true, descendants of the object are also cloned. Default is true."}, {"ret": "this", "name": "copy", "inside": "Object3D", "args": [["Object3D", "object"], ["Boolean", "recursive"]], "ty": "method", "doc": "recursive -- if true, descendants of the object are also copied. Default is true."}, {"ret": "Object3D", "name": "getObjectById", "inside": "Object3D", "args": [["Integer", "id"]], "ty": "method", "doc": "id -- Unique number of the object instance"}, {"ret": "Object3D", "name": "getObjectByName", "inside": "Object3D", "args": [["String", "name"]], "ty": "method", "doc": "name -- String to match to the children's Object3D.name property."}, {"ret": "Object3D", "name": "getObjectByProperty", "inside": "Object3D", "args": [["String", "name"], ["Float", "value"]], "ty": "method", "doc": "name -- the property name to search for."}, {"ret": "Vector3", "name": "getWorldPosition", "inside": "Object3D", "args": [["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 target</i> \u2014 the result will be copied into this Vector3."}, {"ret": "Quaternion", "name": "getWorldQuaternion", "inside": "Object3D", "args": [["Quaternion", "target"]], "ty": "method", "doc": "<i>>Quaternion target</i> \u2014 the result will be copied into this Quaternion."}, {"ret": "Vector3", "name": "getWorldScale", "inside": "Object3D", "args": [["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 target</i> \u2014 the result will be copied into this Vector3."}, {"ret": "Vector3", "name": "getWorldDirection", "inside": "Object3D", "args": [["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 target</i> \u2014 the result will be copied into this Vector3."}, {"ret": "Vector3", "name": "localToWorld", "inside": "Object3D", "args": [["Vector3", "vector"]], "ty": "method", "doc": "vector - A vector representing a position in local (object) space."}, {"ret": "null", "name": "lookAt", "inside": "Object3D", "args": [["Vector3", "vector"]], "ty": "method"}, {"ret": "null", "name": "lookAt", "inside": "Object3D", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"]], "ty": "method", "doc": "vector - A vector representing a position in world space."}, {"ret": "Array", "name": "raycast", "inside": "Object3D", "args": [["Raycaster", "raycaster"], ["Array", "intersects"]], "ty": "method", "doc": "Abstract (empty) method to get intersections between a casted ray and this object. Subclasses such as <i>Mesh</i>, <i>Line</i>, and <i>Points</i> implement this method in order to use raycasting."}, {"ret": "null", "name": "remove", "inside": "Object3D", "args": [["Object3D", "object"]], "ty": "method", "doc": "Removes *object* as child of this object. An arbitrary number of objects may be removed."}, {"ret": "this", "name": "rotateOnAxis", "inside": "Object3D", "args": [["Vector3", "axis"], ["Float", "angle"]], "ty": "method", "doc": "axis -- A normalized vector in object space."}, {"ret": "this", "name": "rotateOnWorldAxis", "inside": "Object3D", "args": [["Vector3", "axis"], ["Float", "angle"]], "ty": "method", "doc": "axis -- A normalized vector in world space."}, {"ret": "this", "name": "rotateX", "inside": "Object3D", "args": [["Float", "rad"]], "ty": "method", "doc": "rad - the angle to rotate in radians."}, {"ret": "this", "name": "rotateY", "inside": "Object3D", "args": [["Float", "rad"]], "ty": "method", "doc": "rad - the angle to rotate in radians."}, {"ret": "this", "name": "rotateZ", "inside": "Object3D", "args": [["Float", "rad"]], "ty": "method", "doc": "rad - the angle to rotate in radians."}, {"ret": "null", "name": "setRotationFromAxisAngle", "inside": "Object3D", "args": [["Vector3", "axis"], ["Float", "angle"]], "ty": "method", "doc": "axis -- A normalized vector in object space."}, {"ret": "null", "name": "setRotationFromEuler", "inside": "Object3D", "args": [["Euler", "euler"]], "ty": "method", "doc": "euler -- Euler angle specifying rotation amount."}, {"ret": "null", "name": "setRotationFromMatrix", "inside": "Object3D", "args": [["Matrix4", "m"]], "ty": "method", "doc": "m -- rotate the quaternion by the rotation component of the matrix."}, {"ret": "null", "name": "setRotationFromQuaternion", "inside": "Object3D", "args": [["Quaternion", "q"]], "ty": "method", "doc": "q -- normalized Quaternion."}, {"ret": "null", "name": "toJSON", "inside": "Object3D", "args": [["Quaternion", "q"]], "ty": "method", "doc": "Convert the object to JSON format."}, {"ret": "this", "name": "translateOnAxis", "inside": "Object3D", "args": [["Vector3", "axis"], ["Float", "distance"]], "ty": "method", "doc": "axis -- A normalized vector in object space."}, {"ret": "this", "name": "translateX", "inside": "Object3D", "args": [["Float", "distance"]], "ty": "method", "doc": "Translates object along x axis in object space by *distance* units."}, {"ret": "this", "name": "translateY", "inside": "Object3D", "args": [["Float", "distance"]], "ty": "method", "doc": "Translates object along y axis in object space by *distance* units."}, {"ret": "this", "name": "translateZ", "inside": "Object3D", "args": [["Float", "distance"]], "ty": "method", "doc": "Translates object along z axis in object space by *distance* units."}, {"ret": "null", "name": "traverse", "inside": "Object3D", "args": [["Function", "callback"]], "ty": "method", "doc": "callback - A function with as first argument an object3D object."}, {"ret": "null", "name": "traverseVisible", "inside": "Object3D", "args": [["Function", "callback"]], "ty": "method", "doc": "callback - A function with as first argument an object3D object."}, {"ret": "null", "name": "traverseAncestors", "inside": "Object3D", "args": [["Function", "callback"]], "ty": "method", "doc": "callback - A function with as first argument an object3D object."}, {"ret": "null", "name": "updateMatrix", "inside": "Object3D", "args": [], "ty": "method", "doc": "Update the local transform."}, {"ret": "null", "name": "updateMatrixWorld", "inside": "Object3D", "args": [["Boolean", "force"]], "ty": "method", "doc": "Update the global transform of the object and its children."}, {"ret": "Vector3", "name": "worldToLocal", "inside": "Object3D", "args": [["Vector3", "vector"]], "ty": "method", "doc": "vector - A world vector."}] ,
[{"inside": "DirectGeometry", "args": [], "ty": "constructor", "doc": "This creates a new [name]."}, {"ret": "Integer", "name": "id", "inside": "DirectGeometry", "ty": "property", "doc": "Unique number for this [name] instance."}, {"ret": "String", "name": "name", "inside": "DirectGeometry", "ty": "property", "doc": "Optional name. Default is the empty string."}, {"ret": "Array", "name": "type", "inside": "DirectGeometry", "ty": "property", "doc": "String 'DirectGeometry'."}, {"ret": "Array", "name": "vertices", "inside": "DirectGeometry", "ty": "property", "doc": "Initialiased as an empty array, this is populated by <i>>fromGeometry</i>()."}, {"ret": "Array", "name": "normals", "inside": "DirectGeometry", "ty": "property", "doc": "Initialiased as an empty array, this is populated by <i>>fromGeometry</i>()."}, {"ret": "Array", "name": "colors", "inside": "DirectGeometry", "ty": "property", "doc": "Initialiased as an empty array, this is populated by <i>>fromGeometry</i>()."}, {"ret": "Array", "name": "uvs", "inside": "DirectGeometry", "ty": "property", "doc": "Initialiased as an empty array, this is populated by <i>>fromGeometry</i>()."}, {"ret": "Array", "name": "uvs2", "inside": "DirectGeometry", "ty": "property", "doc": "Initialiased as an empty array, this is populated by <i>>fromGeometry</i>()."}, {"ret": "Array", "name": "groups", "inside": "DirectGeometry", "ty": "property", "doc": "Initialiased as an empty array, this is populated by <i>>fromGeometry</i>()."}, {"ret": "Array", "name": "morphTargets", "inside": "DirectGeometry", "ty": "property", "doc": "Initialiased as an empty array, this is populated by <i>>fromGeometry</i>()."}, {"ret": "Array", "name": "skinWeights", "inside": "DirectGeometry", "ty": "property", "doc": "Initialiased as an empty array, this is populated by <i>>fromGeometry</i>()."}, {"ret": "Array", "name": "skinIndices", "inside": "DirectGeometry", "ty": "property", "doc": "Initialiased as an empty array, this is populated by <i>>fromGeometry</i>()."}, {"ret": "Box3", "name": "boundingBox", "inside": "DirectGeometry", "ty": "property", "doc": "Bounding box for the bufferGeometry, which can be calculated with <i>>computeBoundingBox</i>(). Default is *null*."}, {"ret": "Sphere", "name": "boundingSphere", "inside": "DirectGeometry", "ty": "property", "doc": "Bounding sphere for the bufferGeometry, which can be calculated with <i>>computeBoundingSphere</i>(). Default is *null*."}, {"ret": "Boolean", "name": "verticesNeedUpdate", "inside": "DirectGeometry", "ty": "property", "doc": "Default is false."}, {"ret": "Boolean", "name": "normalsNeedUpdate", "inside": "DirectGeometry", "ty": "property", "doc": "Default is false."}, {"ret": "Boolean", "name": "colorsNeedUpdate", "inside": "DirectGeometry", "ty": "property", "doc": "Default is false."}, {"ret": "Boolean", "name": "uvsNeedUpdate", "inside": "DirectGeometry", "ty": "property", "doc": "Default is false."}, {"ret": "Boolean", "name": "groupsNeedUpdate", "inside": "DirectGeometry", "ty": "property", "doc": "Default is false."}, {"ret": "null", "name": "computeGroups", "inside": "DirectGeometry", "ty": "property", "doc": "Compute the parts of the geometry that have different materialIndex. See [page:BufferGeometry.groups]."}, {"ret": "null", "name": "fromGeometry", "inside": "DirectGeometry", "ty": "property", "doc": "Pass in a <i>Geometry</i> instance for conversion."}] ,
[{"inside": "EventDispatcher", "args": [], "ty": "constructor", "doc": "Creates EventDispatcher object."}, {"ret": "null", "name": "addEventListener", "inside": "EventDispatcher", "args": [["String", "type"], ["Function", "listener"]], "ty": "method", "doc": "type - The type of event to listen to."}, {"ret": "Boolean", "name": "hasEventListener", "inside": "EventDispatcher", "args": [["String", "type"], ["Function", "listener"]], "ty": "method", "doc": "type - The type of event to listen to."}, {"ret": "null", "name": "removeEventListener", "inside": "EventDispatcher", "args": [["String", "type"], ["Function", "listener"]], "ty": "method", "doc": "type - The type of the listener that gets removed."}, {"ret": "null", "name": "dispatchEvent", "inside": "EventDispatcher", "args": [["object", "event"]], "ty": "method", "doc": "event - The event that gets fired."}] ,
[{"inside": "Face3", "args": [["Integer", "a"], ["Integer", "b"], ["Integer", "c"], ["Vector3", "normal"], ["Color", "color"], ["Integer", "materialIndex"]], "ty": "constructor", "doc": "a \u2014 Vertex A index."}, {"ret": "Integer", "name": "a", "inside": "Face3", "ty": "property", "doc": "Vertex A index."}, {"ret": "Integer", "name": "b", "inside": "Face3", "ty": "property", "doc": "Vertex B index."}, {"ret": "Integer", "name": "c", "inside": "Face3", "ty": "property", "doc": "Vertex C index."}, {"ret": "Vector3", "name": "normal", "inside": "Face3", "ty": "property", "doc": "Face normal - vector showing the direction of the Face3. If calculated automatically (using [page:Geometry.computeFaceNormals]), this is the normalized cross product of two edges of the triangle. Default is *(0, 0, 0)*."}, {"ret": "Color", "name": "color", "inside": "Face3", "ty": "property", "doc": "Face color - for this to be used a material's <i>Material.vertexColors</i> property must be set to [page:Materials THREE.FaceColors]."}, {"ret": "Array", "name": "vertexNormals", "inside": "Face3", "ty": "property", "doc": "Array of 3 [page:Vector3 vertex normals]."}, {"ret": "Array", "name": "vertexColors", "inside": "Face3", "ty": "property", "doc": "Array of 3 vertex colors - for these to be used a material's <i>Material.vertexColors</i> property must be set to [page:Materials THREE.VertexColors]."}, {"ret": "Integer", "name": "materialIndex", "inside": "Face3", "ty": "property", "doc": "Material index (points to an index in the associated array of materials). Default is *0*."}, {"ret": "Face3", "name": "clone", "inside": "Face3", "args": [], "ty": "method", "doc": "Creates a new clone of the Face3 object."}, {"ret": "Face3", "name": "copy", "inside": "Face3", "args": [["Face3", "face3"]], "ty": "method", "doc": "Copy the parameters of another Face3 into this."}] ,
[{"inside": "BufferGeometry", "args": [], "ty": "constructor", "doc": "This creates a new [name]. It also sets several properties to a default value."}, {"ret": "Object", "name": "attributes", "inside": "BufferGeometry", "ty": "property", "doc": "This hashmap has as id the name of the attribute to be set and as value the <i>>BufferAttribute buffer</i> to set it to. Rather than accessing this property directly, use <i>>addAttribute</i> and <i>>getAttribute</i> to access attributes of this geometry."}, {"ret": "Box3", "name": "boundingBox", "inside": "BufferGeometry", "ty": "property", "doc": "Bounding box for the bufferGeometry, which can be calculated with <i>>computeBoundingBox</i>(). Default is *null*."}, {"ret": "Sphere", "name": "boundingSphere", "inside": "BufferGeometry", "ty": "property", "doc": "Bounding sphere for the bufferGeometry, which can be calculated with <i>>computeBoundingSphere</i>(). Default is *null*."}, {"ret": "Object", "name": "drawRange", "inside": "BufferGeometry", "ty": "property", "doc": "Used to determine what part of the geometry should be rendered. This should not be set directly, instead use <i>>setDrawRange</i>."}, {"ret": "Array", "name": "groups", "inside": "BufferGeometry", "ty": "property", "doc": "Split the geometry into groups, each of which will be rendered in a separate WebGL draw call. This allows an array of materials to be used with the bufferGeometry."}, {"ret": "Integer", "name": "id", "inside": "BufferGeometry", "ty": "property", "doc": "Unique number for this bufferGeometry instance."}, {"ret": "BufferAttribute", "name": "index", "inside": "BufferGeometry", "ty": "property", "doc": "Allows for vertices to be re-used across multiple triangles; this is called using \"indexed triangles\" and works much the same as it does in <i>Geometry</i>: each triangle is associated with the indices of three vertices. This attribute therefore stores the index of each vertex for each triangular face. If this attribute is not set, the <i>>WebGLRenderer renderer</i> assumes that each three contiguous positions represent a single triangle. Default is *null*."}, {"ret": "Boolean", "name": "isBufferGeometry", "inside": "BufferGeometry", "ty": "property", "doc": "Used to check whether this or derived classes are BufferGeometries. Default is *true*."}, {"ret": "Object", "name": "morphAttributes", "inside": "BufferGeometry", "ty": "property", "doc": "Hashmap of <i>BufferAttribute</i>s holding details of the geometry's <i>Geometry.morphTargets</i>."}, {"ret": "String", "name": "name", "inside": "BufferGeometry", "ty": "property", "doc": "Optional name for this bufferGeometry instance. Default is an empty string."}, {"ret": "Object", "name": "userData", "inside": "BufferGeometry", "ty": "property", "doc": "An object that can be used to store custom data about the BufferGeometry. It should not hold references to functions as these will not be cloned."}, {"ret": "String", "name": "uuid", "inside": "BufferGeometry", "ty": "property", "doc": "UUID of this object instance. This gets automatically assigned and shouldn't be edited."}, {"ret": "BufferGeometry", "name": "addAttribute", "inside": "BufferGeometry", "args": [["String", "name"], ["BufferAttribute", "attribute"]], "ty": "method", "doc": "Adds an attribute to this geometry. Use this rather than the attributes property, because an internal hashmap of <i>>attributes</i> is maintained to speed up iterating over attributes."}, {"ret": "null", "name": "addGroup", "inside": "BufferGeometry", "args": [["Integer", "start"], ["Integer", "count"], ["Integer", "materialIndex"]], "ty": "method", "doc": "Adds a group to this geometry; see the <i>BufferGeometry.groups</i> property for details."}, {"ret": "null", "name": "applyMatrix", "inside": "BufferGeometry", "args": [["Matrix4", "matrix"]], "ty": "method", "doc": "Bakes matrix transform directly into vertex coordinates."}, {"ret": "BufferGeometry", "name": "clone", "inside": "BufferGeometry", "args": [], "ty": "method", "doc": "Creates a clone of this BufferGeometry."}, {"ret": "BufferGeometry", "name": "copy", "inside": "BufferGeometry", "args": [["BufferGeometry", "bufferGeometry"]], "ty": "method", "doc": "Copies another BufferGeometry to this BufferGeometry."}, {"ret": "null", "name": "clearGroups", "inside": "BufferGeometry", "args": [], "ty": "method", "doc": "Clears all groups."}, {"ret": "null", "name": "computeBoundingBox", "inside": "BufferGeometry", "args": [], "ty": "method", "doc": "Computes bounding box of the geometry, updating [param:.boundingBox] attribute."}, {"ret": "null", "name": "computeBoundingSphere", "inside": "BufferGeometry", "args": [], "ty": "method", "doc": "Computes bounding sphere of the geometry, updating <i>>boundingSphere</i> attribute."}, {"ret": "null", "name": "computeVertexNormals", "inside": "BufferGeometry", "args": [], "ty": "method", "doc": "Computes vertex normals by averaging face normals."}, {"ret": "null", "name": "dispose", "inside": "BufferGeometry", "args": [], "ty": "method", "doc": "Disposes the object from memory."}, {"ret": "BufferGeometry", "name": "fromDirectGeometry", "inside": "BufferGeometry", "args": [], "ty": "method", "doc": "Populates this BufferGeometry with data from a <i>DirectGeometry</i> object containing faces. Not implemented for a line geometry."}, {"ret": "BufferGeometry", "name": "fromGeometry", "inside": "BufferGeometry", "args": [], "ty": "method", "doc": "Populates this BufferGeometry with data from a <i>Geometry</i> object containing faces. Not implemented for a line geometry."}, {"ret": "BufferAttribute", "name": "getAttribute", "inside": "BufferGeometry", "args": [["String", "name"]], "ty": "method", "doc": "Returns the <i>>BufferAttribute attribute</i> with the specified name."}, {"ret": "null", "name": "merge", "inside": "BufferGeometry", "args": [["BufferGeometry", "bufferGeometry"], ["Integer", "offset"]], "ty": "method", "doc": "Merge in another BufferGeometry with an optional offset of where to start merging in."}, {"ret": "null", "name": "normalizeNormals", "inside": "BufferGeometry", "args": [], "ty": "method", "doc": "Every normal vector in a geometry will have a magnitude of 1. This will correct lighting on the geometry surfaces."}, {"ret": "BufferAttribute", "name": "removeAttribute", "inside": "BufferGeometry", "args": [["String", "name"]], "ty": "method", "doc": "Removes the <i>>BufferAttribute attribute</i> with the specified name."}, {"ret": "Object", "name": "toJSON", "inside": "BufferGeometry", "args": [], "ty": "method", "doc": "Returns a JSON object representation of the BufferGeometry."}, {"ret": "BufferGeometry", "name": "toNonIndexed", "inside": "BufferGeometry", "args": [], "ty": "method", "doc": "Return a non-index version of an indexed BufferGeometry."}] ,
[{"inside": "Uniform", "args": [["Object", "value"]], "ty": "constructor", "doc": "value -- An object containing the value to set up the uniform. It's type must be one of the Uniform Types described above."}, {"ret": "Object", "name": "value", "inside": "Uniform", "ty": "property", "doc": "Current value of the uniform."}, {"ret": "Uniform", "name": "clone", "inside": "Uniform", "args": [], "ty": "method", "doc": "Returns a clone of this uniform."}] ,
[{"inside": "InterleavedBuffer", "args": [["TypedArray", "array"], ["Integer", "stride"]], "ty": "constructor", "doc": "<i>>TypedArray array</i> -- A typed array with a shared buffer. Stores the geometry data."}, {"ret": "Array", "name": "array", "inside": "InterleavedBuffer", "ty": "property", "doc": "A typed array with a shared buffer. Stores the geometry data."}, {"ret": "Integer", "name": "stride", "inside": "InterleavedBuffer", "ty": "property", "doc": "The number of typed-array elements per vertex."}, {"ret": "Integer", "name": "count", "inside": "InterleavedBuffer", "ty": "property", "doc": "Gives the total number of elements in the array."}, {"ret": "Boolean", "name": "dynamic", "inside": "InterleavedBuffer", "ty": "property", "doc": "Default is *false*."}, {"ret": "Object", "name": "updateRange", "inside": "InterleavedBuffer", "ty": "property", "doc": "Object containing offset and count."}, {"ret": "Integer", "name": "version", "inside": "InterleavedBuffer", "ty": "property", "doc": "A version number, incremented every time the needsUpdate property is set to true."}, {"ret": "Integer", "name": "isInterleavedBuffer", "inside": "InterleavedBuffer", "ty": "property", "doc": "Default is *true*."}, {"ret": "Integer", "name": "needsUpdate", "inside": "InterleavedBuffer", "ty": "property", "doc": "Default is *false*. Setting this to true increments <i>InterleavedBuffer.version</i>."}, {"ret": "InterleavedBuffer", "name": "copy", "inside": "InterleavedBuffer", "args": [["InterleavedBuffer", "source"]], "ty": "method", "doc": "Copies another [name] to this [name]."}, {"ret": "InterleavedBuffer", "name": "copyAt", "inside": "InterleavedBuffer", "args": [["Integer", "index1"], ["InterleavedBuffer", "attribute"], ["Integer", "index2"]], "ty": "method", "doc": "Copies data from attribute[index2] to <i>InterleavedBuffer.array</i>[index1]."}, {"ret": "InterleavedBuffer", "name": "set", "inside": "InterleavedBuffer", "args": [["TypedArray", "value"], ["Integer", "offset"]], "ty": "method", "doc": "value - The source (typed) array."}, {"ret": "InterleavedBuffer", "name": "clone", "inside": "InterleavedBuffer", "args": [], "ty": "method", "doc": "Creates a clone of this [name]."}] ,
[{"inside": "Raycaster", "args": [["Vector3", "origin"], ["Vector3", "direction"], ["Float", "near"], ["Float", "far"]], "ty": "constructor", "doc": "<i>>Vector3 origin</i> \u2014 The origin vector where the ray casts from."}, {"ret": "float", "name": "far", "inside": "Raycaster", "ty": "property", "doc": "The far factor of the raycaster. This value indicates which objects can be discarded based on the distance. This value shouldn't be negative and should be larger than the near property."}, {"ret": "float", "name": "linePrecision", "inside": "Raycaster", "ty": "property", "doc": "The precision factor of the raycaster when intersecting <i>Line</i> objects."}, {"ret": "float", "name": "near", "inside": "Raycaster", "ty": "property", "doc": "The near factor of the raycaster. This value indicates which objects can be discarded based on the distance. This value shouldn't be negative and should be smaller than the far property."}, {"ret": "Object", "name": "params", "inside": "Raycaster", "ty": "property", "doc": "An object with the following properties:"}, {"ret": "Ray", "name": "ray", "inside": "Raycaster", "ty": "property", "doc": "The [Page:Ray] used for the raycasting."}, {"ret": "null", "name": "set", "inside": "Raycaster", "args": [["Vector3", "origin"], ["Vector3", "direction"]], "ty": "method", "doc": "<i>>Vector3 origin</i> \u2014 The origin vector where the ray casts from."}, {"ret": "null", "name": "setFromCamera", "inside": "Raycaster", "args": [["Vector2", "coords"], ["Camera", "camera"]], "ty": "method", "doc": "<i>>Vector2 coords</i> \u2014 2D coordinates of the mouse, in normalized device coordinates (NDC)---X and Y components should be between -1 and 1."}, {"ret": "Array", "name": "intersectObject", "inside": "Raycaster", "args": [["Object3D", "object"], ["Boolean", "recursive"], ["Array", "optionalTarget"]], "ty": "method", "doc": "<i>>Object3D object</i> \u2014 The object to check for intersection with the ray."}, {"ret": "Array", "name": "intersectObjects", "inside": "Raycaster", "args": [["Array", "objects"], ["Boolean", "recursive"], ["Array", "optionalTarget"]], "ty": "method", "doc": "<i>>Array objects</i> \u2014 The objects to check for intersection with the ray."}] ,
[{"inside": "InstancedInterleavedBuffer", "args": [["TypedArray", "array"], ["Integer", "itemSize"], ["Number", "meshPerAttribute"]], "ty": "constructor", "doc": "Properties"}, {"ret": "Number", "name": "meshPerAttribute", "inside": "InstancedInterleavedBuffer", "ty": "property", "doc": "Default is *1*."}, {"ret": "Boolean", "name": "isInstancedInterleavedBuffer", "inside": "InstancedInterleavedBuffer", "ty": "property", "doc": "Default is *true*."}] ,
[{"inside": "InstancedBufferAttribute", "args": [["TypedArray", "array"], ["Integer", "itemSize"], ["Boolean", "normalized"], ["Number", "meshPerAttribute"]], "ty": "constructor", "doc": "Properties"}, {"ret": "Number", "name": "meshPerAttribute", "inside": "InstancedBufferAttribute", "ty": "property", "doc": "Default is *1*."}, {"ret": "Boolean", "name": "isInstancedBufferAttribute", "inside": "InstancedBufferAttribute", "ty": "property", "doc": "Default is *true*."}] ,
[{"inside": "InstancedBufferGeometry", "args": [], "ty": "constructor", "doc": "Properties"}, {"ret": "Number", "name": "maxInstancedCount", "inside": "InstancedBufferGeometry", "ty": "property", "doc": "Default is *undefined*."}, {"ret": "Boolean", "name": "isInstancedBufferGeometry", "inside": "InstancedBufferGeometry", "ty": "property", "doc": "Default is *true*."}, {"ret": "Number", "name": "addGroup", "inside": "InstancedBufferGeometry", "ty": "property", "doc": "Source"}] ,
[{"inside": "InterleavedBufferAttribute", "args": [["InterleavedBuffer", "interleavedBuffer"], ["Integer", "itemSize"], ["Integer", "offset"], ["Boolean", "normalized"]], "ty": "constructor", "doc": "Properties"}, {"ret": "InterleavedBuffer", "name": "data", "inside": "InterleavedBufferAttribute", "ty": "property", "doc": "The <i>>InterleavedBuffer InterleavedBuffer</i> instance passed in the constructor."}, {"ret": "TypedArray", "name": "array", "inside": "InterleavedBufferAttribute", "ty": "property", "doc": "The value of <i>InterleavedBufferAttribute.data</i>.array."}, {"ret": "Integer", "name": "count", "inside": "InterleavedBufferAttribute", "ty": "property", "doc": "The value of <i>InterleavedBufferAttribute.data</i>.count. If the buffer is storing a 3-component item (such as a position, normal, or color), then this will count the number of such items stored."}, {"ret": "Integer", "name": "itemSize", "inside": "InterleavedBufferAttribute", "ty": "property", "doc": "How many values make up each item."}, {"ret": "Integer", "name": "offset", "inside": "InterleavedBufferAttribute", "ty": "property", "doc": "The offset in the underlying array buffer where an item starts."}, {"ret": "Boolean", "name": "normalized", "inside": "InterleavedBufferAttribute", "ty": "property", "doc": "Default is *true*."}, {"ret": "Boolean", "name": "isInterleavedBufferAttribute", "inside": "InterleavedBufferAttribute", "ty": "property", "doc": "Default is *true*."}, {"ret": "Number", "name": "getX", "inside": "InterleavedBufferAttribute", "args": [["Integer", "index"]], "ty": "method", "doc": "Returns the x component of the item at the given index."}, {"ret": "Number", "name": "getY", "inside": "InterleavedBufferAttribute", "args": [["Integer", "index"]], "ty": "method", "doc": "Returns the y component of the item at the given index."}, {"ret": "Number", "name": "getZ", "inside": "InterleavedBufferAttribute", "args": [["Integer", "index"]], "ty": "method", "doc": "Returns the z component of the item at the given index."}, {"ret": "Number", "name": "getW", "inside": "InterleavedBufferAttribute", "args": [["Integer", "index"]], "ty": "method", "doc": "Returns the w component of the item at the given index."}, {"ret": "null", "name": "setX", "inside": "InterleavedBufferAttribute", "args": [["Integer", "index"], ["Float", "x"]], "ty": "method", "doc": "Sets the x component of the item at the given index."}, {"ret": "null", "name": "setY", "inside": "InterleavedBufferAttribute", "args": [["Integer", "index"], ["Float", "y"]], "ty": "method", "doc": "Sets the y component of the item at the given index."}, {"ret": "null", "name": "setZ", "inside": "InterleavedBufferAttribute", "args": [["Integer", "index"], ["Float", "z"]], "ty": "method", "doc": "Sets the z component of the item at the given index."}, {"ret": "null", "name": "setW", "inside": "InterleavedBufferAttribute", "args": [["Integer", "index"], ["Float", "w"]], "ty": "method", "doc": "Sets the w component of the item at the given index."}, {"ret": "null", "name": "setXY", "inside": "InterleavedBufferAttribute", "args": [["Integer", "index"], ["Float", "x"], ["Float", "y"]], "ty": "method", "doc": "Sets the x and y components of the item at the given index."}, {"ret": "null", "name": "setXYZ", "inside": "InterleavedBufferAttribute", "args": [["Integer", "index"], ["Float", "x"], ["Float", "y"], ["Float", "z"]], "ty": "method", "doc": "Sets the x, y and z components of the item at the given index."}, {"ret": "null", "name": "setXYZW", "inside": "InterleavedBufferAttribute", "args": [["Integer", "index"], ["Float", "x"], ["Float", "y"], ["Float", "z"], ["Float", "w"]], "ty": "method", "doc": "Sets the x, y, z and w components of the item at the given index."}] ,
[{"inside": "Clock", "args": [["Boolean", "autoStart"]], "ty": "constructor", "doc": "autoStart \u2014 (optional) whether to automatically start the clock. Default is true."}, {"ret": "Boolean", "name": "autoStart", "inside": "Clock", "ty": "property", "doc": "If set, starts the clock automatically when the first update is called. Default is true."}, {"ret": "Float", "name": "startTime", "inside": "Clock", "ty": "property", "doc": "Holds the time at which the clock's <i>Clock.start</i> method was last called."}, {"ret": "Float", "name": "oldTime", "inside": "Clock", "ty": "property", "doc": "Holds the time at which the clock's <i>Clock.start</i>, <i>Clock.getElapsedTime</i> or <i>Clock.getDelta</i> methods were last called."}, {"ret": "Float", "name": "elapsedTime", "inside": "Clock", "ty": "property", "doc": "Keeps track of the total time that the clock has been running."}, {"ret": "Boolean", "name": "running", "inside": "Clock", "ty": "property", "doc": "Whether the clock is running or not."}, {"ret": "null", "name": "start", "inside": "Clock", "args": [], "ty": "method", "doc": "Starts clock. Also sets the <i>Clock.startTime</i> and <i>Clock.oldTime</i> to the current time, sets <i>Clock.elapsedTime</i> to *0* and <i>Clock.running</i> to *true*."}, {"ret": "null", "name": "stop", "inside": "Clock", "args": [], "ty": "method", "doc": "Stops clock and sets <i>Clock.oldTime</i> to the current time."}, {"ret": "Float", "name": "getElapsedTime", "inside": "Clock", "args": [], "ty": "method", "doc": "Get the seconds passed since the clock started and sets <i>Clock.oldTime</i> to the current time."}, {"ret": "Float", "name": "getDelta", "inside": "Clock", "args": [], "ty": "method", "doc": "Get the seconds passed since the time <i>Clock.oldTime</i> was set and sets <i>Clock.oldTime</i> to the current time."}] ,
[{"inside": "Geometry", "args": [], "ty": "constructor", "doc": "The constructor takes no arguments."}, {"ret": "Box3", "name": "boundingBox", "inside": "Geometry", "ty": "property", "doc": "Bounding box for the Geometry, which can be calculated with <i>>computeBoundingBox</i>(). Default is *null*."}, {"ret": "Sphere", "name": "boundingSphere", "inside": "Geometry", "ty": "property", "doc": "Bounding sphere for the Geometry, which can be calculated with <i>>computeBoundingSphere</i>(). Default is *null*."}, {"ret": "Array", "name": "colors", "inside": "Geometry", "ty": "property", "doc": "Array of vertex <i>>Color colors</i>, matching number and order of vertices."}, {"ret": "Array", "name": "faces", "inside": "Geometry", "ty": "property", "doc": "Array of <i>>Face3 faces</i>."}, {"ret": "Array", "name": "faceVertexUvs", "inside": "Geometry", "ty": "property", "doc": "Array of face UV layers, used for mapping textures onto the geometry."}, {"ret": "Integer", "name": "id", "inside": "Geometry", "ty": "property", "doc": "Unique number for this geometry instance."}, {"ret": "Boolean", "name": "isGeometry", "inside": "Geometry", "ty": "property", "doc": "Used to check whether this or derived classes are Geometries. Default is *true*."}, {"ret": "array", "name": "lineDistances", "inside": "Geometry", "ty": "property", "doc": "An array containing distances between vertices for Line geometries. This is required for <i>LineDashedMaterial</i> to render correctly."}, {"ret": "Array", "name": "morphTargets", "inside": "Geometry", "ty": "property", "doc": "Array of targets. Each morph target is a Javascript object:"}, {"ret": "Array", "name": "morphNormals", "inside": "Geometry", "ty": "property", "doc": "Array of morph normals. Morph normals have similar structure as morph targets, each normal set is a Javascript object:"}, {"ret": "String", "name": "name", "inside": "Geometry", "ty": "property", "doc": "Optional name for this geometry. Default is an empty string."}, {"ret": "Array", "name": "skinWeights", "inside": "Geometry", "ty": "property", "doc": "When working with a <i>SkinnedMesh</i>, each vertex can have up to 4 <i>>Bone bones</i> affecting it. The skinWeights property is an array of weight values that correspond to the order of the vertices in the geometry. So for instance, the first skinWeight would correspond to the first vertex in the geometry. Since each vertex can be modified by 4 bones, a <i>Vector4</i> is used to represent the skin weights for that vertex."}, {"ret": "Array", "name": "skinIndices", "inside": "Geometry", "ty": "property", "doc": "Just like the skinWeights property, the skinIndices' values correspond to the geometry's vertices. Each vertex can have up to 4 bones associated with it. So if you look at the first vertex, and the first skinIndex, this will tell you the bones associated with that vertex. For example the first vertex could have a value of"}, {"ret": "String", "name": "uuid", "inside": "Geometry", "ty": "property", "doc": "UUID of this object instance. This gets automatically assigned and shouldn't be edited."}, {"ret": "Array", "name": "vertices", "inside": "Geometry", "ty": "property", "doc": "Array of <i>>Vector3 vertices</i>."}, {"ret": "Boolean", "name": "verticesNeedUpdate", "inside": "Geometry", "ty": "property", "doc": "Set to *true* if the vertices array has been updated."}, {"ret": "Boolean", "name": "elementsNeedUpdate", "inside": "Geometry", "ty": "property", "doc": "Set to *true* if the faces array has been updated."}, {"ret": "Boolean", "name": "uvsNeedUpdate", "inside": "Geometry", "ty": "property", "doc": "Set to *true* if the uvs array has been updated."}, {"ret": "Boolean", "name": "normalsNeedUpdate", "inside": "Geometry", "ty": "property", "doc": "Set to *true* if the normals array has been updated."}, {"ret": "Boolean", "name": "colorsNeedUpdate", "inside": "Geometry", "ty": "property", "doc": "Set to *true* if the colors array or a face3 color has been updated."}, {"ret": "Boolean", "name": "groupsNeedUpdate", "inside": "Geometry", "ty": "property", "doc": "Set to *true* if a face3 materialIndex has been updated."}, {"ret": "Boolean", "name": "lineDistancesNeedUpdate", "inside": "Geometry", "ty": "property", "doc": "Set to *true* if the linedistances array has been updated."}, {"ret": "null", "name": "applyMatrix", "inside": "Geometry", "args": [["Matrix4", "matrix"]], "ty": "method", "doc": "Bakes matrix transform directly into vertex coordinates."}, {"ret": "Geometry", "name": "clone", "inside": "Geometry", "args": [], "ty": "method", "doc": "Creates a new clone of the Geometry."}, {"ret": "null", "name": "computeBoundingBox", "inside": "Geometry", "args": [], "ty": "method", "doc": "Computes bounding box of the geometry, updating [page:Geometry Geometry.boundingBox] attribute."}, {"ret": "null", "name": "computeBoundingSphere", "inside": "Geometry", "args": [], "ty": "method", "doc": "Computes bounding sphere of the geometry, updating [page:Geometry Geometry.boundingSphere] attribute."}, {"ret": "null", "name": "computeFaceNormals", "inside": "Geometry", "args": [], "ty": "method", "doc": "Computes [page:Face3.normal face normals]."}, {"ret": "null", "name": "computeFlatVertexNormals", "inside": "Geometry", "args": [], "ty": "method", "doc": "Computes flat [page:Face3.vertexNormals vertex normals]. Sets the vertex normal of each vertex of each face to be the same as the face's normal."}, {"ret": "null", "name": "computeMorphNormals", "inside": "Geometry", "args": [], "ty": "method", "doc": "Computes <i>>morphNormals</i>."}, {"ret": "null", "name": "computeVertexNormals", "inside": "Geometry", "args": [["Boolean", "areaWeighted"]], "ty": "method", "doc": "areaWeighted - If true the contribution of each face normal to the vertex normal is weighted by the area of the face. Default is true."}, {"ret": "Geometry", "name": "copy", "inside": "Geometry", "args": [["Geometry", "geometry"]], "ty": "method", "doc": "Copies vertices, faces and uvs into this geometry. It does not copy any other properties of the geometry."}, {"ret": "null", "name": "dispose", "inside": "Geometry", "args": [], "ty": "method", "doc": "Removes The object from memory."}, {"ret": "Geometry", "name": "fromBufferGeometry", "inside": "Geometry", "args": [["BufferGeometry", "geometry"]], "ty": "method", "doc": "Convert a <i>BufferGeometry</i> to a Geometry."}, {"ret": "null", "name": "merge", "inside": "Geometry", "args": [["Geometry", "geometry"], ["Matrix4", "matrix"], ["Integer", "materialIndexOffset"]], "ty": "method", "doc": "Merge two geometries or geometry and geometry from object (using object's transform)"}, {"ret": "null", "name": "mergeMesh", "inside": "Geometry", "args": [["Mesh", "mesh"]], "ty": "method", "doc": "Merge the mesh's geometry with this, also applying the mesh's transform."}, {"ret": "null", "name": "mergeVertices", "inside": "Geometry", "args": [], "ty": "method", "doc": "Checks for duplicate vertices using hashmap."}, {"ret": "null", "name": "normalize", "inside": "Geometry", "args": [], "ty": "method", "doc": "Normalize the geometry."}] ,
[{"inside": "PropertyBinding", "args": [["Object3D", "rootNode"]], "ty": "constructor", "doc": "-- <i>>Object3D rootNode</i>: -- path -- parsedPath (optional)"}, {"ret": "Number", "name": "path", "inside": "PropertyBinding", "ty": "property"}, {"ret": "Number", "name": "parsedPath", "inside": "PropertyBinding", "ty": "property"}, {"ret": "Number", "name": "node", "inside": "PropertyBinding", "ty": "property"}, {"ret": "Number", "name": "rootNode", "inside": "PropertyBinding", "ty": "property"}, {"ret": "Object", "name": "BindingType", "inside": "PropertyBinding", "ty": "property"}, {"ret": "Object", "name": "Versioning", "inside": "PropertyBinding", "ty": "property"}, {"ret": "Array", "name": "GetterByBindingType", "inside": "PropertyBinding", "ty": "property"}, {"ret": "Array", "name": "SetterByBindingTypeAndVersioning", "inside": "PropertyBinding", "ty": "property", "doc": "Methods"}, {"ret": "null", "name": "getValue", "inside": "PropertyBinding", "args": [["Array", "targetArray"], ["Number", "offset"]], "ty": "method"}, {"ret": "null", "name": "setValue", "inside": "PropertyBinding", "args": [["Array", "sourceArray"], ["Number", "offset"]], "ty": "method"}, {"ret": "null", "name": "bind", "inside": "PropertyBinding", "args": [], "ty": "method", "doc": "Create getter / setter pair for a property in the scene graph. Used internally by <i>PropertyBinding.getValue</i> and <i>PropertyBinding.setValue</i>."}, {"ret": "null", "name": "unbind", "inside": "PropertyBinding", "args": [], "ty": "method", "doc": "Unbind getter / setter pair for a property in the scene graph."}, {"ret": "Constructor", "name": "Composite", "inside": "PropertyBinding", "args": [], "ty": "method", "doc": "Create a new Composite PropertyBinding."}, {"ret": "Constructor", "name": "create", "inside": "PropertyBinding", "args": [], "ty": "method", "doc": "Create a new Composite PropertyBinding (if root is an <i>AnimationObjectGroup</i>) or PropertyBinding."}, {"ret": "Constructor", "name": "parseTrackName", "inside": "PropertyBinding", "args": [], "ty": "method", "doc": "Matches strings in the following forms:"}, {"ret": "Constructor", "name": "findNode", "inside": "PropertyBinding", "args": [], "ty": "method", "doc": "Find a node in a node tree or <i>>Skeleton Skeleton</i>."}] ,
[{"inside": "AnimationClip", "args": [["String", "name"], ["Number", "duration"], ["Array", "tracks"]], "ty": "constructor", "doc": "<i>>String name</i> - a name for this clip."}, {"ret": "Number", "name": "duration", "inside": "AnimationClip", "ty": "property", "doc": "The duration of this clip (in seconds). This can be calculated from the [page:.tracks tracks] array via [page:.resetDuration resetDuration]."}, {"ret": "String", "name": "name", "inside": "AnimationClip", "ty": "property", "doc": "A name for this clip. A certain clip can be searched via [page:.findByName findByName]."}, {"ret": "Array", "name": "tracks", "inside": "AnimationClip", "ty": "property", "doc": "An array containing a <i>KeyframeTrack</i> for each property that are animated by this clip."}, {"ret": "String", "name": "uuid", "inside": "AnimationClip", "ty": "property", "doc": "The UUID of this clip instance. It gets automatically assigned and shouldn't be edited."}, {"ret": "this", "name": "optimize", "inside": "AnimationClip", "args": [], "ty": "method", "doc": "Optimizes each track by removing equivalent sequential keys (which are common in morph target sequences)."}, {"ret": "this", "name": "resetDuration", "inside": "AnimationClip", "args": [], "ty": "method", "doc": "Sets the [page:.duration duration] of the clip to the duration of its longest <i>KeyframeTrack</i>."}, {"ret": "this", "name": "trim", "inside": "AnimationClip", "args": [], "ty": "method", "doc": "Trims all tracks to the clip's duration."}, {"ret": "Boolean", "name": "validate", "inside": "AnimationClip", "args": [], "ty": "method", "doc": "Performs minimal validation on each track in the clip. Returns true if all tracks are valid."}, {"ret": "Array", "name": "CreateClipsFromMorphTargetSequences", "inside": "AnimationClip", "args": [["String", "name"], ["Array", "morphTargetSequence"], ["Number", "fps"], ["Boolean", "noLoop"]], "ty": "method", "doc": "Returns an array of new AnimationClips created from the [page:Geometry.morphTargets morph target sequences] of a geometry, trying to sort morph target names into animation-group-based patterns like \"Walk_001, Walk_002, Run_001, Run_002 ...\""}, {"ret": "AnimationClip", "name": "CreateFromMorphTargetSequence", "inside": "AnimationClip", "args": [["String", "name"], ["Array", "morphTargetSequence"], ["Number", "fps"], ["Boolean", "noLoop"]], "ty": "method", "doc": "Returns a new AnimationClip from the passed [page:Geometry.morphTargets morph targets array] of a geometry, taking a name and the number of frames per second."}, {"ret": "AnimationClip", "name": "findByName", "inside": "AnimationClip", "args": [["Object", "objectOrClipArray"], ["String", "name"]], "ty": "method", "doc": "Searches for an AnimationClip by name, taking as its first parameter either an array of AnimationClips, or a mesh or geometry that contains an array named \"animations\"."}, {"ret": "AnimationClip", "name": "parse", "inside": "AnimationClip", "args": [["Object", "json"]], "ty": "method", "doc": "Parses a JSON representation of a clip and returns an AnimationClip."}, {"ret": "AnimationClip", "name": "parseAnimation", "inside": "AnimationClip", "args": [["Object", "animation"], ["Array", "bones"]], "ty": "method", "doc": "Parses the animation.hierarchy format and returns an AnimationClip."}, {"ret": "Object", "name": "toJSON", "inside": "AnimationClip", "args": [["AnimationClip", "clip"]], "ty": "method", "doc": "Takes an AnimationClip and returns a JSON object."}] ,
[{"inside": "StringKeyframeTrack", "args": [["String", "name"], ["Array", "times"], ["Array", "values"]], "ty": "constructor", "doc": "<i>>String name</i> - (required) identifier for the KeyframeTrack."}, {"ret": "Constant", "name": "DefaultInterpolation", "inside": "StringKeyframeTrack", "ty": "property", "doc": "The default interpolation type to use, <i>>Animation InterpolateDiscrete</i>."}, {"ret": "Array", "name": "ValueBufferType", "inside": "StringKeyframeTrack", "ty": "property", "doc": "A normal Array (no Float32Array in this case, unlike *ValueBufferType* of <i>KeyframeTrack</i>)."}, {"ret": "String", "name": "ValueTypeName", "inside": "StringKeyframeTrack", "ty": "property", "doc": "String 'string'."}, {"ret": "null", "name": "InterpolantFactoryMethodLinear", "inside": "StringKeyframeTrack", "args": [], "ty": "method", "doc": "The value of this method here is 'undefined', as it does not make sense for discrete properties."}, {"ret": "null", "name": "InterpolantFactoryMethodSmooth", "inside": "StringKeyframeTrack", "args": [], "ty": "method", "doc": "The value of this method here is 'undefined', as it does not make sense for discrete properties."}] ,
[{"inside": "QuaternionKeyframeTrack", "args": [["String", "name"], ["Array", "times"], ["Array", "values"]], "ty": "constructor", "doc": "<i>>String name</i> (required) identifier for the KeyframeTrack."}, {"ret": "Constant", "name": "DefaultInterpolation", "inside": "QuaternionKeyframeTrack", "ty": "property", "doc": "The default interpolation type to use, <i>>Animation InterpolateLinear</i>."}, {"ret": "String", "name": "ValueTypeName", "inside": "QuaternionKeyframeTrack", "ty": "property", "doc": "String 'quaternion'."}, {"ret": "null", "name": "InterpolantFactoryMethodLinear", "inside": "QuaternionKeyframeTrack", "args": [], "ty": "method", "doc": "Returns a new <i>>QuaternionLinearInterpolant QuaternionLinearInterpolant</i> based on the <i>KeyframeTrack.values</i>, <i>KeyframeTrack.times</i> and <i>KeyframeTrack.valueSize</i> of the keyframes."}] ,
[{"inside": "VectorKeyframeTrack", "args": [["String", "name"], ["Array", "times"], ["Array", "values"]], "ty": "constructor", "doc": "<i>>String name</i> - (required) identifier for the KeyframeTrack."}, {"ret": "String", "name": "ValueTypeName", "inside": "VectorKeyframeTrack", "ty": "property", "doc": "String 'vector'."}] ,
[{"inside": "BooleanKeyframeTrack", "args": [["String", "name"], ["Array", "times"], ["Array", "values"]], "ty": "constructor", "doc": "<i>>String name</i> - (required) identifier for the KeyframeTrack."}, {"ret": "Constant", "name": "DefaultInterpolation", "inside": "BooleanKeyframeTrack", "ty": "property", "doc": "The default interpolation type to use, <i>>Animation InterpolateDiscrete</i>."}, {"ret": "Array", "name": "ValueBufferType", "inside": "BooleanKeyframeTrack", "ty": "property", "doc": "A normal Array (no Float32Array in this case, unlike *ValueBufferType* of <i>KeyframeTrack</i>)."}, {"ret": "String", "name": "ValueTypeName", "inside": "BooleanKeyframeTrack", "ty": "property", "doc": "String 'bool'."}] ,
[{"inside": "NumberKeyframeTrack", "args": [["String", "name"], ["Array", "times"], ["Array", "values"]], "ty": "constructor", "doc": "<i>>String name</i> - (required) identifier for the KeyframeTrack."}, {"ret": "String", "name": "ValueTypeName", "inside": "NumberKeyframeTrack", "ty": "property", "doc": "String 'number'."}] ,
[{"inside": "ColorKeyframeTrack", "args": [["String", "name"], ["Array", "times"], ["Array", "values"]], "ty": "constructor", "doc": "<i>>String name</i> - (required) identifier for the KeyframeTrack."}, {"ret": "String", "name": "ValueTypeName", "inside": "ColorKeyframeTrack", "ty": "property", "doc": "String 'color'."}] ,
[{"inside": "KeyframeTrack", "args": [["String", "name"], ["Array", "times"], ["Array", "values"], ["Constant", "interpolation"]], "ty": "constructor", "doc": "<i>>String name</i> - the identifier for the *KeyframeTrack*."}, {"ret": "String", "name": "name", "inside": "KeyframeTrack", "ty": "property", "doc": "The track's name can refer to [page:Geometry.morphTargets morph targets] or <i>>SkinnedMesh bones</i> or possibly other values within an animated object. See [page:PropertyBinding.parseTrackName] for the forms of strings that can be parsed for property binding:"}, {"ret": "Float32Array", "name": "times", "inside": "KeyframeTrack", "ty": "property", "doc": "A Float32Array, converted from the times array which is passed in the constructor."}, {"ret": "Float32Array", "name": "values", "inside": "KeyframeTrack", "ty": "property", "doc": "A Float32Array, converted from the values array which is passed in the constructor."}, {"ret": "Constant", "name": "DefaultInterpolation", "inside": "KeyframeTrack", "ty": "property", "doc": "The default interpolation type: <i>>Animation InterpolateLinear</i>."}, {"ret": "null", "name": "createInterpolant", "inside": "KeyframeTrack", "args": [], "ty": "method", "doc": "Creates a <i>>LinearInterpolant LinearInterpolant</i>, <i>>CubicInterpolant CubicInterpolant</i> or <i>>DiscreteInterpolant DiscreteInterpolant</i>, depending on the value of the interpolation parameter passed in the constructor."}, {"ret": "null", "name": "getInterpolation", "inside": "KeyframeTrack", "args": [], "ty": "method", "doc": "Returns the interpolation type."}, {"ret": "Number", "name": "getValueSize", "inside": "KeyframeTrack", "args": [], "ty": "method", "doc": "Returns the size of each value (that is the length of the [page:.values values] array divided by the length of the [page:.times times] array)."}, {"ret": "DiscreteInterpolant", "name": "InterpolantFactoryMethodDiscrete", "inside": "KeyframeTrack", "args": [], "ty": "method", "doc": "Creates a new <i>>DiscreteInterpolant DiscreteInterpolant</i> from the <i>KeyframeTrack.times</i> and <i>KeyframeTrack.times</i>. A Float32Array can be passed which will receive the results. Otherwise a new array with the appropriate size will be created automatically."}, {"ret": "null", "name": "InterpolantFactoryMethodLinear", "inside": "KeyframeTrack", "args": [], "ty": "method", "doc": "Creates a new <i>>LinearInterpolant LinearInterpolant</i> from the <i>KeyframeTrack.times</i> and <i>KeyframeTrack.times</i>. A Float32Array can be passed which will receive the results. Otherwise a new array with the appropriate size will be created automatically."}, {"ret": "null", "name": "InterpolantFactoryMethodSmooth", "inside": "KeyframeTrack", "args": [], "ty": "method", "doc": "Create a new <i>>CubicInterpolant CubicInterpolant</i> from the <i>KeyframeTrack.times</i> and <i>KeyframeTrack.times</i>. A Float32Array can be passed which will receive the results. Otherwise a new array with the appropriate size will be created automatically."}, {"ret": "this", "name": "optimize", "inside": "KeyframeTrack", "args": [], "ty": "method", "doc": "Removes equivalent sequential keys, which are common in morph target sequences."}, {"ret": "this", "name": "scale", "inside": "KeyframeTrack", "args": [], "ty": "method", "doc": "Scales all keyframe times by a factor."}, {"ret": "this", "name": "setInterpolation", "inside": "KeyframeTrack", "args": [["Constant", "interpolationType"]], "ty": "method", "doc": "Sets the interpolation type. See [page:Animation Animation Constants] for choices."}, {"ret": "this", "name": "shift", "inside": "KeyframeTrack", "args": [["Number", "timeOffsetInSeconds"]], "ty": "method", "doc": "Moves all keyframes either forward or backward in time."}, {"ret": "this", "name": "trim", "inside": "KeyframeTrack", "args": [["Number", "startTimeInSeconds"], ["Number", "endTimeInSeconds"]], "ty": "method", "doc": "Removes keyframes before *startTime* and after *endTime*, without changing any values within the range [*startTime*, *endTime*]."}, {"ret": "Boolean", "name": "validate", "inside": "KeyframeTrack", "args": [], "ty": "method", "doc": "Performs minimal validation on the tracks. Returns true if valid."}, {"ret": "KeyframeTrack", "name": "parse", "inside": "KeyframeTrack", "args": [["JSON", "json"]], "ty": "method", "doc": "Parses a JSON object and returns a new keyframe track of the correct type."}, {"ret": "JSON", "name": "toJSON", "inside": "KeyframeTrack", "args": [["KeyframeTrack", "track"]], "ty": "method", "doc": "Converts the track to JSON."}] ,
[{"inside": "AnimationMixer", "args": [["Object3D", "rootObject"]], "ty": "constructor", "doc": "<i>>Object3D rootObject</i> - the object whose animations shall be played by this mixer."}, {"ret": "Number", "name": "time", "inside": "AnimationMixer", "ty": "property", "doc": "The global mixer time (in seconds; starting with 0 on the mixer's creation)."}, {"ret": "Number", "name": "timeScale", "inside": "AnimationMixer", "ty": "property", "doc": "A scaling factor for the global [page:.time mixer time]."}, {"ret": "AnimationAction", "name": "clipAction", "inside": "AnimationMixer", "args": [["AnimationClip", "clip"], ["Object3D", "optionalRoot"]], "ty": "method", "doc": "Returns an <i>AnimationAction</i> for the passed clip, optionally using a root object different from the mixer's default root. The first parameter can be either an <i>AnimationClip</i> object or the name of an AnimationClip."}, {"ret": "AnimationAction", "name": "existingAction", "inside": "AnimationMixer", "args": [["AnimationClip", "clip"], ["Object3D", "optionalRoot"]], "ty": "method", "doc": "Returns an existing <i>AnimationAction</i> for the passed clip, optionally using a root object different from the mixer's default root."}, {"ret": "Object3D", "name": "getRoot", "inside": "AnimationMixer", "args": [], "ty": "method", "doc": "Returns this mixer's root object."}, {"ret": "AnimationMixer", "name": "stopAllAction", "inside": "AnimationMixer", "args": [], "ty": "method", "doc": "Deactivates all previously scheduled actions on this mixer."}, {"ret": "AnimationMixer", "name": "update", "inside": "AnimationMixer", "args": [["Number", "deltaTimeInSeconds"]], "ty": "method", "doc": "Advances the global mixer time and updates the animation."}, {"ret": "null", "name": "uncacheClip", "inside": "AnimationMixer", "args": [["AnimationClip", "clip"]], "ty": "method", "doc": "Deallocates all memory resources for a clip."}, {"ret": "null", "name": "uncacheRoot", "inside": "AnimationMixer", "args": [["Object3D", "root"]], "ty": "method", "doc": "Deallocates all memory resources for a root object."}, {"ret": "null", "name": "uncacheAction", "inside": "AnimationMixer", "args": [["AnimationClip", "clip"], ["Object3D", "optionalRoot"]], "ty": "method", "doc": "Deallocates all memory resources for an action."}] ,
[{"inside": "AnimationObjectGroup", "args": [["object", "obj1"], ["object", "obj2"], ["object", "obj3"]], "ty": "constructor", "doc": "<i>>object obj</i> - an abitrary number of meshes that share the same animation state."}, {"ret": "object", "name": "stats", "inside": "AnimationObjectGroup", "ty": "property", "doc": "An object that contains some informations of this *AnimationObjectGroup* (total number, number in use, number of bindings per object)"}, {"ret": "String", "name": "uuid", "inside": "AnimationObjectGroup", "ty": "property", "doc": "The UUID of this *AnimationObjectGroup*. It gets automatically assigned and shouldn't be edited."}, {"ret": "null", "name": "add", "inside": "AnimationObjectGroup", "args": [["object", "obj1"], ["object", "obj2"], ["object", "obj3"]], "ty": "method", "doc": "Adds an arbitrary number of objects to this *AnimationObjectGroup*."}, {"ret": "null", "name": "remove", "inside": "AnimationObjectGroup", "args": [["object", "obj1"], ["object", "obj2"], ["object", "obj3"]], "ty": "method", "doc": "Removes an arbitrary number of objects from this *AnimationObjectGroup*."}, {"ret": "null", "name": "uncache", "inside": "AnimationObjectGroup", "args": [["object", "obj1"], ["object", "obj2"], ["object", "obj3"]], "ty": "method", "doc": "Deallocates all memory resources for the passed objects of this *AnimationObjectGroup*."}] ,
[{"inside": "PropertyMixer", "args": [["PropertyBinding", "binding"], ["String", "typeName"], ["Number", "valueSize"]], "ty": "constructor", "doc": "-- binding"}, {"ret": "PropertyBinding", "name": "binding", "inside": "PropertyMixer", "ty": "property"}, {"ret": "TypedArray", "name": "buffer", "inside": "PropertyMixer", "ty": "property", "doc": "Buffer with size <i>>PropertyMixer valueSize</i> * 4."}, {"ret": "Number", "name": "cumulativeWeight", "inside": "PropertyMixer", "ty": "property", "doc": "Default is *0*."}, {"ret": "Number", "name": "valueSize", "inside": "PropertyMixer", "ty": "property"}, {"ret": "Number", "name": "referenceCount", "inside": "PropertyMixer", "ty": "property", "doc": "Default is *0*."}, {"ret": "Number", "name": "useCount", "inside": "PropertyMixer", "ty": "property", "doc": "Default is *0*."}, {"ret": "null", "name": "accumulate", "inside": "PropertyMixer", "args": [["Number", "accuIndex"], ["Number", "weight"]], "ty": "method", "doc": "Accumulate data in <i>PropertyMixer.buffer</i>[accuIndex] 'incoming' region into 'accu[i]'."}, {"ret": "null", "name": "apply", "inside": "PropertyMixer", "args": [["Number", "accuIndex"]], "ty": "method", "doc": "Apply the state of <i>PropertyMixer.buffer</i> 'accu[i]' to the binding when accus differ."}, {"ret": "null", "name": "saveOriginalState", "inside": "PropertyMixer", "args": [], "ty": "method", "doc": "Remember the state of the bound property and copy it to both accus."}, {"ret": "null", "name": "restoreOriginalState", "inside": "PropertyMixer", "args": [], "ty": "method", "doc": "Apply the state previously taken via 'saveOriginalState' to the binding."}] ,
[{"inside": "AnimationAction", "args": [["AnimationMixer", "mixer"], ["AnimationClip", "clip"], ["Object3D", "localRoot"]], "ty": "constructor", "doc": "<i>>AnimationMixer mixer</i> - the *AnimationMixer* that is controlled by this action."}, {"ret": "Boolean", "name": "clampWhenFinished", "inside": "AnimationAction", "ty": "property", "doc": "If *clampWhenFinished* is set to true the animation will automatically be [page:.paused paused] on its last frame."}, {"ret": "Boolean", "name": "enabled", "inside": "AnimationAction", "ty": "property", "doc": "Setting *enabled* to *false* disables this action, so that it has no impact. Default is *true*."}, {"ret": "Number", "name": "loop", "inside": "AnimationAction", "ty": "property", "doc": "The looping mode (can be changed with [page:.setLoop setLoop]). Default is [page:Animation THREE.LoopRepeat] (with an infinite number of [page:.repetitions repetitions])"}, {"ret": "Boolean", "name": "paused", "inside": "AnimationAction", "ty": "property", "doc": "Setting *paused* to *true* pauses the execution of the action by setting the effective time scale to 0. Default is *false*."}, {"ret": "Number", "name": "repetitions", "inside": "AnimationAction", "ty": "property", "doc": "The number of repetitions of the performed <i>AnimationClip</i> over the course of this action. Can be set via [page:.setLoop setLoop]. Default is *Infinity*."}, {"ret": "Number", "name": "time", "inside": "AnimationAction", "ty": "property", "doc": "The local time of this action (in seconds, starting with 0)."}, {"ret": "Number", "name": "timeScale", "inside": "AnimationAction", "ty": "property", "doc": "Scaling factor for the [page:.time time]. A value of 0 causes the animation to pause. Negative values cause the animation to play backwards. Default is 1."}, {"ret": "Number", "name": "weight", "inside": "AnimationAction", "ty": "property", "doc": "The degree of influence of this action (in the interval [0, 1]). Values between 0 (no impact) and 1 (full impact) can be used to blend between several actions. Default is 1."}, {"ret": "Boolean", "name": "zeroSlopeAtEnd", "inside": "AnimationAction", "ty": "property", "doc": "Enables smooth interpolation without separate clips for start, loop and end. Default is *true*."}, {"ret": "Boolean", "name": "zeroSlopeAtStart", "inside": "AnimationAction", "ty": "property", "doc": "Enables smooth interpolation without separate clips for start, loop and end. Default is *true*."}, {"ret": "AnimationAction", "name": "crossFadeFrom", "inside": "AnimationAction", "args": [["AnimationAction", "fadeOutAction"], ["Number", "durationInSeconds"], ["Boolean", "warpBoolean"]], "ty": "method", "doc": "Causes this action to [page:.fadeIn fade in], fading out another action simultaneously, within the passed time interval. This method can be chained."}, {"ret": "AnimationAction", "name": "crossFadeTo", "inside": "AnimationAction", "args": [["AnimationAction", "fadeInAction"], ["Number", "durationInSeconds"], ["Boolean", "warpBoolean"]], "ty": "method", "doc": "Causes this action to [page:.fadeOut fade out], fading in another action simultaneously, within the passed time interval. This method can be chained."}, {"ret": "AnimationAction", "name": "fadeIn", "inside": "AnimationAction", "args": [["Number", "durationInSeconds"]], "ty": "method", "doc": "Increases the [page:.weight weight] of this action gradually from 0 to 1, within the passed time interval. This method can be chained."}, {"ret": "AnimationAction", "name": "fadeOut", "inside": "AnimationAction", "args": [["Number", "durationInSeconds"]], "ty": "method", "doc": "Decreases the [page:.weight weight] of this action gradually from 1 to 0, within the passed time interval. This method can be chained."}, {"ret": "Number", "name": "getEffectiveTimeScale", "inside": "AnimationAction", "args": [], "ty": "method", "doc": "Returns the effective time scale (considering the current states of warping and [page:.paused paused])."}, {"ret": "number", "name": "getEffectiveWeight", "inside": "AnimationAction", "args": [], "ty": "method", "doc": "Returns the effective weight (considering the current states of fading and [page:.enabled enabled])."}, {"ret": "AnimationClip", "name": "getClip", "inside": "AnimationAction", "args": [], "ty": "method", "doc": "Returns the clip which holds the animation data for this action."}, {"ret": "AnimationMixer", "name": "getMixer", "inside": "AnimationAction", "args": [], "ty": "method", "doc": "Returns the mixer which is responsible for playing this action."}, {"ret": "Object3D", "name": "getRoot", "inside": "AnimationAction", "args": [], "ty": "method", "doc": "Returns the root object on which this action is performed."}, {"ret": "AnimationAction", "name": "halt", "inside": "AnimationAction", "args": [["Number", "durationInSeconds"]], "ty": "method", "doc": "Decelerates this animation's speed to 0 by decreasing [page:.timeScale timeScale] gradually (starting from its current value), within the passed time interval. This method can be chained."}, {"ret": "Boolean", "name": "isRunning", "inside": "AnimationAction", "args": [], "ty": "method", "doc": "Returns true if the action\u2019s [page:.time time] is currently running."}, {"ret": "Boolean", "name": "isScheduled", "inside": "AnimationAction", "args": [], "ty": "method", "doc": "Returns true, if this action is activated in the mixer."}, {"ret": "AnimationAction", "name": "play", "inside": "AnimationAction", "args": [], "ty": "method", "doc": "Tells the mixer to activate the action. This method can be chained."}, {"ret": "AnimationAction", "name": "reset", "inside": "AnimationAction", "args": [], "ty": "method", "doc": "Resets the action. This method can be chained."}, {"ret": "AnimationAction", "name": "setDuration", "inside": "AnimationAction", "args": [["Number", "durationInSeconds"]], "ty": "method", "doc": "Sets the duration for a single loop of this action (by adjusting [page:.timeScale timeScale] and stopping any scheduled warping). This method can be chained."}, {"ret": "AnimationAction", "name": "setEffectiveTimeScale", "inside": "AnimationAction", "args": [["Number", "timeScale"]], "ty": "method", "doc": "Sets the [page:.timeScale timeScale] and stops any scheduled warping. This method can be chained."}, {"ret": "AnimationAction", "name": "setEffectiveWeight", "inside": "AnimationAction", "args": [["Number", "weight"]], "ty": "method", "doc": "Sets the [page:.weight weight] and stops any scheduled fading. This method can be chained."}, {"ret": "AnimationAction", "name": "setLoop", "inside": "AnimationAction", "args": [["Number", "loopMode"], ["Number", "repetitions"]], "ty": "method", "doc": "Sets the [page:.loop loop mode] and the number of [page:.repetitions repetitions]. This method can be chained."}, {"ret": "AnimationAction", "name": "startAt", "inside": "AnimationAction", "args": [["Number", "startTimeInSeconds"]], "ty": "method", "doc": "Defines the time for a delayed start (usually passed as [page:AnimationMixer.time] + deltaTimeInSeconds). This method can be chained."}, {"ret": "AnimationAction", "name": "stop", "inside": "AnimationAction", "args": [], "ty": "method", "doc": "Tells the mixer to deactivate this action. This method can be chained."}, {"ret": "AnimationAction", "name": "stopFading", "inside": "AnimationAction", "args": [], "ty": "method", "doc": "Stops any scheduled [page:.fadeIn fading] which is applied to this action. This method can be chained."}, {"ret": "AnimationAction", "name": "stopWarping", "inside": "AnimationAction", "args": [], "ty": "method", "doc": "Stops any scheduled [page:.warp warping] which is applied to this action. This method can be chained."}, {"ret": "AnimationAction", "name": "syncWith", "inside": "AnimationAction", "args": [["AnimationAction", "otherAction"]], "ty": "method", "doc": "Synchronizes this action with the passed other action. This method can be chained."}, {"ret": "AnimationAction", "name": "warp", "inside": "AnimationAction", "args": [["Number", "startTimeScale"], ["Number", "endTimeScale"], ["Number", "durationInSeconds"]], "ty": "method", "doc": "Changes the playback speed, within the passed time interval, by modifying [page:.timeScale timeScale] gradually from *startTimeScale* to *endTimeScale*. This method can be chained."}] ,
[{"ret": "Array", "name": "arraySlice", "inside": "AnimationUtils", "args": [], "ty": "method", "doc": "This is the same as Array.prototype.slice, but also works on typed arrays."}, {"ret": "Array", "name": "convertArray", "inside": "AnimationUtils", "args": [], "ty": "method", "doc": "Converts an array to a specific type."}, {"ret": "Array", "name": "flattenJSON", "inside": "AnimationUtils", "args": [], "ty": "method", "doc": "Used for parsing AOS keyframe formats."}, {"ret": "Array", "name": "getKeyframeOrder", "inside": "AnimationUtils", "args": [], "ty": "method", "doc": "Returns an array by which times and values can be sorted."}, {"ret": "Boolean", "name": "isTypedArray", "inside": "AnimationUtils", "args": [], "ty": "method", "doc": "Returns *true* if the object is a typed array."}, {"ret": "Array", "name": "sortedArray", "inside": "AnimationUtils", "args": [], "ty": "method", "doc": "Sorts the array previously returned by <i>AnimationUtils.getKeyframeOrder</i>."}] ,
[{"inside": "Bone", "args": [], "ty": "constructor", "doc": "Creates a new [name]."}, {"ret": "Boolean", "name": "isBone", "inside": "Bone", "ty": "property", "doc": "Used to check whether this or derived classes are bones. Default is *true*."}, {"ret": "String", "name": "type", "inside": "Bone", "ty": "property", "doc": "Set to 'Bone', this can be used to find all Bones in a scene."}] ,
[{"inside": "SkinnedMesh", "args": [["Geometry", "geometry"], ["Material", "material"]], "ty": "constructor", "doc": "<i>>Geometry geometry</i> - an instance of <i>Geometry</i> or <i>BufferGeometry</i> (recommended). <i>Geometry.skinIndices</i> and <i>Geometry.skinWeights</i> should be set to true on the geometry."}, {"ret": "string", "name": "bindMode", "inside": "SkinnedMesh", "ty": "property", "doc": "Either \"attached\" or \"detached\". \"attached\" uses the [page:SkinnedMesh.matrixWorld] property for the base transform matrix of the bones. \"detached\" uses the [page:SkinnedMesh.bindMatrix]. Default is \"attached\"."}, {"ret": "Matrix4", "name": "bindMatrix", "inside": "SkinnedMesh", "ty": "property", "doc": "The base matrix that is used for the bound bone transforms."}, {"ret": "Matrix4", "name": "bindMatrixInverse", "inside": "SkinnedMesh", "ty": "property", "doc": "The base matrix that is used for resetting the bound bone transforms."}, {"ret": "Boolean", "name": "isSkinnedMesh", "inside": "SkinnedMesh", "ty": "property", "doc": "Used to check whether this or derived classes are skinned meshes. Default is *true*."}, {"ret": "Skeleton", "name": "skeleton", "inside": "SkinnedMesh", "ty": "property", "doc": "<i>Skeleton</i> created from the <i>Geometry.bones</i> of the <i>Geometry</i> passed in the constructor."}, {"ret": "null", "name": "bind", "inside": "SkinnedMesh", "args": [["Skeleton", "skeleton"], ["Matrix4", "bindMatrix"]], "ty": "method", "doc": "<i>>Skeleton skeleton</i> - <i>Skeleton</i> created from a <i>>Bone Bones</i> tree."}, {"ret": "SkinnedMesh", "name": "clone", "inside": "SkinnedMesh", "args": [], "ty": "method", "doc": "Returns a clone of this SkinnedMesh object and any descendants."}, {"ret": "null", "name": "normalizeSkinWeights", "inside": "SkinnedMesh", "args": [], "ty": "method", "doc": "Normalizes the [page:Geometry.skinWeights] vectors. Does not affect <i>BufferGeometry</i>."}, {"ret": "null", "name": "pose", "inside": "SkinnedMesh", "args": [], "ty": "method", "doc": "This method sets the skinned mesh in the rest pose (resets the pose)."}, {"ret": "null", "name": "updateMatrixWorld", "inside": "SkinnedMesh", "args": [["Boolean", "force"]], "ty": "method", "doc": "Updates the <i>>Matrix4 MatrixWorld</i>."}, {"ret": "null", "name": "initBones", "inside": "SkinnedMesh", "args": [], "ty": "method", "doc": "Creates an array of hierarchical <i>>Bone bones</i> objects from the internal geometry."}] ,
[{"inside": "Sprite", "args": [["Material", "material"]], "ty": "constructor", "doc": "<i>>Material material</i> - (optional) an instance of <i>SpriteMaterial</i>. Default is a white <i>SpriteMaterial</i>."}, {"ret": "Boolean", "name": "isSprite", "inside": "Sprite", "ty": "property", "doc": "Used to check whether this or derived classes are sprites. Default is *true*."}, {"ret": "SpriteMaterial", "name": "material", "inside": "Sprite", "ty": "property", "doc": "An instance of <i>SpriteMaterial</i>, defining the object's appearance. Default is a white <i>SpriteMaterial</i>."}, {"ret": "Vector2", "name": "center", "inside": "Sprite", "ty": "property", "doc": "The sprite's anchor point, and the point around which the sprite rotates. A value of (0.5, 0.5) corresponds to the midpoint of the sprite. A value of (0, 0) corresponds to the lower left corner of the sprite. The default is (0.5, 0.5)."}, {"ret": "Sprite", "name": "clone", "inside": "Sprite", "args": [], "ty": "method", "doc": "Returns a clone of this Sprite object and any descendants."}, {"ret": "Sprite", "name": "copy", "inside": "Sprite", "args": [["Sprite", "sprite"]], "ty": "method", "doc": "Copies the properties of the passed sprite to this one."}, {"ret": "null", "name": "raycast", "inside": "Sprite", "args": [["Raycaster", "raycaster"], ["Array", "intersects"]], "ty": "method", "doc": "Get intersections between a casted ray and this sprite. [page:Raycaster.intersectObject] will call this method."}] ,
[{"inside": "Group", "args": [], "ty": "constructor", "doc": "Properties"}, {"ret": "String", "name": "type", "inside": "Group", "ty": "property", "doc": "A string 'Group'. This should not be changed."}] ,
[{"inside": "Skeleton", "args": [["Array", "bones"], ["Array", "boneInverses"]], "ty": "constructor", "doc": "<i>>Array bones</i> - The array of <i>>Bone bones</i>. Default is an empty array."}, {"ret": "Array", "name": "bones", "inside": "Skeleton", "ty": "property", "doc": "The array of <i>>bone bones</i>. Note this is a copy of the original array, not a reference, so you can modify the original array without effecting this one."}, {"ret": "Array", "name": "boneInverses", "inside": "Skeleton", "ty": "property", "doc": "An array of <i>>Matrix4 Matrix4s</i> that represent the inverse of the <i>>Matrix4 matrixWorld</i> of the individual bones."}, {"ret": "Float32Array", "name": "boneMatrices", "inside": "Skeleton", "ty": "property", "doc": "The array buffer holding the bone data when using a vertex texture."}, {"ret": "DataTexture", "name": "boneTexture", "inside": "Skeleton", "ty": "property", "doc": "The <i>DataTexture</i> holding the bone data when using a vertex texture."}, {"ret": "Skeleton", "name": "clone", "inside": "Skeleton", "args": [], "ty": "method", "doc": "Returns a clone of this Skeleton object."}, {"ret": "null", "name": "calculateInverses", "inside": "Skeleton", "args": [], "ty": "method", "doc": "Generates the [page:.boneInverses boneInverses] array if not provided in the constructor."}, {"ret": "null", "name": "pose", "inside": "Skeleton", "args": [], "ty": "method", "doc": "Returns the skeleton to the base pose."}, {"ret": "null", "name": "update", "inside": "Skeleton", "args": [], "ty": "method", "doc": "Updates the <i>>Float32Array boneMatrices</i> and <i>>DataTexture boneTexture</i> after changing the bones. This is called automatically by the <i>WebGLRenderer</i> if the skeleton is used with a <i>SkinnedMesh</i>."}, {"ret": "Bone", "name": "getBoneByName", "inside": "Skeleton", "args": [["String", "name"]], "ty": "method", "doc": "name -- String to match to the Bone's .name property."}] ,
[{"inside": "LineLoop", "args": [["Geometry", "geometry"], ["Material", "material"]], "ty": "constructor", "doc": "<i>>Geometry geometry</i> \u2014 List of vertices representing points on the line loop."}, {"ret": "Boolean", "name": "isLineLoop", "inside": "LineLoop", "ty": "property", "doc": "Used to check whether this or derived classes are line loops. Default is *true*."}] ,
[{"inside": "LOD", "args": [], "ty": "constructor", "doc": "Creates a new [name]."}, {"ret": "array", "name": "levels", "inside": "LOD", "ty": "property", "doc": "An array of <i>>object level</i> objects"}, {"ret": "null", "name": "addLevel", "inside": "LOD", "args": [["Object3D", "object"], ["Float", "distance"]], "ty": "method", "doc": "<i>>Object3D object</i> - The <i>Object3D</i> to display at this level."}, {"ret": "LOD", "name": "clone", "inside": "LOD", "args": [], "ty": "method", "doc": "Returns a clone of this LOD object and its associated distance specific objects."}, {"ret": "Object3D", "name": "getObjectForDistance", "inside": "LOD", "args": [["Float", "distance"]], "ty": "method", "doc": "Get a reference to the first <i>Object3D</i> (mesh) that is greater than <i>>Float distance</i>."}, {"ret": "Array", "name": "raycast", "inside": "LOD", "args": [["Raycaster", "raycaster"], ["Array", "intersects"]], "ty": "method", "doc": "Get intersections between a casted <i>Ray</i> and this LOD. [page:Raycaster.intersectObject] will call this method."}, {"ret": "null", "name": "toJSON", "inside": "LOD", "args": [], "ty": "method", "doc": "Create a JSON structure with details of this LOD object."}, {"ret": "null", "name": "update", "inside": "LOD", "args": [["Camera", "camera"]], "ty": "method", "doc": "Set the visibility of each <i>>levels level</i>'s <i>>Object3D object</i> based on distance from the <i>>Camera camera</i>. This needs to be called in the render loop for levels of detail to be updated dynamically."}] ,
[{"inside": "Points", "args": [["Geometry", "geometry"], ["Material", "material"]], "ty": "constructor", "doc": "<i>>Geometry geometry</i> \u2014 (optional) an instance of <i>Geometry</i> or <i>BufferGeometry</i>. Default is a new <i>BufferGeometry</i>."}, {"ret": "Geometry", "name": "geometry", "inside": "Points", "ty": "property", "doc": "An instance of <i>Geometry</i> or <i>BufferGeometry</i> (or derived classes), defining the object's structure."}, {"ret": "Boolean", "name": "isPoints", "inside": "Points", "ty": "property", "doc": "Used to check whether this or derived classes are points. Default is *true*."}, {"ret": "Material", "name": "material", "inside": "Points", "ty": "property", "doc": "An instance of <i>Material</i>, defining the object's appearance. Default is a <i>PointsMaterial</i> with a random color."}, {"ret": "null", "name": "raycast", "inside": "Points", "args": [["Raycaster", "raycaster"], ["Array", "intersects"]], "ty": "method", "doc": "Get intersections between a casted ray and this Points. [page:Raycaster.intersectObject] will call this method."}, {"ret": "Points", "name": "clone", "inside": "Points", "args": [], "ty": "method", "doc": "Returns a clone of this Points object and its descendants."}] ,
[{"inside": "Mesh", "args": [["Geometry", "geometry"], ["Material", "material"]], "ty": "constructor", "doc": "<i>>Geometry geometry</i> \u2014 (optional) an instance of <i>Geometry</i> or <i>BufferGeometry</i>. Default is a new <i>BufferGeometry</i>."}, {"ret": "Integer", "name": "drawMode", "inside": "Mesh", "ty": "property", "doc": "Determines how the mesh triangles are constructed from the vertices. See the draw mode <i>>DrawModes constants</i> for all possible values. Default is <i>>DrawModes TrianglesDrawMode</i>."}, {"ret": "Boolean", "name": "isMesh", "inside": "Mesh", "ty": "property", "doc": "Used to check whether this or derived classes are meshes. Default is *true*."}, {"ret": "Geometry", "name": "geometry", "inside": "Mesh", "ty": "property", "doc": "An instance of <i>Geometry</i> or <i>BufferGeometry</i> (or derived classes), defining the object's structure."}, {"ret": "Material", "name": "material", "inside": "Mesh", "ty": "property", "doc": "An instance of material derived from the <i>Material</i> base class or an array of materials, defining the object's appearance. Default is a <i>MeshBasicMaterial</i> with a random color."}, {"ret": "Array", "name": "morphTargetInfluences", "inside": "Mesh", "ty": "property", "doc": "An array of weights typically from 0-1 that specify how much of the morph is applied. Undefined by default, but reset to a blank array by <i>Mesh.updateMorphTargets</i>."}, {"ret": "Object", "name": "morphTargetDictionary", "inside": "Mesh", "ty": "property", "doc": "A dictionary of morphTargets based on the morphTarget.name property. Undefined by default, but rebuilt <i>Mesh.updateMorphTargets</i>."}, {"ret": "null", "name": "setDrawMode", "inside": "Mesh", "args": [["Integer", "value"]], "ty": "method", "doc": "Set the value of [page:.drawMode drawMode]."}, {"ret": "Mesh", "name": "clone", "inside": "Mesh", "args": [], "ty": "method", "doc": "Returns a clone of this [name] object and its descendants."}, {"ret": "null", "name": "raycast", "inside": "Mesh", "args": [["Raycaster", "raycaster"], ["Array", "intersects"]], "ty": "method", "doc": "Get intersections between a casted ray and this mesh. [page:Raycaster.intersectObject] will call this method."}, {"ret": "null", "name": "updateMorphTargets", "inside": "Mesh", "args": [], "ty": "method", "doc": "Updates the morphTargets to have no influence on the object. Resets the <i>Mesh.morphTargetInfluences</i> and <i>Mesh.morphTargetDictionary</i> properties."}] ,
[{"inside": "LineSegments", "args": [["Geometry", "geometry"], ["Material", "material"]], "ty": "constructor", "doc": "<i>>Geometry geometry</i> \u2014 Pair(s) of vertices representing each line segment(s)."}, {"ret": "Boolean", "name": "isLineSegments", "inside": "LineSegments", "ty": "property", "doc": "Used to check whether this or derived classes are line segments. Default is *true*."}] ,
[{"inside": "Line", "args": [["Geometry", "geometry"], ["Material", "material"]], "ty": "constructor", "doc": "<i>>Geometry geometry</i> \u2014 vertices representing the line segment(s). Default is a new <i>BufferGeometry</i>."}, {"ret": "Boolean", "name": "isLine", "inside": "Line", "ty": "property", "doc": "Used to check whether this or derived classes are lines. Default is *true*."}, {"ret": "Geometry", "name": "geometry", "inside": "Line", "ty": "property", "doc": "Vertices representing the line segment(s)."}, {"ret": "Material", "name": "material", "inside": "Line", "ty": "property", "doc": "Material for the line."}, {"ret": "Line", "name": "computeLineDistances", "inside": "Line", "args": [], "ty": "method", "doc": "Computes an array of distance values which are necessary for <i>LineDashedMaterial</i>. For each vertex in the geometry, the method calculates the cumulative length from the current point to the very beginning of the line."}, {"ret": "null", "name": "raycast", "inside": "Line", "args": [["Raycaster", "raycaster"], ["Array", "intersects"]], "ty": "method", "doc": "Get intersections between a casted <i>Ray</i> and this Line. [page:Raycaster.intersectObject] will call this method."}, {"ret": "Line", "name": "clone", "inside": "Line", "args": [], "ty": "method", "doc": "Returns a clone of this Line object and its descendants."}] ,
[{"inside": "CubeCamera", "args": [["Number", "near"], ["Number", "far"], ["Number", "cubeResolution"]], "ty": "constructor", "doc": "near -- The near clipping distance."}, {"ret": "WebGLRenderTargetCube", "name": "renderTarget", "inside": "CubeCamera", "ty": "property", "doc": "The cube texture that gets generated."}, {"ret": "null", "name": "update", "inside": "CubeCamera", "args": [["WebGLRenderer", "renderer"], ["Scene", "scene"]], "ty": "method", "doc": "renderer -- The current WebGL renderer"}, {"ret": "null", "name": "clear", "inside": "CubeCamera", "args": [["WebGLRenderer", "renderer"], ["Boolean", "color"], ["Boolean", "depth"], ["Boolean", "stencil"]], "ty": "method", "doc": "Call this to clear the <i>CubeCamera.renderTarget</i> color, depth, and/or stencil buffers. The color buffer is set to the renderer's current clear color. Arguments default to *true*."}] ,
[{"inside": "OrthographicCamera", "args": [["Number", "left"], ["Number", "right"], ["Number", "top"], ["Number", "bottom"], ["Number", "near"], ["Number", "far"]], "ty": "constructor", "doc": "left \u2014 Camera frustum left plane."}, {"ret": "Float", "name": "bottom", "inside": "OrthographicCamera", "ty": "property", "doc": "Camera frustum bottom plane."}, {"ret": "Float", "name": "far", "inside": "OrthographicCamera", "ty": "property", "doc": "Camera frustum far plane. Default is *2000*."}, {"ret": "Boolean", "name": "isOrthographicCamera", "inside": "OrthographicCamera", "ty": "property", "doc": "Used to test whether this or derived classes are OrthographicCameras. Default is *true*."}, {"ret": "Float", "name": "left", "inside": "OrthographicCamera", "ty": "property", "doc": "Camera frustum left plane."}, {"ret": "Float", "name": "near", "inside": "OrthographicCamera", "ty": "property", "doc": "Camera frustum near plane. Default is *0.1*."}, {"ret": "Float", "name": "right", "inside": "OrthographicCamera", "ty": "property", "doc": "Camera frustum right plane."}, {"ret": "Float", "name": "top", "inside": "OrthographicCamera", "ty": "property", "doc": "Camera frustum top plane."}, {"ret": "Object", "name": "view", "inside": "OrthographicCamera", "ty": "property", "doc": "Set by <i>OrthographicCamera.setViewOffset</i>. Default is *null*."}, {"ret": "number", "name": "zoom", "inside": "OrthographicCamera", "ty": "property", "doc": "Gets or sets the zoom factor of the camera. Default is *1*."}, {"ret": "null", "name": "setViewOffset", "inside": "OrthographicCamera", "args": [["Float", "fullWidth"], ["Float", "fullHeight"], ["Float", "x"], ["Float", "y"], ["Float", "width"], ["Float", "height"]], "ty": "method", "doc": "fullWidth \u2014 full width of multiview setup"}, {"ret": "null", "name": "clearViewOffset", "inside": "OrthographicCamera", "args": [], "ty": "method", "doc": "Removes any offset set by the .setViewOffset method."}, {"ret": "null", "name": "updateProjectionMatrix", "inside": "OrthographicCamera", "args": [], "ty": "method", "doc": "Updates the camera projection matrix. Must be called after any change of parameters."}, {"ret": "JSON", "name": "toJSON", "inside": "OrthographicCamera", "args": [], "ty": "method", "doc": "Return the camera's data in JSON format."}] ,
[{"inside": "ArrayCamera", "args": [["Array", "array"]], "ty": "constructor", "doc": "An array of cameras."}, {"ret": "Array", "name": "cameras", "inside": "ArrayCamera", "ty": "property", "doc": "An array of cameras."}] ,
[{"inside": "PerspectiveCamera", "args": [["Number", "fov"], ["Number", "aspect"], ["Number", "near"], ["Number", "far"]], "ty": "constructor", "doc": "fov \u2014 Camera frustum vertical field of view."}, {"ret": "Float", "name": "aspect", "inside": "PerspectiveCamera", "ty": "property", "doc": "Camera frustum aspect ratio, usually the canvas width / canvas height. Default is *1* (square canvas)."}, {"ret": "Float", "name": "far", "inside": "PerspectiveCamera", "ty": "property", "doc": "Camera frustum far plane. Default is *2000*."}, {"ret": "Float", "name": "filmGauge", "inside": "PerspectiveCamera", "ty": "property", "doc": "Film size used for the larger axis. Default is 35 (millimeters). This parameter does not influence the projection matrix unless .filmOffset is set to a nonzero value."}, {"ret": "Float", "name": "filmOffset", "inside": "PerspectiveCamera", "ty": "property", "doc": "Horizontal off-center offset in the same unit as .filmGauge. Default is *0*."}, {"ret": "Float", "name": "focus", "inside": "PerspectiveCamera", "ty": "property", "doc": "Object distance used for stereoscopy and depth-of-field effects. This parameter does not influence the projection matrix unless a <i>StereoCamera</i> is being used. Default is *10*."}, {"ret": "Float", "name": "fov", "inside": "PerspectiveCamera", "ty": "property", "doc": "Camera frustum vertical field of view, from bottom to top of view, in degrees. Default is *50*."}, {"ret": "Boolean", "name": "isPerspectiveCamera", "inside": "PerspectiveCamera", "ty": "property", "doc": "Used to test whether this or derived classes are PerspectiveCameras. Default is *true*."}, {"ret": "Float", "name": "near", "inside": "PerspectiveCamera", "ty": "property", "doc": "Camera frustum near plane. Default is *0.1*."}, {"ret": "Object", "name": "view", "inside": "PerspectiveCamera", "ty": "property", "doc": "Frustum window specification or null. This is set using the [page:PerspectiveCamera.setViewOffset .setViewOffset] method and cleared using [page:PerspectiveCamera.clearViewOffset .clearViewOffset]."}, {"ret": "number", "name": "zoom", "inside": "PerspectiveCamera", "ty": "property", "doc": "Gets or sets the zoom factor of the camera. Default is *1*."}, {"ret": "null", "name": "clearViewOffset", "inside": "PerspectiveCamera", "args": [], "ty": "method", "doc": "Removes any offset set by the [page:PerspectiveCamera.setViewOffset .setViewOffset] method."}, {"ret": "Float", "name": "getEffectiveFOV", "inside": "PerspectiveCamera", "args": [], "ty": "method", "doc": "Returns the current vertical field of view angle in degrees considering .zoom."}, {"ret": "Float", "name": "getFilmHeight", "inside": "PerspectiveCamera", "args": [], "ty": "method", "doc": "Returns the height of the image on the film. If .aspect is less than or equal to one (portrait format), the result equals .filmGauge."}, {"ret": "Float", "name": "getFilmWidth", "inside": "PerspectiveCamera", "args": [], "ty": "method", "doc": "Returns the width of the image on the film. If .aspect is greater than or equal to one (landscape format), the result equals .filmGauge."}, {"ret": "Float", "name": "getFocalLength", "inside": "PerspectiveCamera", "args": [], "ty": "method", "doc": "Returns the focal length of the current .fov in respect to .filmGauge."}, {"ret": "null", "name": "setFocalLength", "inside": "PerspectiveCamera", "args": [["Float", "focalLength"]], "ty": "method", "doc": "Sets the FOV by focal length in respect to the current [page:PerspectiveCamera.filmGauge .filmGauge]."}, {"ret": "null", "name": "setViewOffset", "inside": "PerspectiveCamera", "args": [["Float", "fullWidth"], ["Float", "fullHeight"], ["Float", "x"], ["Float", "y"], ["Float", "width"], ["Float", "height"]], "ty": "method", "doc": "fullWidth \u2014 full width of multiview setup"}, {"ret": "null", "name": "updateProjectionMatrix", "inside": "PerspectiveCamera", "args": [], "ty": "method", "doc": "Updates the camera projection matrix. Must be called after any change of parameters."}, {"ret": "JSON", "name": "toJSON", "inside": "PerspectiveCamera", "args": [], "ty": "method", "doc": "Return camera data in JSON format."}] ,
[{"inside": "StereoCamera", "args": [], "ty": "constructor", "doc": "Properties"}, {"ret": "Float", "name": "aspect", "inside": "StereoCamera", "ty": "property", "doc": "Default is *1*."}, {"ret": "Float", "name": "eyeSep", "inside": "StereoCamera", "ty": "property", "doc": "Default is *0.064*."}, {"ret": "PerspectiveCamera", "name": "cameraL", "inside": "StereoCamera", "ty": "property", "doc": "Left camera. This is added to [page:Layers layer 1] - objects to be rendered by the left camera must also be added to this layer."}, {"ret": "PerspectiveCamera", "name": "cameraR", "inside": "StereoCamera", "ty": "property", "doc": "Right camera.This is added to [page:Layers layer 2] - objects to be rendered by the right camera must also be added to this layer."}, {"ret": "null", "name": "update", "inside": "StereoCamera", "args": [["PerspectiveCamera", "camera"]], "ty": "method", "doc": "Update the stereo cameras based on the camera passed in."}] ,
[{"inside": "Camera", "args": [], "ty": "constructor", "doc": "Creates a new [name]. Note that this class is not intended to be called directly; you probably want a <i>PerspectiveCamera</i> or <i>OrthographicCamera</i> instead."}, {"ret": "Boolean", "name": "isCamera", "inside": "Camera", "ty": "property", "doc": "Used to check whether this or derived classes are cameras. Default is *true*."}, {"ret": "Layers", "name": "layers", "inside": "Camera", "ty": "property", "doc": "The <i>>Layers layers</i> that the camera is a member of. This is an inherited property from <i>Object3D</i>."}, {"ret": "Matrix4", "name": "matrixWorldInverse", "inside": "Camera", "ty": "property", "doc": "This is the inverse of matrixWorld. MatrixWorld contains the Matrix which has the world transform of the Camera."}, {"ret": "Matrix4", "name": "projectionMatrix", "inside": "Camera", "ty": "property", "doc": "This is the matrix which contains the projection."}, {"ret": "Matrix4", "name": "projectionMatrixInverse", "inside": "Camera", "ty": "property", "doc": "The inverse of projectionMatrix."}, {"ret": "Camera", "name": "clone", "inside": "Camera", "args": [], "ty": "method", "doc": "Return a new camera with the same properties as this one."}, {"ret": "Camera", "name": "copy", "inside": "Camera", "args": [["Camera", "source"], ["Boolean", "recursive"]], "ty": "method", "doc": "Copy the properties from the source camera into this one."}, {"ret": "Vector3", "name": "getWorldDirection", "inside": "Camera", "args": [["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 target</i> \u2014 the result will be copied into this Vector3."}] ,
[{"inside": "Spherical", "args": [["Float", "radius"], ["Float", "phi"], ["Float", "theta"]], "ty": "constructor", "doc": "<i>>Float radius</i> - the radius, or the distance (straight-line distance) from the point to the origin. Default is *1.0*."}, {"ret": "Float", "name": "radius", "inside": "Spherical", "ty": "property"}, {"ret": "Float", "name": "phi", "inside": "Spherical", "ty": "property"}, {"ret": "Float", "name": "theta", "inside": "Spherical", "ty": "property", "doc": "Methods"}, {"ret": "Spherical", "name": "clone", "inside": "Spherical", "args": [], "ty": "method", "doc": "Returns a new plane with the same [page:.radius radius], [page:.phi phi] and [page:.theta theta] properties as this one."}, {"ret": "Spherical", "name": "copy", "inside": "Spherical", "args": [["Spherical", "s"]], "ty": "method", "doc": "Copies the values of the passed Spherical's [page:.radius radius], [page:.phi phi] and [page:.theta theta] properties to this spherical."}, {"ret": "Spherical", "name": "makeSafe", "inside": "Spherical", "args": [], "ty": "method", "doc": "Restricts the polar angle [page:.phi phi] to be between 0.000001 and pi - 0.000001."}, {"ret": "Spherical", "name": "set", "inside": "Spherical", "args": [["Float", "radius"], ["Float", "phi"], ["Float", "theta"]], "ty": "method", "doc": "Sets values of this spherical's [page:.radius radius], [page:.phi phi] and [page:.theta theta] properties."}, {"ret": "Spherical", "name": "setFromVector3", "inside": "Spherical", "args": [["Vector3", "vec3"]], "ty": "method", "doc": "Sets values of this spherical's [page:.radius radius], [page:.phi phi] and [page:.theta theta] properties from the <i>>Vector3 Vector3</i>."}, {"ret": "Spherical", "name": "setFromCartesianCoords", "inside": "Spherical", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"]], "ty": "method", "doc": "Sets values of this spherical's [page:.radius radius], [page:.phi phi] and [page:.theta theta] properties from Cartesian coordinates."}] ,
[{"inside": "Triangle", "args": [["Vector3", "a"], ["Vector3", "b"], ["Vector3", "c"]], "ty": "constructor", "doc": "<i>>Vector3 a</i> - the first corner of the triangle. Default is a <i>Vector3</i> at (0, 0, 0)."}, {"ret": "Vector3", "name": "a", "inside": "Triangle", "ty": "property", "doc": "The first corner of the triangle. Default is a <i>Vector3</i> at (0, 0, 0)."}, {"ret": "Vector3", "name": "b", "inside": "Triangle", "ty": "property", "doc": "The second corner of the triangle. Default is a <i>Vector3</i> at (0, 0, 0)."}, {"ret": "Vector3", "name": "c", "inside": "Triangle", "ty": "property", "doc": "the final corner of the triangle. Default is a <i>Vector3</i> at (0, 0, 0)"}, {"ret": "Triangle", "name": "clone", "inside": "Triangle", "args": [], "ty": "method", "doc": "Returns a new triangle with the same [page:.a a], [page:.b b] and [page:.c c] properties as this one."}, {"ret": "Vector3", "name": "closestPointToPoint", "inside": "Triangle", "args": [["Vector3", "point"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 point</i> - <i>Vector3</i>"}, {"ret": "Boolean", "name": "containsPoint", "inside": "Triangle", "args": [["Vector3", "point"]], "ty": "method", "doc": "<i>>Vector3 point</i> - <i>Vector3</i> to check."}, {"ret": "Triangle", "name": "copy", "inside": "Triangle", "args": [["Triangle", "triangle"]], "ty": "method", "doc": "Copies the values of the passed triangles's [page:.a a], [page:.b b] and [page:.c c] properties to this triangle."}, {"ret": "Boolean", "name": "equals", "inside": "Triangle", "args": [["Triangle", "triangle"]], "ty": "method", "doc": "Returns true if the two triangles have identical [page:.a a], [page:.b b] and [page:.c c] properties."}, {"ret": "Float", "name": "getArea", "inside": "Triangle", "args": [], "ty": "method", "doc": "Return the area of the triangle."}, {"ret": "Vector3", "name": "getBarycoord", "inside": "Triangle", "args": [["Vector3", "point"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 point</i> - <i>Vector3</i>"}, {"ret": "Vector3", "name": "getMidpoint", "inside": "Triangle", "args": [["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 target</i> \u2014 the result will be copied into this Vector3."}, {"ret": "Vector3", "name": "getNormal", "inside": "Triangle", "args": [["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 target</i> \u2014 the result will be copied into this Vector3."}, {"ret": "Plane", "name": "getPlane", "inside": "Triangle", "args": [["Plane", "target"]], "ty": "method", "doc": "<i>>Vector3 target</i> \u2014 the result will be copied into this Plane."}, {"ret": "Boolean", "name": "intersectsBox", "inside": "Triangle", "args": [["Box3", "box"]], "ty": "method", "doc": "<i>>Box3 box</i> - Box to check for intersection against."}, {"ret": "Triangle", "name": "set", "inside": "Triangle", "args": [["Vector3", "a"], ["Vector3", "b"], ["Vector3", "c"]], "ty": "method", "doc": "Sets the triangle's [page:.a a], [page:.b b] and [page:.c c] properties to the passed <i>>vector3 vector3s</i>."}, {"ret": "Triangle", "name": "setFromPointsAndIndices", "inside": "Triangle", "args": [["Array", "points"], ["Integer", "i0"], ["Integer", "i1"], ["Integer", "i2"]], "ty": "method", "doc": "points - <i>Array</i> of <i>Vector3</i>s"}] ,
[{"inside": "Ray", "args": [["Vector3", "origin"], ["Vector3", "direction"]], "ty": "constructor", "doc": "<i>>Vector3 origin</i> - (optional) the origin of the <i>Ray</i>. Default is a <i>Vector3</i> at (0, 0, 0)."}, {"ret": "Vector3", "name": "origin", "inside": "Ray", "ty": "property", "doc": "The origin of the <i>Ray</i>. Default is a <i>Vector3</i> at (0, 0, 0)."}, {"ret": "Vector3", "name": "direction", "inside": "Ray", "ty": "property", "doc": "The direction of the <i>Ray</i>. This must be normalized (with [page:Vector3.normalize]) for the methods to operate properly. Default is a <i>Vector3</i> at (0, 0, 0)."}, {"ret": "Ray", "name": "applyMatrix4", "inside": "Ray", "args": [["Matrix4", "matrix4"]], "ty": "method", "doc": "<i>>Matrix4 matrix4</i> - the <i>Matrix4</i> to apply to this <i>Ray</i>."}, {"ret": "Vector3", "name": "at", "inside": "Ray", "args": [["Float", "t"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Float t</i> - the distance along the <i>Ray</i> to retrieve a position for."}, {"ret": "Ray", "name": "clone", "inside": "Ray", "args": [], "ty": "method", "doc": "Creates a new Ray with identical [page:.origin origin] and [page:.direction direction] to this one."}, {"ret": "Vector3", "name": "closestPointToPoint", "inside": "Ray", "args": [["Vector3", "point"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 point</i> - the point to get the closest approach to."}, {"ret": "Ray", "name": "copy", "inside": "Ray", "args": [["Ray", "ray"]], "ty": "method", "doc": "Copies the [page:.origin origin] and [page:.direction direction] properties of <i>>Ray ray</i> into this ray."}, {"ret": "Float", "name": "distanceSqToPoint", "inside": "Ray", "args": [["Vector3", "point"]], "ty": "method", "doc": "<i>>Vector3 point</i> - the <i>Vector3</i> to compute a distance to."}, {"ret": "Float", "name": "distanceSqToSegment", "inside": "Ray", "args": [["Vector3", "v0"], ["Vector3", "v1"], ["Vector3", "optionalPointOnRay"], ["Vector3", "optionalPointOnSegment"]], "ty": "method", "doc": "<i>>Vector3 v0</i> - the start of the line segment."}, {"ret": "Float", "name": "distanceToPlane", "inside": "Ray", "args": [["Plane", "plane"]], "ty": "method", "doc": "<i>>Plane plane</i> - the <i>Plane</i> to get the distance to."}, {"ret": "Float", "name": "distanceToPoint", "inside": "Ray", "args": [["Vector3", "point"]], "ty": "method", "doc": "<i>>Vector3 point</i> - <i>Vector3</i> The <i>Vector3</i> to compute a distance to."}, {"ret": "Boolean", "name": "equals", "inside": "Ray", "args": [["Ray", "ray"]], "ty": "method", "doc": "<i>>Ray ray</i> - the <i>Ray</i> to compare to."}, {"ret": "Vector3", "name": "intersectBox", "inside": "Ray", "args": [["Box3", "box"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Box3 box</i> - the <i>Box3</i> to intersect with."}, {"ret": "Vector3", "name": "intersectPlane", "inside": "Ray", "args": [["Plane", "plane"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Plane plane</i> - the <i>Plane</i> to intersect with."}, {"ret": "Vector3", "name": "intersectSphere", "inside": "Ray", "args": [["Sphere", "sphere"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Sphere sphere</i> - the <i>Sphere</i> to intersect with."}, {"ret": "Vector3", "name": "intersectTriangle", "inside": "Ray", "args": [["Vector3", "a"], ["Vector3", "b"], ["Vector3", "c"], ["Boolean", "backfaceCulling"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 a</i>, <i>>Vector3 b</i>, <i>>Vector3 c</i> - The <i>Vector3</i> points making up the triangle."}, {"ret": "Boolean", "name": "intersectsBox", "inside": "Ray", "args": [["Box3", "box"]], "ty": "method", "doc": "<i>>Box3 box</i> - the <i>Box3</i> to intersect with."}, {"ret": "Boolean", "name": "intersectsPlane", "inside": "Ray", "args": [["Plane", "plane"]], "ty": "method", "doc": "<i>>Plane plane</i> - the <i>Plane</i> to intersect with."}, {"ret": "Boolean", "name": "intersectsSphere", "inside": "Ray", "args": [["Sphere", "sphere"]], "ty": "method", "doc": "<i>>Sphere sphere</i> - the <i>Sphere</i> to intersect with."}, {"ret": "Ray", "name": "lookAt", "inside": "Ray", "args": [["Vector3", "v"]], "ty": "method", "doc": "<i>>Vector3 v</i> - The <i>Vector3</i> to look at."}, {"ret": "Ray", "name": "recast", "inside": "Ray", "args": [["Float", "t"]], "ty": "method", "doc": "<i>>Float t</i> - The distance along the <i>Ray</i> to interpolate."}, {"ret": "Ray", "name": "set", "inside": "Ray", "args": [["Vector3", "origin"], ["Vector3", "direction"]], "ty": "method", "doc": "<i>>Vector3 origin</i> - the [page:.origin origin] of the <i>Ray</i>."}] ,
[{"inside": "Matrix3", "args": [], "ty": "constructor", "doc": "Creates and initializes the [name] to the 3x3 matrix."}, {"ret": "Float32Array", "name": "elements", "inside": "Matrix3", "ty": "property", "doc": "A [link:https://en.wikipedia.org/wiki/Row-_and_column-major_order column-major] list of matrix values."}, {"ret": "Boolean", "name": "isMatrix3", "inside": "Matrix3", "ty": "property", "doc": "Used to check whether this or derived classes are Matrix3s. Default is *true*."}, {"ret": "Array", "name": "applyToBufferAttribute", "inside": "Matrix3", "args": [["BufferAttribute", "attribute"]], "ty": "method", "doc": "<i>>BufferAttribute attribute</i> - An attribute of floats that represent 3D vectors."}, {"ret": "Matrix3", "name": "clone", "inside": "Matrix3", "args": [], "ty": "method", "doc": "Creates a new Matrix3 and with identical elements to this one."}, {"ret": "this", "name": "copy", "inside": "Matrix3", "args": [["Matrix3", "m"]], "ty": "method", "doc": "Copies the elements of matrix <i>>Matrix3 m</i> into this matrix."}, {"ret": "Float", "name": "determinant", "inside": "Matrix3", "args": [], "ty": "method", "doc": "Computes and returns the determinant of this matrix."}, {"ret": "Boolean", "name": "equals", "inside": "Matrix3", "args": [["Matrix3", "m"]], "ty": "method", "doc": "Return true if this matrix and <i>>Matrix3 m</i> are equal."}, {"ret": "this", "name": "fromArray", "inside": "Matrix3", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - the array to read the elements from."}, {"ret": "this", "name": "getInverse", "inside": "Matrix3", "args": [["Matrix3", "m"], ["Boolean", "throwOnDegenerate"]], "ty": "method", "doc": "<i>>Matrix3 m</i> - the matrix to take the inverse of."}, {"ret": "this", "name": "getNormalMatrix", "inside": "Matrix3", "args": [["Matrix4", "m"]], "ty": "method", "doc": "<i>>Matrix4 m</i> - <i>Matrix4</i>"}, {"ret": "this", "name": "identity", "inside": "Matrix3", "args": [], "ty": "method", "doc": "Resets this matrix to the 3x3 identity matrix:"}, {"ret": "this", "name": "multiply", "inside": "Matrix3", "args": [["Matrix3", "m"]], "ty": "method", "doc": "Post-multiplies this matrix by <i>>Matrix3 m</i>."}, {"ret": "this", "name": "multiplyMatrices", "inside": "Matrix3", "args": [["Matrix3", "a"], ["Matrix3", "b"]], "ty": "method", "doc": "Sets this matrix to <i>>Matrix3 a</i> x <i>>Matrix3 b</i>."}, {"ret": "this", "name": "multiplyScalar", "inside": "Matrix3", "args": [["Float", "s"]], "ty": "method", "doc": "Multiplies every component of the matrix by the scalar value *s*."}, {"ret": "this", "name": "set", "inside": "Matrix3", "args": [["Float", "n11"], ["Float", "n12"], ["Float", "n13"], ["Float", "n21"], ["Float", "n22"], ["Float", "n23"], ["Float", "n31"], ["Float", "n32"], ["Float", "n33"]], "ty": "method", "doc": "<i>>Float n11</i> - value to put in row 1, col 1."}, {"ret": "this", "name": "premultiply", "inside": "Matrix3", "args": [["Matrix3", "m"]], "ty": "method", "doc": "Pre-multiplies this matrix by <i>>Matrix3 m</i>."}, {"ret": "this", "name": "setFromMatrix4", "inside": "Matrix3", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Set this matrx to the upper 3x3 matrix of the Matrix4 <i>>Matrix4 m</i>."}, {"ret": "this", "name": "setUvTransform", "inside": "Matrix3", "args": [["Float", "tx"], ["Float", "ty"], ["Float", "sx"], ["Float", "sy"], ["Float", "rotation"], ["Float", "cx"], ["Float", "cy"]], "ty": "method", "doc": "<i>>Float tx</i> - offset x"}, {"ret": "Array", "name": "toArray", "inside": "Matrix3", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - (optional) array to store the resulting vector in. If not given a new array will be created."}, {"ret": "this", "name": "transpose", "inside": "Matrix3", "args": [], "ty": "method", "doc": "Transposes this matrix in place."}, {"ret": "this", "name": "transposeIntoArray", "inside": "Matrix3", "args": [["Array", "array"]], "ty": "method", "doc": "<i>>Array array</i> - array to store the resulting vector in."}] ,
[{"inside": "Box2", "args": [["Vector2", "min"], ["Vector2", "max"]], "ty": "constructor", "doc": "<i>>Vector2 min</i> - (optional) <i>Vector2</i> representing the lower (x, y) boundary of the box. Default is ( + Infinity, + Infinity )."}, {"ret": "Vector2", "name": "min", "inside": "Box2", "ty": "property", "doc": "<i>Vector2</i> representing the lower (x, y) boundary of the box."}, {"ret": "Vector2", "name": "max", "inside": "Box2", "ty": "property", "doc": "<i>Vector2</i> representing the lower upper (x, y) boundary of the box."}, {"ret": "Vector2", "name": "clampPoint", "inside": "Box2", "args": [["Vector2", "point"], ["Vector2", "target"]], "ty": "method", "doc": "<i>>Vector2 point</i> - <i>Vector2</i> to clamp."}, {"ret": "Box2", "name": "clone", "inside": "Box2", "args": [], "ty": "method", "doc": "Returns a new <i>Box2</i> with the same [page:.min min] and [page:.max max] as this one."}, {"ret": "Boolean", "name": "containsBox", "inside": "Box2", "args": [["Box2", "box"]], "ty": "method", "doc": "<i>>Box2 box</i> - <i>>Box2 Box2</i> to test for inclusion."}, {"ret": "Boolean", "name": "containsPoint", "inside": "Box2", "args": [["Vector2", "point"]], "ty": "method", "doc": "<i>>Vector2 point</i> - <i>Vector2</i> to check for inclusion."}, {"ret": "Box2", "name": "copy", "inside": "Box2", "args": [["Box2", "box"]], "ty": "method", "doc": "Copies the [page:.min min] and [page:.max max] from <i>>Box2 box</i> to this box."}, {"ret": "Float", "name": "distanceToPoint", "inside": "Box2", "args": [["Vector2", "point"]], "ty": "method", "doc": "<i>>Vector2 point</i> - <i>Vector2</i> to measure distance to."}, {"ret": "Boolean", "name": "equals", "inside": "Box2", "args": [["Box2", "box"]], "ty": "method", "doc": "<i>>Box2 box</i> - Box to compare with this one."}, {"ret": "Box2", "name": "expandByPoint", "inside": "Box2", "args": [["Vector2", "point"]], "ty": "method", "doc": "<i>>Vector2 point</i> - <i>Vector2</i> that should be included in the box."}, {"ret": "Box2", "name": "expandByScalar", "inside": "Box2", "args": [["float", "scalar"]], "ty": "method", "doc": "<i>>float scalar</i> - Distance to expand the box by."}, {"ret": "Box2", "name": "expandByVector", "inside": "Box2", "args": [["Vector2", "vector"]], "ty": "method", "doc": "<i>>Vector2 vector</i> - <i>Vector2</i> to expand the box by."}, {"ret": "Vector2", "name": "getCenter", "inside": "Box2", "args": [["Vector2", "target"]], "ty": "method", "doc": "<i>>Vector2 target</i> \u2014 the result will be copied into this Vector2."}, {"ret": "Vector2", "name": "getParameter", "inside": "Box2", "args": [["Vector2", "point"], ["Vector2", "target"]], "ty": "method", "doc": "<i>>Vector2 point</i> - <i>Vector2</i>."}, {"ret": "Vector2", "name": "getSize", "inside": "Box2", "args": [["Vector2", "target"]], "ty": "method", "doc": "<i>>Vector2 target</i> \u2014 the result will be copied into this Vector2."}, {"ret": "Box2", "name": "intersect", "inside": "Box2", "args": [["Box2", "box"]], "ty": "method", "doc": "<i>>Box2 box</i> - Box to intersect with."}, {"ret": "Boolean", "name": "intersectsBox", "inside": "Box2", "args": [["Box2", "box"]], "ty": "method", "doc": "<i>>Box2 box</i> - Box to check for intersection against."}, {"ret": "Boolean", "name": "isEmpty", "inside": "Box2", "args": [], "ty": "method", "doc": "Returns true if this box includes zero points within its bounds."}, {"ret": "Box2", "name": "makeEmpty", "inside": "Box2", "args": [], "ty": "method", "doc": "Makes this box empty."}, {"ret": "Box2", "name": "set", "inside": "Box2", "args": [["Vector2", "min"], ["Vector2", "max"]], "ty": "method", "doc": "<i>>Vector2 min</i> - (required ) <i>Vector2</i> representing the lower (x, y) boundary of the box."}, {"ret": "Box2", "name": "setFromCenterAndSize", "inside": "Box2", "args": [["Vector2", "center"], ["Vector2", "size"]], "ty": "method", "doc": "<i>>Vector2 center</i> - Desired center position of the box (<i>Vector2</i>)."}, {"ret": "Box2", "name": "setFromPoints", "inside": "Box2", "args": [["Array", "points"]], "ty": "method", "doc": "<i>>Array points</i> - Array of <i>>Vector2 Vector2s</i> that the resulting box will contain."}, {"ret": "Box2", "name": "translate", "inside": "Box2", "args": [["Vector2", "offset"]], "ty": "method", "doc": "<i>>Vector2 offset</i> - Direction and distance of offset."}, {"ret": "Box2", "name": "union", "inside": "Box2", "args": [["Box2", "box"]], "ty": "method", "doc": "<i>>Box2 box</i> - Box that will be unioned with this box."}] ,
[{"inside": "Vector2", "args": [["Float", "x"], ["Float", "y"]], "ty": "constructor", "doc": "<i>>Float x</i> - the x value of the vector. Default is *0*."}, {"ret": "Boolean", "name": "isVector2", "inside": "Vector2", "ty": "property", "doc": "Used to check whether this or derived classes are Vector2s. Default is *true*."}, {"ret": "Float", "name": "height", "inside": "Vector2", "ty": "property", "doc": "Alias for [page:.y y]."}, {"ret": "Float", "name": "width", "inside": "Vector2", "ty": "property", "doc": "Alias for [page:.x x]."}, {"ret": "Float", "name": "x", "inside": "Vector2", "ty": "property"}, {"ret": "Float", "name": "y", "inside": "Vector2", "ty": "property", "doc": "Methods"}, {"ret": "this", "name": "add", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "Adds <i>>Vector2 v</i> to this vector."}, {"ret": "this", "name": "addScalar", "inside": "Vector2", "args": [["Float", "s"]], "ty": "method", "doc": "Adds the scalar value <i>>Float s</i> to this vector's [page:.x x] and [page:.y y] values."}, {"ret": "this", "name": "addScaledVector", "inside": "Vector2", "args": [["Vector2", "v"], ["Float", "s"]], "ty": "method", "doc": "Adds the multiple of <i>>Vector2 v</i> and <i>>Float s</i> to this vector."}, {"ret": "this", "name": "addVectors", "inside": "Vector2", "args": [["Vector2", "a"], ["Vector2", "b"]], "ty": "method", "doc": "Sets this vector to <i>>Vector2 a</i> + <i>>Vector2 b</i>."}, {"ret": "Float", "name": "angle", "inside": "Vector2", "args": [], "ty": "method", "doc": "Computes the angle in radians of this vector with respect to the positive x-axis."}, {"ret": "this", "name": "applyMatrix3", "inside": "Vector2", "args": [["Matrix3", "m"]], "ty": "method", "doc": "Multiplies this vector (with an implicit 1 as the 3rd component) by m."}, {"ret": "this", "name": "ceil", "inside": "Vector2", "args": [], "ty": "method", "doc": "The [page:.x x] and [page:.y y] components of the vector are rounded up to the nearest integer value."}, {"ret": "this", "name": "clamp", "inside": "Vector2", "args": [["Vector2", "min"], ["Vector2", "max"]], "ty": "method", "doc": "<i>>Vector2 min</i> - the minimum x and y values."}, {"ret": "this", "name": "clampLength", "inside": "Vector2", "args": [["Float", "min"], ["Float", "max"]], "ty": "method", "doc": "<i>>Float min</i> - the minimum value the length will be clamped to"}, {"ret": "this", "name": "clampScalar", "inside": "Vector2", "args": [["Float", "min"], ["Float", "max"]], "ty": "method", "doc": "<i>>Float min</i> - the minimum value the components will be clamped to"}, {"ret": "Vector2", "name": "clone", "inside": "Vector2", "args": [], "ty": "method", "doc": "Returns a new Vector2 with the same [page:.x x] and [page:.y y] values as this one."}, {"ret": "this", "name": "copy", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "Copies the values of the passed Vector2's [page:.x x] and [page:.y y] properties to this Vector2."}, {"ret": "Float", "name": "distanceTo", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "Computes the distance from this vector to <i>>Vector2 v</i>."}, {"ret": "Float", "name": "manhattanDistanceTo", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "Computes the distance from this vector to <i>>Vector2 v</i>."}, {"ret": "Float", "name": "distanceToSquared", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "Computes the squared distance from this vector to <i>>Vector2 v</i>. If you are just comparing the distance with another distance, you should compare the distance squared instead as it is slightly more efficient to calculate."}, {"ret": "this", "name": "divide", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "Divides this vector by <i>>Vector2 v</i>."}, {"ret": "this", "name": "divideScalar", "inside": "Vector2", "args": [["Float", "s"]], "ty": "method", "doc": "Divides this vector by scalar <i>>Float s</i>."}, {"ret": "Float", "name": "dot", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "Calculates the product of this vector and <i>>Vector2 v</i>."}, {"ret": "Float", "name": "cross", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "Calculates the product of this vector and <i>>Vector2 v</i>. Note that a 'cross-product' in 2D is not well-defined. This function computes a geometric cross-product often used in 2D graphics"}, {"ret": "Boolean", "name": "equals", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "Checks for strict equality of this vector and <i>>Vector2 v</i>."}, {"ret": "this", "name": "floor", "inside": "Vector2", "args": [], "ty": "method", "doc": "The components of the vector are rounded down to the nearest integer value."}, {"ret": "this", "name": "fromArray", "inside": "Vector2", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - the source array."}, {"ret": "this", "name": "fromBufferAttribute", "inside": "Vector2", "args": [["BufferAttribute", "attribute"], ["Integer", "index"]], "ty": "method", "doc": "<i>>BufferAttribute attribute</i> - the source attribute."}, {"ret": "Float", "name": "getComponent", "inside": "Vector2", "args": [["Integer", "index"]], "ty": "method", "doc": "<i>>Integer index</i> - 0 or 1."}, {"ret": "Float", "name": "length", "inside": "Vector2", "args": [], "ty": "method", "doc": "Computes the length (straight-line length) from (0, 0) to (x, y)."}, {"ret": "Float", "name": "manhattanLength", "inside": "Vector2", "args": [], "ty": "method", "doc": "Computes the length of this vector."}, {"ret": "Float", "name": "lengthSq", "inside": "Vector2", "args": [], "ty": "method", "doc": "Computes the square of the length (straight-line length) from (0, 0) to (x, y). If you are comparing the lengths of vectors, you should compare the length squared instead as it is slightly more efficient to calculate."}, {"ret": "this", "name": "lerp", "inside": "Vector2", "args": [["Vector2", "v"], ["Float", "alpha"]], "ty": "method", "doc": "<i>>Vector2 v</i> - <i>Vector2</i> to interpolate towards."}, {"ret": "this", "name": "lerpVectors", "inside": "Vector2", "args": [["Vector2", "v1"], ["Vector2", "v2"], ["Float", "alpha"]], "ty": "method", "doc": "<i>>Vector2 v1</i> - the starting <i>Vector2</i>."}, {"ret": "this", "name": "negate", "inside": "Vector2", "args": [], "ty": "method", "doc": "Inverts this vector - i.e. sets x = -x and y = -y."}, {"ret": "this", "name": "normalize", "inside": "Vector2", "args": [], "ty": "method", "doc": "Converts this vector to a length 1."}, {"ret": "this", "name": "max", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "If this vector's x or y value is less than <i>>Vector2 v</i>'s x or y value, replace that value with the corresponding max value."}, {"ret": "this", "name": "min", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "If this vector's x or y value is greater than <i>>Vector2 v</i>'s x or y value, replace that value with the corresponding min value."}, {"ret": "this", "name": "multiply", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "Multiplies this vector by <i>>Vector2 v</i>."}, {"ret": "this", "name": "multiplyScalar", "inside": "Vector2", "args": [["Float", "s"]], "ty": "method", "doc": "Multiplies this vector by scalar <i>>Float s</i>."}, {"ret": "this", "name": "rotateAround", "inside": "Vector2", "args": [["Vector2", "center"], ["float", "angle"]], "ty": "method", "doc": "<i>>Vector2 center</i> - the point around which to rotate."}, {"ret": "this", "name": "round", "inside": "Vector2", "args": [], "ty": "method", "doc": "The components of the vector are rounded to the nearest integer value."}, {"ret": "this", "name": "roundToZero", "inside": "Vector2", "args": [], "ty": "method", "doc": "The components of the vector are rounded towards zero (up if negative, down if positive) to an integer value."}, {"ret": "this", "name": "set", "inside": "Vector2", "args": [["Float", "x"], ["Float", "y"]], "ty": "method", "doc": "Sets the [page:.x x] and [page:.y y] components of this vector."}, {"ret": "null", "name": "setComponent", "inside": "Vector2", "args": [["Integer", "index"], ["Float", "value"]], "ty": "method", "doc": "<i>>Integer index</i> - 0 or 1."}, {"ret": "this", "name": "setLength", "inside": "Vector2", "args": [["Float", "l"]], "ty": "method", "doc": "Sets this vector to the vector with the same direction as this one, but [page:.length length] <i>>Float l</i>."}, {"ret": "this", "name": "setScalar", "inside": "Vector2", "args": [["Float", "scalar"]], "ty": "method", "doc": "Sets the [page:.x x] and [page:.y y] values of this vector both equal to <i>>Float scalar</i>."}, {"ret": "this", "name": "setX", "inside": "Vector2", "args": [["Float", "x"]], "ty": "method", "doc": "Replaces this vector's [page:.x x] value with <i>>Float x</i>."}, {"ret": "this", "name": "setY", "inside": "Vector2", "args": [["Float", "y"]], "ty": "method", "doc": "Replaces this vector's [page:.y y] value with <i>>Float y</i>."}, {"ret": "this", "name": "sub", "inside": "Vector2", "args": [["Vector2", "v"]], "ty": "method", "doc": "Subtracts <i>>Vector2 v</i> from this vector."}, {"ret": "this", "name": "subScalar", "inside": "Vector2", "args": [["Float", "s"]], "ty": "method", "doc": "Subtracts <i>>Float s</i> from this vector's [page:.x x] and [page:.y y] components."}, {"ret": "this", "name": "subVectors", "inside": "Vector2", "args": [["Vector2", "a"], ["Vector2", "b"]], "ty": "method", "doc": "Sets this vector to <i>>Vector2 a</i> - <i>>Vector2 b</i>."}, {"ret": "Array", "name": "toArray", "inside": "Vector2", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - (optional) array to store the vector to. If this is not provided, a new array will be created."}] ,
[{"inside": "Line3", "args": [["Vector3", "start"], ["Vector3", "end"]], "ty": "constructor", "doc": "<i>>Vector3 start</i> - Start of the line segment. Default is (0, 0, 0)."}, {"ret": "Vector3", "name": "start", "inside": "Line3", "ty": "property", "doc": "<i>Vector3</i> representing the start point of the line."}, {"ret": "Vector3", "name": "end", "inside": "Line3", "ty": "property", "doc": "<i>Vector3</i> representing the end point of the line."}, {"ret": "Line3", "name": "applyMatrix4", "inside": "Line3", "args": [["Matrix4", "matrix"]], "ty": "method", "doc": "Applies a matrix transform to the line segment."}, {"ret": "Vector3", "name": "at", "inside": "Line3", "args": [["Float", "t"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Float t</i> - Use values 0-1 to return a position along the line segment."}, {"ret": "Line3", "name": "clone", "inside": "Line3", "args": [], "ty": "method", "doc": "Returns a new <i>Line3</i> with the same [page:.start start] and [page:.end end] vectors as this one."}, {"ret": "Vector3", "name": "closestPointToPoint", "inside": "Line3", "args": [["Vector3", "point"], ["Boolean", "clampToLine"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 point</i> - return the closest point on the line to this point."}, {"ret": "Float", "name": "closestPointToPointParameter", "inside": "Line3", "args": [["Vector3", "point"], ["Boolean", "clampToLine"]], "ty": "method", "doc": "<i>>Vector3 point</i> - the point for which to return a point parameter."}, {"ret": "Line3", "name": "copy", "inside": "Line3", "args": [["Line3", "line"]], "ty": "method", "doc": "Copies the passed line's [page:.start start] and [page:.end end] vectors to this line."}, {"ret": "Vector3", "name": "delta", "inside": "Line3", "args": [["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 target</i> \u2014 the result will be copied into this Vector3."}, {"ret": "Float", "name": "distance", "inside": "Line3", "args": [], "ty": "method", "doc": "Returns the end points."}, {"ret": "Float", "name": "distanceSq", "inside": "Line3", "args": [], "ty": "method", "doc": "Returns the square of the end vectors."}, {"ret": "Boolean", "name": "equals", "inside": "Line3", "args": [["Line3", "line"]], "ty": "method", "doc": "<i>>Line3 line</i> - <i>Line3</i> to compare with this one."}, {"ret": "Vector3", "name": "getCenter", "inside": "Line3", "args": [["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 target</i> \u2014 the result will be copied into this Vector3."}, {"ret": "Line3", "name": "set", "inside": "Line3", "args": [["Vector3", "start"], ["Vector3", "end"]], "ty": "method", "doc": "<i>>Vector3 start</i> - set the [page:.start start point] of the line."}] ,
[{"inside": "Frustum", "args": [["Plane", "p0"], ["Plane", "p1"], ["Plane", "p2"], ["Plane", "p3"], ["Plane", "p4"], ["Plane", "p5"]], "ty": "constructor", "doc": "<i>>Plane p0</i> - (optional) defaults to a new <i>Plane</i>."}, {"ret": "Array", "name": "planes", "inside": "Frustum", "ty": "property", "doc": "Array of 6 <i>>Plane planes</i>."}, {"ret": "Frustum", "name": "clone", "inside": "Frustum", "args": [], "ty": "method", "doc": "Return a new Frustum with the same parameters as this one."}, {"ret": "Boolean", "name": "containsPoint", "inside": "Frustum", "args": [["Vector3", "point"]], "ty": "method", "doc": "<i>>Vector3 point</i> - <i>Vector3</i> to test."}, {"ret": "Frustum", "name": "copy", "inside": "Frustum", "args": [["Frustum", "frustum"]], "ty": "method", "doc": "<i>>Frustum frustum</i> - The frustum to copy"}, {"ret": "Boolean", "name": "intersectsBox", "inside": "Frustum", "args": [["Box3", "box"]], "ty": "method", "doc": "<i>>Box3 box</i> - <i>Box3</i> to check for intersection."}, {"ret": "Boolean", "name": "intersectsObject", "inside": "Frustum", "args": [["Object3D", "object"]], "ty": "method", "doc": "Checks whether the <i>>Object3D object</i>'s [page:Geometry.boundingSphere bounding sphere] is intersecting the Frustum."}, {"ret": "Boolean", "name": "intersectsSphere", "inside": "Frustum", "args": [["Sphere", "sphere"]], "ty": "method", "doc": "<i>>Sphere sphere</i> - <i>Sphere</i> to check for intersection."}, {"ret": "Boolean", "name": "intersectsSprite", "inside": "Frustum", "args": [["Sprite", "sprite"]], "ty": "method", "doc": "Checks whether the <i>>Sprite sprite</i> is intersecting the Frustum."}, {"ret": "Frustum", "name": "set", "inside": "Frustum", "args": [["Plane", "p0"], ["Plane", "p1"], ["Plane", "p2"], ["Plane", "p3"], ["Plane", "p4"], ["Plane", "p5"]], "ty": "method", "doc": "Sets the current frustum from the passed planes. No plane order is implicitely implied."}, {"ret": "Frustum", "name": "setFromMatrix", "inside": "Frustum", "args": [["Matrix4", "matrix"]], "ty": "method", "doc": "<i>>Matrix4 matrix</i> - <i>Matrix4</i> used to set the [page:.planes planes]"}] ,
[{"inside": "Interpolant", "args": [], "ty": "constructor", "doc": "parameterPositions -- array of positions"}, {"ret": "null", "name": "parameterPositions", "inside": "Interpolant", "ty": "property"}, {"ret": "null", "name": "resultBuffer", "inside": "Interpolant", "ty": "property"}, {"ret": "null", "name": "sampleValues", "inside": "Interpolant", "ty": "property"}, {"ret": "Object", "name": "settings", "inside": "Interpolant", "ty": "property", "doc": "Optional, subclass-specific settings structure."}, {"ret": "null", "name": "valueSize", "inside": "Interpolant", "ty": "property", "doc": "Methods"}, {"ret": "null", "name": "evaluate", "inside": "Interpolant", "args": [["Number", "t"]], "ty": "method", "doc": "Evaluate the interpolant at position *t*."}] ,
[{"inside": "Vector3", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"]], "ty": "constructor", "doc": "<i>>Float x</i> - the x value of the vector. Default is *0*."}, {"ret": "Boolean", "name": "isVector3", "inside": "Vector3", "ty": "property", "doc": "Used to check whether this or derived classes are Vector3s. Default is *true*."}, {"ret": "Float", "name": "x", "inside": "Vector3", "ty": "property"}, {"ret": "Float", "name": "y", "inside": "Vector3", "ty": "property"}, {"ret": "Float", "name": "z", "inside": "Vector3", "ty": "property", "doc": "Methods"}, {"ret": "this", "name": "add", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "Adds <i>>Vector3 v</i> to this vector."}, {"ret": "this", "name": "addScalar", "inside": "Vector3", "args": [["Float", "s"]], "ty": "method", "doc": "Adds the scalar value s to this vector's [page:.x x], [page:.y y] and [page:.z z] values."}, {"ret": "this", "name": "addScaledVector", "inside": "Vector3", "args": [["Vector3", "v"], ["Float", "s"]], "ty": "method", "doc": "Adds the multiple of <i>>Vector3 v</i> and <i>>Float s</i> to this vector."}, {"ret": "this", "name": "addVectors", "inside": "Vector3", "args": [["Vector3", "a"], ["Vector3", "b"]], "ty": "method", "doc": "Sets this vector to <i>>Vector3 a</i> + <i>>Vector3 b</i>."}, {"ret": "this", "name": "applyAxisAngle", "inside": "Vector3", "args": [["Vector3", "axis"], ["Float", "angle"]], "ty": "method", "doc": "<i>>Vector3 axis</i> - A normalized <i>Vector3</i>."}, {"ret": "this", "name": "applyEuler", "inside": "Vector3", "args": [["Euler", "euler"]], "ty": "method", "doc": "Applies euler transform to this vector by converting the <i>Euler</i> object to a <i>Quaternion</i> and applying."}, {"ret": "this", "name": "applyMatrix3", "inside": "Vector3", "args": [["Matrix3", "m"]], "ty": "method", "doc": "Multiplies this vector by <i>>Matrix3 m</i>"}, {"ret": "this", "name": "applyMatrix4", "inside": "Vector3", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective."}, {"ret": "this", "name": "applyQuaternion", "inside": "Vector3", "args": [["Quaternion", "quaternion"]], "ty": "method", "doc": "Applies a <i>Quaternion</i> transform to this vector."}, {"ret": "Float", "name": "angleTo", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "Returns the angle between this vector and vector <i>>Vector3 v</i> in radians."}, {"ret": "this", "name": "ceil", "inside": "Vector3", "args": [], "ty": "method", "doc": "The [page:.x x], [page:.y y] and [page:.z z] components of the vector are rounded up to the nearest integer value."}, {"ret": "this", "name": "clamp", "inside": "Vector3", "args": [["Vector3", "min"], ["Vector3", "max"]], "ty": "method", "doc": "<i>>Vector3 min</i> - the minimum [page:.x x], [page:.y y] and [page:.z z] values."}, {"ret": "this", "name": "clampLength", "inside": "Vector3", "args": [["Float", "min"], ["Float", "max"]], "ty": "method", "doc": "<i>>Float min</i> - the minimum value the length will be clamped to"}, {"ret": "this", "name": "clampScalar", "inside": "Vector3", "args": [["Float", "min"], ["Float", "max"]], "ty": "method", "doc": "<i>>Float min</i> - the minimum value the components will be clamped to"}, {"ret": "Vector3", "name": "clone", "inside": "Vector3", "args": [], "ty": "method", "doc": "Returns a new vector3 with the same [page:.x x], [page:.y y] and [page:.z z] values as this one."}, {"ret": "this", "name": "copy", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "Copies the values of the passed vector3's [page:.x x], [page:.y y] and [page:.z z] properties to this vector3."}, {"ret": "this", "name": "cross", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "Sets this vector to product of itself and <i>>Vector3 v</i>."}, {"ret": "this", "name": "crossVectors", "inside": "Vector3", "args": [["Vector3", "a"], ["Vector3", "b"]], "ty": "method", "doc": "Sets this vector to product of <i>>Vector3 a</i> and <i>>Vector3 b</i>."}, {"ret": "Float", "name": "distanceTo", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "Computes the distance from this vector to <i>>Vector3 v</i>."}, {"ret": "Float", "name": "manhattanDistanceTo", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "Computes the distance from this vector to <i>>Vector3 v</i>."}, {"ret": "Float", "name": "distanceToSquared", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "Computes the squared distance from this vector to <i>>Vector3 v</i>. If you are just comparing the distance with another distance, you should compare the distance squared instead as it is slightly more efficient to calculate."}, {"ret": "this", "name": "divide", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "Divides this vector by <i>>Vector3 v</i>."}, {"ret": "this", "name": "divideScalar", "inside": "Vector3", "args": [["Float", "s"]], "ty": "method", "doc": "Divides this vector by scalar <i>>Float s</i>."}, {"ret": "Float", "name": "dot", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "Calculate the product of this vector and <i>>Vector3 v</i>."}, {"ret": "Boolean", "name": "equals", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "Checks for strict equality of this vector and <i>>Vector3 v</i>."}, {"ret": "this", "name": "floor", "inside": "Vector3", "args": [], "ty": "method", "doc": "The components of the vector are rounded down to the nearest integer value."}, {"ret": "this", "name": "fromArray", "inside": "Vector3", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - the source array."}, {"ret": "this", "name": "fromBufferAttribute", "inside": "Vector3", "args": [["BufferAttribute", "attribute"], ["Integer", "index"]], "ty": "method", "doc": "<i>>BufferAttribute attribute</i> - the source attribute."}, {"ret": "Float", "name": "getComponent", "inside": "Vector3", "args": [["Integer", "index"]], "ty": "method", "doc": "<i>>Integer index</i> - 0, 1 or 2."}, {"ret": "Float", "name": "length", "inside": "Vector3", "args": [], "ty": "method", "doc": "Computes the length (straight-line length) from (0, 0, 0) to (x, y, z)."}, {"ret": "Float", "name": "manhattanLength", "inside": "Vector3", "args": [], "ty": "method", "doc": "Computes the length of this vector."}, {"ret": "Float", "name": "lengthSq", "inside": "Vector3", "args": [], "ty": "method", "doc": "Computes the square of the length (straight-line length) from (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should compare the length squared instead as it is slightly more efficient to calculate."}, {"ret": "this", "name": "lerp", "inside": "Vector3", "args": [["Vector3", "v"], ["Float", "alpha"]], "ty": "method", "doc": "<i>>Vector3 v</i> - <i>Vector3</i> to interpolate towards."}, {"ret": "this", "name": "lerpVectors", "inside": "Vector3", "args": [["Vector3", "v1"], ["Vector3", "v2"], ["Float", "alpha"]], "ty": "method", "doc": "<i>>Vector3 v1</i> - the starting <i>Vector3</i>."}, {"ret": "this", "name": "max", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "If this vector's x, y or z value is less than <i>>Vector3 v</i>'s x, y or z value, replace that value with the corresponding max value."}, {"ret": "this", "name": "min", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "If this vector's x, y or z value is greater than <i>>Vector3 v</i>'s x, y or z value, replace that value with the corresponding min value."}, {"ret": "this", "name": "multiply", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "Multiplies this vector by <i>>Vector3 v</i>."}, {"ret": "this", "name": "multiplyScalar", "inside": "Vector3", "args": [["Float", "s"]], "ty": "method", "doc": "Multiplies this vector by scalar <i>>Float s</i>."}, {"ret": "this", "name": "multiplyVectors", "inside": "Vector3", "args": [["Vector3", "a"], ["Vector3", "b"]], "ty": "method", "doc": "Sets this vector equal to <i>>Vector3 a</i> * <i>>Vector3 b</i>, component-wise."}, {"ret": "this", "name": "negate", "inside": "Vector3", "args": [], "ty": "method", "doc": "Inverts this vector - i.e. sets x = -x, y = -y and z = -z."}, {"ret": "this", "name": "normalize", "inside": "Vector3", "args": [], "ty": "method", "doc": "Convert this vector to a length 1."}, {"ret": "this", "name": "project", "inside": "Vector3", "args": [["Camera", "camera"]], "ty": "method", "doc": "<i>>Camera camera</i> \u2014 camera to use in the projection."}, {"ret": "this", "name": "projectOnPlane", "inside": "Vector3", "args": [["Vector3", "planeNormal"]], "ty": "method", "doc": "<i>>Vector3 planeNormal</i> - A vector representing a plane normal."}, {"ret": "this", "name": "projectOnVector", "inside": "Vector3", "args": [], "ty": "method", "doc": "Projects this vector onto another vector."}, {"ret": "this", "name": "reflect", "inside": "Vector3", "args": [["Vector3", "normal"]], "ty": "method", "doc": "<i>>Vector3 normal</i> - the normal to the reflecting plane"}, {"ret": "this", "name": "round", "inside": "Vector3", "args": [], "ty": "method", "doc": "The components of the vector are rounded to the nearest integer value."}, {"ret": "this", "name": "roundToZero", "inside": "Vector3", "args": [], "ty": "method", "doc": "The components of the vector are rounded towards zero (up if negative, down if positive) to an integer value."}, {"ret": "this", "name": "set", "inside": "Vector3", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"]], "ty": "method", "doc": "Sets the [page:.x x], [page:.y y] and [page:.z z] components of this vector."}, {"ret": "null", "name": "setComponent", "inside": "Vector3", "args": [["Integer", "index"], ["Float", "value"]], "ty": "method", "doc": "<i>>Integer index</i> - 0, 1 or 2."}, {"ret": "this", "name": "setFromCylindrical", "inside": "Vector3", "args": [["Cylindrical", "c"]], "ty": "method", "doc": "Sets this vector from the cylindrical coordinates <i>>Cylindrical c</i>."}, {"ret": "this", "name": "setFromCylindricalCoords", "inside": "Vector3", "args": [["Float", "radius"], ["Float", "theta"], ["Float", "y"]], "ty": "method", "doc": "Sets this vector from the cylindrical coordinates <i>>Cylindrical radius</i>, <i>>Cylindrical theta</i> and <i>>Cylindrical y</i>."}, {"ret": "this", "name": "setFromMatrixColumn", "inside": "Vector3", "args": [["Matrix4", "matrix"], ["Integer", "index"]], "ty": "method", "doc": "Sets this vector's [page:.x x], [page:.y y] and [page:.z z] equal to the column of the <i>>Matrix4 matrix</i> specified by the <i>>Integer index</i>."}, {"ret": "this", "name": "setFromMatrixPosition", "inside": "Vector3", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Sets this vector to the position elements of the matrix <i>>Matrix4 m</i>."}, {"ret": "this", "name": "setFromMatrixScale", "inside": "Vector3", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Sets this vector to the scale elements of the matrix <i>>Matrix4 m</i>."}, {"ret": "this", "name": "setFromSpherical", "inside": "Vector3", "args": [["Spherical", "s"]], "ty": "method", "doc": "Sets this vector from the spherical coordinates <i>>Spherical s</i>."}, {"ret": "this", "name": "setFromSphericalCoords", "inside": "Vector3", "args": [["Float", "radius"], ["Float", "phi"], ["Float", "theta"]], "ty": "method", "doc": "Sets this vector from the spherical coordinates <i>>Spherical radius</i>, <i>>Spherical phi</i> and <i>>Spherical theta</i>."}, {"ret": "this", "name": "setLength", "inside": "Vector3", "args": [["Float", "l"]], "ty": "method", "doc": "Set this vector to the vector with the same direction as this one, but [page:.length length] <i>>Float l</i>."}, {"ret": "this", "name": "setScalar", "inside": "Vector3", "args": [["Float", "scalar"]], "ty": "method", "doc": "Set the [page:.x x], [page:.y y] and [page:.z z] values of this vector both equal to <i>>Float scalar</i>."}, {"ret": "this", "name": "setX", "inside": "Vector3", "args": [["Float", "x"]], "ty": "method", "doc": "Replace this vector's [page:.x x] value with <i>>Float x</i>."}, {"ret": "this", "name": "setY", "inside": "Vector3", "args": [["Float", "y"]], "ty": "method", "doc": "Replace this vector's [page:.y y] value with <i>>Float y</i>."}, {"ret": "this", "name": "setZ", "inside": "Vector3", "args": [["Float", "z"]], "ty": "method", "doc": "Replace this vector's [page:.z z] value with <i>>Float z</i>."}, {"ret": "this", "name": "sub", "inside": "Vector3", "args": [["Vector3", "v"]], "ty": "method", "doc": "Subtracts <i>>Vector3 v</i> from this vector."}, {"ret": "this", "name": "subScalar", "inside": "Vector3", "args": [["Float", "s"]], "ty": "method", "doc": "Subtracts <i>>Float s</i> from this vector's [page:.x x], [page:.y y] and [page:.z z] compnents."}, {"ret": "this", "name": "subVectors", "inside": "Vector3", "args": [["Vector3", "a"], ["Vector3", "b"]], "ty": "method", "doc": "Sets this vector to <i>>Vector3 a</i> - <i>>Vector3 b</i>."}, {"ret": "Array", "name": "toArray", "inside": "Vector3", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - (optional) array to store the vector to. If this is not provided a new array will be created."}, {"ret": "this", "name": "transformDirection", "inside": "Vector3", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Transforms the direction of this vector by a matrix (the upper left 3 x 3 subset of a <i>>Matrix4 m</i>) and then [page:.normalize normalizes] the result."}, {"ret": "this", "name": "unproject", "inside": "Vector3", "args": [["Camera", "camera"]], "ty": "method", "doc": "<i>>Camera camera</i> \u2014 camera to use in the projection."}] ,
[{"inside": "Sphere", "args": [["Vector3", "center"], ["Float", "radius"]], "ty": "constructor", "doc": "<i>>Vector3 center</i> - center of the sphere. Default is a <i>Vector3</i> at (0, 0, 0)."}, {"ret": "Vector3", "name": "center", "inside": "Sphere", "ty": "property", "doc": "A <i>Vector3</i> defining the center of the sphere. Default is (0, 0, 0)."}, {"ret": "Float", "name": "radius", "inside": "Sphere", "ty": "property", "doc": "The radius of the sphere. Default is 0."}, {"ret": "Sphere", "name": "applyMatrix4", "inside": "Sphere", "args": [["Matrix4", "matrix"]], "ty": "method", "doc": "<i>>Matrix4 matrix</i> - the [Page:Matrix4] to apply"}, {"ret": "Vector3", "name": "clampPoint", "inside": "Sphere", "args": [["Vector3", "point"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 point</i> - <i>Vector3</i> The point to clamp."}, {"ret": "Sphere", "name": "clone", "inside": "Sphere", "args": [], "ty": "method", "doc": "Returns a new sphere with the same [page:.center center] and [page:.radius radius] as this one."}, {"ret": "Boolean", "name": "containsPoint", "inside": "Sphere", "args": [["Vector3", "point"]], "ty": "method", "doc": "<i>>Vector3 point</i> - the <i>Vector3</i> to be checked"}, {"ret": "Sphere", "name": "copy", "inside": "Sphere", "args": [["Sphere", "sphere"]], "ty": "method", "doc": "Copies the values of the passed sphere's [page:.center center] and [page:.radius radius] properties to this sphere."}, {"ret": "Float", "name": "distanceToPoint", "inside": "Sphere", "args": [["Vector3", "point"]], "ty": "method", "doc": "Returns the closest distance from the boundary of the sphere to the <i>>Vector3 point</i>. If the sphere contains the point, the distance will be negative."}, {"ret": "Boolean", "name": "empty", "inside": "Sphere", "args": [], "ty": "method", "doc": "Checks to see if the sphere is empty (the radius set to 0)."}, {"ret": "Boolean", "name": "equals", "inside": "Sphere", "args": [["Sphere", "sphere"]], "ty": "method", "doc": "Checks to see if the two spheres' centers and radii are equal."}, {"ret": "Box3", "name": "getBoundingBox", "inside": "Sphere", "args": [["Box3", "target"]], "ty": "method", "doc": "<i>>Box3 target</i> \u2014 the result will be copied into this Box3."}, {"ret": "Boolean", "name": "intersectsBox", "inside": "Sphere", "args": [["Box3", "box"]], "ty": "method", "doc": "<i>>Box3 box</i> - <i>Box3</i> to check for intersection against."}, {"ret": "Boolean", "name": "intersectsPlane", "inside": "Sphere", "args": [["Plane", "plane"]], "ty": "method", "doc": "<i>>Plane plane</i> - Plane to check for intersection against."}, {"ret": "Boolean", "name": "intersectsSphere", "inside": "Sphere", "args": [["Sphere", "sphere"]], "ty": "method", "doc": "<i>>Sphere sphere</i> - Sphere to check for intersection against."}, {"ret": "Sphere", "name": "set", "inside": "Sphere", "args": [["Vector3", "center"], ["Float", "radius"]], "ty": "method", "doc": "<i>>Vector3 center</i> - center of the sphere."}, {"ret": "Sphere", "name": "setFromPoints", "inside": "Sphere", "args": [["Array", "points"], ["Vector3", "optionalCenter"]], "ty": "method", "doc": "<i>>Array points</i> - an <i>Array</i> of <i>Vector3</i> positions."}, {"ret": "Sphere", "name": "translate", "inside": "Sphere", "args": [["Vector3", "offset"]], "ty": "method", "doc": "Translate the sphere's center by the provided offset <i>Vector3</i>."}] ,
[{"inside": "Box3", "args": [["Vector3", "min"], ["Vector3", "max"]], "ty": "constructor", "doc": "<i>>Vector3 min</i> - (optional) <i>Vector3</i> representing the lower (x, y, z) boundary of the box. Default is ( + Infinity, + Infinity, + Infinity )."}, {"ret": "Boolean", "name": "isBox3", "inside": "Box3", "ty": "property", "doc": "Used to check whether this or derived classes are Box3s. Default is *true*."}, {"ret": "Vector3", "name": "min", "inside": "Box3", "ty": "property", "doc": "<i>Vector3</i> representing the lower (x, y, z) boundary of the box."}, {"ret": "Vector3", "name": "max", "inside": "Box3", "ty": "property", "doc": "<i>Vector3</i> representing the upper (x, y, z) boundary of the box."}, {"ret": "Box3", "name": "applyMatrix4", "inside": "Box3", "args": [["Matrix4", "matrix"]], "ty": "method", "doc": "<i>>Matrix4 matrix</i> - The <i>Matrix4</i> to apply"}, {"ret": "Vector3", "name": "clampPoint", "inside": "Box3", "args": [["Vector3", "point"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 point</i> - <i>Vector3</i> to clamp."}, {"ret": "Box3", "name": "clone", "inside": "Box3", "args": [], "ty": "method", "doc": "Returns a new <i>Box3</i> with the same [page:.min min] and [page:.max max] as this one."}, {"ret": "Boolean", "name": "containsBox", "inside": "Box3", "args": [["Box3", "box"]], "ty": "method", "doc": "<i>>Box3 box</i> - <i>>Box3 Box3</i> to test for inclusion."}, {"ret": "Boolean", "name": "containsPoint", "inside": "Box3", "args": [["Vector3", "point"]], "ty": "method", "doc": "<i>>Vector3 point</i> - <i>Vector3</i> to check for inclusion."}, {"ret": "Box3", "name": "copy", "inside": "Box3", "args": [["Box3", "box"]], "ty": "method", "doc": "<i>>Box3 box</i> - <i>Box3</i> to copy."}, {"ret": "Float", "name": "distanceToPoint", "inside": "Box3", "args": [["Vector3", "point"]], "ty": "method", "doc": "<i>>Vector3 point</i> - <i>Vector3</i> to measure distance to."}, {"ret": "Boolean", "name": "equals", "inside": "Box3", "args": [["Box3", "box"]], "ty": "method", "doc": "<i>>Box3 box</i> - Box to compare with this one."}, {"ret": "Box3", "name": "expandByObject", "inside": "Box3", "args": [["Object3D", "object"]], "ty": "method", "doc": "<i>>Object3D object</i> - <i>Object3D</i> to expand the box by."}, {"ret": "Box3", "name": "expandByPoint", "inside": "Box3", "args": [["Vector3", "point"]], "ty": "method", "doc": "<i>>Vector3 point</i> - <i>Vector3</i> that should be included in the box."}, {"ret": "Box3", "name": "expandByScalar", "inside": "Box3", "args": [["float", "scalar"]], "ty": "method", "doc": "<i>>float scalar</i> - Distance to expand the box by."}, {"ret": "Box3", "name": "expandByVector", "inside": "Box3", "args": [["Vector3", "vector"]], "ty": "method", "doc": "<i>>Vector3 vector</i> - <i>Vector3</i> to expand the box by."}, {"ret": "Sphere", "name": "getBoundingSphere", "inside": "Box3", "args": [["Sphere", "target"]], "ty": "method", "doc": "<i>>Sphere target</i> \u2014 the result will be copied into this Sphere."}, {"ret": "Vector3", "name": "getCenter", "inside": "Box3", "args": [["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 target</i> \u2014 the result will be copied into this Vector3."}, {"ret": "Vector3", "name": "getParameter", "inside": "Box3", "args": [["Vector3", "point"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 point</i> - <i>Vector3</i>."}, {"ret": "Vector3", "name": "getSize", "inside": "Box3", "args": [["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 target</i> \u2014 the result will be copied into this Vector3."}, {"ret": "Box3", "name": "intersect", "inside": "Box3", "args": [["Box3", "box"]], "ty": "method", "doc": "<i>>Box3 box</i> - Box to intersect with."}, {"ret": "Boolean", "name": "intersectsBox", "inside": "Box3", "args": [["Box3", "box"]], "ty": "method", "doc": "<i>>Box3 box</i> - Box to check for intersection against."}, {"ret": "Boolean", "name": "intersectsPlane", "inside": "Box3", "args": [["Plane", "plane"]], "ty": "method", "doc": "<i>>Plane plane</i> - <i>Plane</i> to check for intersection against."}, {"ret": "Boolean", "name": "intersectsSphere", "inside": "Box3", "args": [["Sphere", "sphere"]], "ty": "method", "doc": "<i>>Sphere sphere</i> - <i>Sphere</i> to check for intersection against."}, {"ret": "Boolean", "name": "intersectsTriangle", "inside": "Box3", "args": [["Triangle", "triangle"]], "ty": "method", "doc": "<i>>Triangle triangle</i> - <i>Triangle</i> to check for intersection against."}, {"ret": "Boolean", "name": "isEmpty", "inside": "Box3", "args": [], "ty": "method", "doc": "Returns true if this box includes zero points within its bounds."}, {"ret": "Box3", "name": "makeEmpty", "inside": "Box3", "args": [], "ty": "method", "doc": "Makes this box empty."}, {"ret": "Box3", "name": "set", "inside": "Box3", "args": [["Vector3", "min"], ["Vector3", "max"]], "ty": "method", "doc": "<i>>Vector3 min</i> - <i>Vector3</i> representing the lower (x, y, z) boundary of the box."}, {"ret": "Box3", "name": "setFromArray", "inside": "Box3", "args": [["Array", "array"]], "ty": "method", "doc": "array -- An array of position data that the resulting box will envelop."}, {"ret": "Box3", "name": "setFromBufferAttribute", "inside": "Box3", "args": [["BufferAttribute", "attribute"]], "ty": "method", "doc": "<i>>BufferAttribute attribute</i> - A buffer attribute of position data that the resulting box will envelop."}, {"ret": "Box3", "name": "setFromCenterAndSize", "inside": "Box3", "args": [["Vector3", "center"], ["Vector3", "size"]], "ty": "method", "doc": "<i>>Vector3 center</i> - Desired center position of the box (<i>Vector3</i>)."}, {"ret": "Box3", "name": "setFromCenterAndSize", "inside": "Box3", "args": [["Vector3", "center"], ["Vector3", "size"]], "ty": "method", "doc": "<i>>Vector3 center</i>, - Desired center position of the box."}, {"ret": "Box3", "name": "setFromObject", "inside": "Box3", "args": [["Object3D", "object"]], "ty": "method", "doc": "<i>>Object3D object</i> - <i>Object3D</i> to compute the bounding box of."}, {"ret": "Box3", "name": "setFromPoints", "inside": "Box3", "args": [["Array", "points"]], "ty": "method", "doc": "<i>>Array points</i> - Array of <i>>Vector3 Vector3s</i> that the resulting box will contain."}, {"ret": "Box3", "name": "translate", "inside": "Box3", "args": [["Vector3", "offset"]], "ty": "method", "doc": "<i>>Vector3 offset</i> - Direction and distance of offset."}, {"ret": "Box3", "name": "union", "inside": "Box3", "args": [["Box3", "box"]], "ty": "method", "doc": "<i>>Box3 box</i> - Box that will be unioned with this box."}] ,
[{"inside": "LinearInterpolant", "args": [], "ty": "constructor", "doc": "parameterPositions -- array of positions"}, {"ret": "null", "name": "parameterPositions", "inside": "LinearInterpolant", "ty": "property"}, {"ret": "null", "name": "resultBuffer", "inside": "LinearInterpolant", "ty": "property"}, {"ret": "null", "name": "sampleValues", "inside": "LinearInterpolant", "ty": "property"}, {"ret": "Object", "name": "settings", "inside": "LinearInterpolant", "ty": "property"}, {"ret": "null", "name": "valueSize", "inside": "LinearInterpolant", "ty": "property", "doc": "Methods"}, {"ret": "null", "name": "evaluate", "inside": "LinearInterpolant", "args": [["Number", "t"]], "ty": "method", "doc": "Evaluate the interpolant at position *t*."}] ,
[{"inside": "CubicInterpolant", "args": [], "ty": "constructor", "doc": "parameterPositions -- array of positions"}, {"ret": "null", "name": "parameterPositions", "inside": "CubicInterpolant", "ty": "property"}, {"ret": "null", "name": "resultBuffer", "inside": "CubicInterpolant", "ty": "property"}, {"ret": "null", "name": "sampleValues", "inside": "CubicInterpolant", "ty": "property"}, {"ret": "Object", "name": "settings", "inside": "CubicInterpolant", "ty": "property"}, {"ret": "null", "name": "valueSize", "inside": "CubicInterpolant", "ty": "property", "doc": "Methods"}, {"ret": "null", "name": "evaluate", "inside": "CubicInterpolant", "args": [["Number", "t"]], "ty": "method", "doc": "Evaluate the interpolant at position *t*."}] ,
[{"inside": "DiscreteInterpolant", "args": [], "ty": "constructor", "doc": "parameterPositions -- array of positions"}, {"ret": "null", "name": "parameterPositions", "inside": "DiscreteInterpolant", "ty": "property"}, {"ret": "null", "name": "resultBuffer", "inside": "DiscreteInterpolant", "ty": "property"}, {"ret": "null", "name": "sampleValues", "inside": "DiscreteInterpolant", "ty": "property"}, {"ret": "Object", "name": "settings", "inside": "DiscreteInterpolant", "ty": "property"}, {"ret": "null", "name": "valueSize", "inside": "DiscreteInterpolant", "ty": "property", "doc": "Methods"}, {"ret": "null", "name": "evaluate", "inside": "DiscreteInterpolant", "args": [["Number", "t"]], "ty": "method", "doc": "Evaluate the interpolant at position *t*."}] ,
[{"inside": "QuaternionLinearInterpolant", "args": [], "ty": "constructor", "doc": "parameterPositions -- array of positions"}, {"ret": "null", "name": "parameterPositions", "inside": "QuaternionLinearInterpolant", "ty": "property"}, {"ret": "null", "name": "resultBuffer", "inside": "QuaternionLinearInterpolant", "ty": "property"}, {"ret": "null", "name": "sampleValues", "inside": "QuaternionLinearInterpolant", "ty": "property"}, {"ret": "Object", "name": "settings", "inside": "QuaternionLinearInterpolant", "ty": "property"}, {"ret": "null", "name": "valueSize", "inside": "QuaternionLinearInterpolant", "ty": "property", "doc": "Methods"}, {"ret": "null", "name": "evaluate", "inside": "QuaternionLinearInterpolant", "args": [["Number", "t"]], "ty": "method", "doc": "Evaluate the interpolant at position *t*."}] ,
[{"inside": "Vector4", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"], ["Float", "w"]], "ty": "constructor", "doc": "<i>>Float x</i> - the x value of the vector. Default is *0*."}, {"ret": "Boolean", "name": "isVector4", "inside": "Vector4", "ty": "property", "doc": "Used to check whether this or derived classes are Vector4s. Default is *true*."}, {"ret": "Float", "name": "x", "inside": "Vector4", "ty": "property"}, {"ret": "Float", "name": "y", "inside": "Vector4", "ty": "property"}, {"ret": "Float", "name": "z", "inside": "Vector4", "ty": "property"}, {"ret": "Float", "name": "w", "inside": "Vector4", "ty": "property", "doc": "Methods"}, {"ret": "this", "name": "add", "inside": "Vector4", "args": [["Vector4", "v"]], "ty": "method", "doc": "Adds <i>>Vector4 v</i> to this vector."}, {"ret": "this", "name": "addScalar", "inside": "Vector4", "args": [["Float", "s"]], "ty": "method", "doc": "Adds the scalar value s to this vector's [page:.x x], [page:.y y], [page:.z z] and [page:.w w] values."}, {"ret": "this", "name": "addScaledVector", "inside": "Vector4", "args": [["Vector4", "v"], ["Float", "s"]], "ty": "method", "doc": "Adds the multiple of <i>>Vector4 v</i> and <i>>Float s</i> to this vector."}, {"ret": "this", "name": "addVectors", "inside": "Vector4", "args": [["Vector4", "a"], ["Vector4", "b"]], "ty": "method", "doc": "Sets this vector to <i>>Vector4 a</i> + <i>>Vector4 b</i>."}, {"ret": "this", "name": "applyMatrix4", "inside": "Vector4", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Multiplies this vector by 4 x 4 <i>>Matrix4 m</i>."}, {"ret": "this", "name": "ceil", "inside": "Vector4", "args": [], "ty": "method", "doc": "The [page:.x x], [page:.y y], [page:.z z] and [page:.w w] components of the vector are rounded up to the nearest integer value."}, {"ret": "this", "name": "clamp", "inside": "Vector4", "args": [["Vector4", "min"], ["Vector4", "max"]], "ty": "method", "doc": "<i>>Vector4 min</i> - the minimum [page:.x x], [page:.y y], [page:.z z] and [page:.w w] values."}, {"ret": "this", "name": "clampLength", "inside": "Vector4", "args": [["Float", "min"], ["Float", "max"]], "ty": "method", "doc": "<i>>Float min</i> - the minimum value the length will be clamped to"}, {"ret": "this", "name": "clampScalar", "inside": "Vector4", "args": [["Float", "min"], ["Float", "max"]], "ty": "method", "doc": "<i>>Float min</i> - the minimum value the components will be clamped to"}, {"ret": "Vector4", "name": "clone", "inside": "Vector4", "args": [], "ty": "method", "doc": "Returns a new Vector4 with the same [page:.x x], [page:.y y], [page:.z z] and [page:.w w] values as this one."}, {"ret": "this", "name": "copy", "inside": "Vector4", "args": [["Vector4", "v"]], "ty": "method", "doc": "Copies the values of the passed Vector4's [page:.x x], [page:.y y], [page:.z z] and [page:.w w] properties to this Vector4."}, {"ret": "this", "name": "divideScalar", "inside": "Vector4", "args": [["Float", "s"]], "ty": "method", "doc": "Divides this vector by scalar <i>>Float s</i>."}, {"ret": "Float", "name": "dot", "inside": "Vector4", "args": [["Vector4", "v"]], "ty": "method", "doc": "Calculates the product of this vector and <i>>Vector4 v</i>."}, {"ret": "Boolean", "name": "equals", "inside": "Vector4", "args": [["Vector4", "v"]], "ty": "method", "doc": "Checks for strict equality of this vector and <i>>Vector4 v</i>."}, {"ret": "this", "name": "floor", "inside": "Vector4", "args": [], "ty": "method", "doc": "The components of the vector are rounded down to the nearest integer value."}, {"ret": "this", "name": "fromArray", "inside": "Vector4", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - the source array."}, {"ret": "this", "name": "fromBufferAttribute", "inside": "Vector4", "args": [["BufferAttribute", "attribute"], ["Integer", "index"]], "ty": "method", "doc": "<i>>BufferAttribute attribute</i> - the source attribute."}, {"ret": "Float", "name": "getComponent", "inside": "Vector4", "args": [["Integer", "index"]], "ty": "method", "doc": "<i>>Integer index</i> - 0, 1, 2 or 3."}, {"ret": "Float", "name": "length", "inside": "Vector4", "args": [], "ty": "method", "doc": "Computes the length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w)."}, {"ret": "Float", "name": "manhattanLength", "inside": "Vector4", "args": [], "ty": "method", "doc": "Computes the length of this vector."}, {"ret": "Float", "name": "lengthSq", "inside": "Vector4", "args": [], "ty": "method", "doc": "Computes the square of the length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should compare the length squared instead as it is slightly more efficient to calculate."}, {"ret": "this", "name": "lerp", "inside": "Vector4", "args": [["Vector4", "v"], ["Float", "alpha"]], "ty": "method", "doc": "<i>>Vector4 v</i> - <i>Vector4</i> to interpolate towards."}, {"ret": "this", "name": "lerpVectors", "inside": "Vector4", "args": [["Vector4", "v1"], ["Vector4", "v2"], ["Float", "alpha"]], "ty": "method", "doc": "<i>>Vector4 v1</i> - the starting <i>Vector4</i>."}, {"ret": "this", "name": "negate", "inside": "Vector4", "args": [], "ty": "method", "doc": "Inverts this vector - i.e. sets x = -x, y = -y, z = -z and w = -w."}, {"ret": "this", "name": "normalize", "inside": "Vector4", "args": [], "ty": "method", "doc": "Converts this vector to a length 1."}, {"ret": "this", "name": "max", "inside": "Vector4", "args": [["Vector4", "v"]], "ty": "method", "doc": "If this vector's x, y, z or w value is less than <i>>Vector4 v</i>'s x, y, z or w value, replace that value with the corresponding max value."}, {"ret": "this", "name": "min", "inside": "Vector4", "args": [["Vector4", "v"]], "ty": "method", "doc": "If this vector's x, y, z or w value is greater than <i>>Vector4 v</i>'s x, y, z or w value, replace that value with the corresponding min value."}, {"ret": "this", "name": "multiplyScalar", "inside": "Vector4", "args": [["Float", "s"]], "ty": "method", "doc": "Multiplies this vector by scalar <i>>Float s</i>."}, {"ret": "this", "name": "round", "inside": "Vector4", "args": [], "ty": "method", "doc": "The components of the vector are rounded to the nearest integer value."}, {"ret": "this", "name": "roundToZero", "inside": "Vector4", "args": [], "ty": "method", "doc": "The components of the vector are rounded towards zero (up if negative, down if positive) to an integer value."}, {"ret": "this", "name": "set", "inside": "Vector4", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"], ["Float", "w"]], "ty": "method", "doc": "Sets the [page:.x x], [page:.y y], [page:.z z] and [page:.w w] components of this vector."}, {"ret": "this", "name": "setAxisAngleFromQuaternion", "inside": "Vector4", "args": [["Quaterion", "q"]], "ty": "method", "doc": "<i>>Quaterion q</i> - a normalized <i>Quaterion</i>"}, {"ret": "this", "name": "setAxisAngleFromRotationMatrix", "inside": "Vector4", "args": [["Matrix4", "m"]], "ty": "method", "doc": "<i>>Matrix4 m</i> - a <i>Matrix4</i> of which the upper left 3x3 matrix is a pure rotation matrix."}, {"ret": "null", "name": "setComponent", "inside": "Vector4", "args": [["Integer", "index"], ["Float", "value"]], "ty": "method", "doc": "<i>>Integer index</i> - 0, 1 or 2."}, {"ret": "this", "name": "setLength", "inside": "Vector4", "args": [["Float", "l"]], "ty": "method", "doc": "Sets this vector to the vector with the same direction as this one, but [page:.length length] <i>>Float l</i>."}, {"ret": "this", "name": "setScalar", "inside": "Vector4", "args": [["Float", "scalar"]], "ty": "method", "doc": "Sets the [page:.x x], [page:.y y], [page:.z z] and [page:.w w] values of this vector both equal to <i>>Float scalar</i>."}, {"ret": "this", "name": "setX", "inside": "Vector4", "args": [["Float", "x"]], "ty": "method", "doc": "Replaces this vector's [page:.x x] value with <i>>Float x</i>."}, {"ret": "this", "name": "setY", "inside": "Vector4", "args": [["Float", "y"]], "ty": "method", "doc": "Replaces this vector's [page:.y y] value with <i>>Float y</i>."}, {"ret": "this", "name": "setZ", "inside": "Vector4", "args": [["Float", "z"]], "ty": "method", "doc": "Replaces this vector's [page:.z z] value with <i>>Float z</i>."}, {"ret": "this", "name": "setW", "inside": "Vector4", "args": [["Float", "w"]], "ty": "method", "doc": "Replaces this vector's [page:.w w] value with <i>>Float w</i>."}, {"ret": "this", "name": "sub", "inside": "Vector4", "args": [["Vector4", "v"]], "ty": "method", "doc": "Subtracts <i>>Vector4 v</i> from this vector."}, {"ret": "this", "name": "subScalar", "inside": "Vector4", "args": [["Float", "s"]], "ty": "method", "doc": "Subtracts <i>>Float s</i> from this vector's [page:.x x], [page:.y y], [page:.z z] and [page:.w w] compnents."}, {"ret": "this", "name": "subVectors", "inside": "Vector4", "args": [["Vector4", "a"], ["Vector4", "b"]], "ty": "method", "doc": "Sets this vector to <i>>Vector4 a</i> - <i>>Vector4 b</i>."}, {"ret": "Array", "name": "toArray", "inside": "Vector4", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - (optional) array to store the vector to. If this is not provided, a new array will be created."}] ,
[{"ret": "Float", "name": "clamp", "inside": "Math", "args": [["Float", "value"], ["Float", "min"], ["Float", "max"]], "ty": "method", "doc": "<i>>Float value</i> \u2014 Value to be clamped."}, {"ret": "Float", "name": "degToRad", "inside": "Math", "args": [["Float", "degrees"]], "ty": "method", "doc": "Converts degrees to radians."}, {"ret": "Integer", "name": "euclideanModulo", "inside": "Math", "args": [["Integer", "n"], ["Integer", "m"]], "ty": "method", "doc": "<i>>Integer n</i>, <i>>Integer m</i> - Integers"}, {"ret": "UUID", "name": "generateUUID", "inside": "Math", "args": [], "ty": "method", "doc": "Generate a UUID (universally unique identifier)."}, {"ret": "Boolean", "name": "isPowerOfTwo", "inside": "Math", "args": [["Number", "n"]], "ty": "method", "doc": "Return *true* if <i>>Number n</i> is a power of 2."}, {"ret": "Float", "name": "lerp", "inside": "Math", "args": [["Float", "x"], ["Float", "y"], ["Float", "t"]], "ty": "method", "doc": "<i>>Float x</i> - Start point."}, {"ret": "Float", "name": "mapLinear", "inside": "Math", "args": [["Float", "x"], ["Float", "a1"], ["Float", "a2"], ["Float", "b1"], ["Float", "b2"]], "ty": "method", "doc": "<i>>Float x</i> \u2014 Value to be mapped."}, {"ret": "Integer", "name": "ceilPowerOfTwo", "inside": "Math", "args": [["Number", "n"]], "ty": "method", "doc": "Returns the smallest power of 2 that is greater than or equal to <i>>Number n</i>."}, {"ret": "Integer", "name": "floorPowerOfTwo", "inside": "Math", "args": [["Number", "n"]], "ty": "method", "doc": "Returns the largest power of 2 that is less than or equal to <i>>Number n</i>."}, {"ret": "Float", "name": "radToDeg", "inside": "Math", "args": [["Float", "radians"]], "ty": "method", "doc": "Converts radians to degrees."}, {"ret": "Float", "name": "randFloat", "inside": "Math", "args": [["Float", "low"], ["Float", "high"]], "ty": "method", "doc": "Random float in the interval <i>>Float low</i> to <i>>Float high</i>."}, {"ret": "Float", "name": "randFloatSpread", "inside": "Math", "args": [["Float", "range"]], "ty": "method", "doc": "Random float in the interval *- <i>>Float range</i> / 2* to *<i>>Float range</i> / 2*."}, {"ret": "Integer", "name": "randInt", "inside": "Math", "args": [["Integer", "low"], ["Integer", "high"]], "ty": "method", "doc": "Random integer in the interval <i>>Float low</i> to <i>>Float high</i>."}, {"ret": "Float", "name": "smoothstep", "inside": "Math", "args": [["Float", "x"], ["Float", "min"], ["Float", "max"]], "ty": "method", "doc": "<i>>Float x</i> - The value to evaluate based on its position between min and max."}, {"ret": "Float", "name": "smootherstep", "inside": "Math", "args": [["Float", "x"], ["Float", "min"], ["Float", "max"]], "ty": "method", "doc": "<i>>Float x</i> - The value to evaluate based on its position between min and max."}] ,
[{"inside": "Quaternion", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"], ["Float", "w"]], "ty": "constructor", "doc": "<i>>Float x</i> - x coordinate"}, {"ret": "Float", "name": "x", "inside": "Quaternion", "ty": "property", "doc": "Changing this property will result in [page:.onChangeCallback onChangeCallback] being called."}, {"ret": "Float", "name": "y", "inside": "Quaternion", "ty": "property", "doc": "Changing this property will result in [page:.onChangeCallback onChangeCallback] being called."}, {"ret": "Float", "name": "z", "inside": "Quaternion", "ty": "property", "doc": "Changing this property will result in [page:.onChangeCallback onChangeCallback] being called."}, {"ret": "Float", "name": "w", "inside": "Quaternion", "ty": "property", "doc": "Changing this property will result in [page:.onChangeCallback onChangeCallback] being called."}, {"ret": "Float", "name": "angleTo", "inside": "Quaternion", "args": [["Quaternion", "q"]], "ty": "method", "doc": "Returns the angle between this quaternion and quaternion <i>>Quaternion q</i> in radians."}, {"ret": "Quaternion", "name": "clone", "inside": "Quaternion", "args": [], "ty": "method", "doc": "Creates a new Quaternion with identical [page:.x x], [page:.y y], [page:.z z] and [page:.w w] properties to this one."}, {"ret": "Quaternion", "name": "conjugate", "inside": "Quaternion", "args": [], "ty": "method", "doc": "Returns the rotational conjugate of this quaternion. The conjugate of a quaternion represents the same rotation in the opposite direction about the rotational axis."}, {"ret": "Quaternion", "name": "copy", "inside": "Quaternion", "args": [["Quaternion", "q"]], "ty": "method", "doc": "Copies the [page:.x x], [page:.y y], [page:.z z] and [page:.w w] properties of <i>>Quaternion q</i> into this quaternion."}, {"ret": "Boolean", "name": "equals", "inside": "Quaternion", "args": [["Quaternion", "v"]], "ty": "method", "doc": "<i>>Quaternion v</i> - Quaternion that this quaternion will be compared to."}, {"ret": "Float", "name": "dot", "inside": "Quaternion", "args": [["Quaternion", "v"]], "ty": "method", "doc": "Calculates the product of quaternions <i>>Quaternion v</i> and this one."}, {"ret": "Quaternion", "name": "fromArray", "inside": "Quaternion", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - array of format (x, y, z, w) used to construct the quaternion."}, {"ret": "Quaternion", "name": "inverse", "inside": "Quaternion", "args": [], "ty": "method", "doc": "Inverts this quaternion - calculate the [page:.conjugate conjugate] and then [page:.normalize normalizes] the result."}, {"ret": "Float", "name": "length", "inside": "Quaternion", "args": [], "ty": "method", "doc": "Computes the length (straight-line length) of this quaternion, considered as a 4 dimensional vector."}, {"ret": "Float", "name": "lengthSq", "inside": "Quaternion", "args": [], "ty": "method", "doc": "Computes the length()."}, {"ret": "Quaternion", "name": "normalize", "inside": "Quaternion", "args": [], "ty": "method", "doc": "length equal to *1*."}, {"ret": "Quaternion", "name": "multiply", "inside": "Quaternion", "args": [["Quaternion", "q"]], "ty": "method", "doc": "Multiplies this quaternion by <i>>Quaternion q</i>."}, {"ret": "Quaternion", "name": "multiplyQuaternions", "inside": "Quaternion", "args": [["Quaternion", "a"], ["Quaternion", "b"]], "ty": "method", "doc": "Sets this quaternion to <i>>Quaternion a</i> x <i>>Quaternion b</i>."}, {"ret": "Quaternion", "name": "onChange", "inside": "Quaternion", "args": [["Function", "onChangeCallback"]], "ty": "method", "doc": "Sets the [page:.onChangeCallback onChangeCallback]() method."}, {"ret": "Quaternion", "name": "onChangeCallback", "inside": "Quaternion", "args": [], "ty": "method", "doc": "This function is called whenever any of the following occurs:"}, {"ret": "Quaternion", "name": "premultiply", "inside": "Quaternion", "args": [["Quaternion", "q"]], "ty": "method", "doc": "Pre-multiplies this quaternion by <i>>Quaternion q</i>."}, {"ret": "Quaternion", "name": "rotateTowards", "inside": "Quaternion", "args": [["Quaternion", "q"], ["Float", "step"]], "ty": "method", "doc": "<i>>Quaternion q</i> - The target quaternion."}, {"ret": "Quaternion", "name": "slerp", "inside": "Quaternion", "args": [["Quaternion", "qb"], ["float", "t"]], "ty": "method", "doc": "<i>>Quaternion qb</i> - The other quaternion rotation"}, {"ret": "Quaternion", "name": "set", "inside": "Quaternion", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"], ["Float", "w"]], "ty": "method", "doc": "Sets [page:.x x], [page:.y y], [page:.z z], [page:.w w] properties of this quaternion."}, {"ret": "Quaternion", "name": "setFromAxisAngle", "inside": "Quaternion", "args": [["Vector3", "axis"], ["Float", "angle"]], "ty": "method", "doc": "Sets this quaternion from rotation specified by <i>>Vector3 axis</i> and <i>>Float angle</i>."}, {"ret": "Quaternion", "name": "setFromEuler", "inside": "Quaternion", "args": [["Euler", "euler"]], "ty": "method", "doc": "Sets this quaternion from the rotation specified by <i>Euler</i> angle."}, {"ret": "Quaternion", "name": "setFromRotationMatrix", "inside": "Quaternion", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Sets this quaternion from rotation component of <i>>Matrix4 m</i>."}, {"ret": "Quaternion", "name": "setFromUnitVectors", "inside": "Quaternion", "args": [["Vector3", "vFrom"], ["Vector3", "vTo"]], "ty": "method", "doc": "Sets this quaternion to the rotation required to rotate direction vector <i>>Vector3 vFrom</i> to direction vector <i>>Vector3 vTo</i>."}, {"ret": "Array", "name": "toArray", "inside": "Quaternion", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - An optional array to store the quaternion. If not specified, a new array will be created."}, {"ret": "Quaternion", "name": "slerp", "inside": "Quaternion", "args": [["Quaternion", "qStart"], ["Quaternion", "qEnd"], ["Quaternion", "qTarget"], ["Float", "t"]], "ty": "method", "doc": "<i>>Quaternion qStart</i> - The starting quaternion (where <i>>Float t</i> is 0)"}, {"ret": "null", "name": "slerpFlat", "inside": "Quaternion", "args": [["Array", "dst"], ["Integer", "dstOffset"], ["Array", "src0"], ["Integer", "srcOffset0"], ["Array", "src1"], ["Integer", "srcOffset1"], ["Float", "t"]], "ty": "method", "doc": "<i>>Array dst</i> - The output array."}] ,
[{"inside": "Matrix4", "args": [], "ty": "constructor", "doc": "Creates and initializes the [name] to the 4x4 matrix."}, {"ret": "Float32Array", "name": "elements", "inside": "Matrix4", "ty": "property", "doc": "A [link:https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order column-major] list of matrix values."}, {"ret": "Boolean", "name": "isMatrix4", "inside": "Matrix4", "ty": "property", "doc": "Used to check whether this or derived classes are Matrix4s. Default is *true*."}, {"ret": "Array", "name": "applyToBufferAttribute", "inside": "Matrix4", "args": [["BufferAttribute", "attribute"]], "ty": "method", "doc": "<i>>BufferAttribute attribute</i> - An attribute of floats that represent 3D vectors."}, {"ret": "Matrix4", "name": "clone", "inside": "Matrix4", "args": [], "ty": "method", "doc": "Creates a new Matrix4 with identical [page:.elements elements] to this one."}, {"ret": "this", "name": "compose", "inside": "Matrix4", "args": [["Vector3", "position"], ["Quaternion", "quaternion"], ["Vector3", "scale"]], "ty": "method", "doc": "Sets this matrix to the transformation composed of <i>>Vector3 position</i>, <i>>Quaternion quaternion</i> and <i>>Vector3 scale</i>. Internally this calls [page:.makeRotationFromQuaternion makeRotationFromQuaternion]( <i>>Quaternion quaternion</i> ) followed by [page:.scale scale]( <i>>Vector3 scale</i> ), then finally [page:.setPosition setPosition]( <i>>Vector3 position</i> )."}, {"ret": "this", "name": "copy", "inside": "Matrix4", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Copies the [page:.elements elements] of matrix <i>>Matrix4 m</i> into this matrix."}, {"ret": "this", "name": "copyPosition", "inside": "Matrix4", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Copies the translation component of the supplied matrix <i>>Matrix4 m</i> into this matrix's translation component."}, {"ret": "null", "name": "decompose", "inside": "Matrix4", "args": [["Vector3", "position"], ["Quaternion", "quaternion"], ["Vector3", "scale"]], "ty": "method", "doc": "Decomposes this matrix into it's <i>>Vector3 position</i>, <i>>Quaternion quaternion</i> and <i>>Vector3 scale</i> components."}, {"ret": "Float", "name": "determinant", "inside": "Matrix4", "args": [], "ty": "method", "doc": "Computes and returns the determinant of this matrix."}, {"ret": "Boolean", "name": "equals", "inside": "Matrix4", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Return true if this matrix and <i>>Matrix4 m</i> are equal."}, {"ret": "this", "name": "extractBasis", "inside": "Matrix4", "args": [["Vector3", "xAxis"], ["Vector3", "yAxis"], ["Vector3", "zAxis"]], "ty": "method", "doc": "Extracts the basis of this matrix into the three axis vectors provided. If this matrix is:"}, {"ret": "this", "name": "extractRotation", "inside": "Matrix4", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Extracts the rotation component of the supplied matrix <i>>Matrix4 m</i> into this matrix's rotation component."}, {"ret": "this", "name": "fromArray", "inside": "Matrix4", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - the array to read the elements from."}, {"ret": "this", "name": "getInverse", "inside": "Matrix4", "args": [["Matrix4", "m"], ["Boolean", "throwOnDegenerate"]], "ty": "method", "doc": "<i>>Matrix4 m</i> - the matrix to take the inverse of."}, {"ret": "Float", "name": "getMaxScaleOnAxis", "inside": "Matrix4", "args": [], "ty": "method", "doc": "Gets the maximum scale value of the 3 axes."}, {"ret": "this", "name": "identity", "inside": "Matrix4", "args": [], "ty": "method", "doc": "Resets this matrix to the matrix."}, {"ret": "this", "name": "lookAt", "inside": "Matrix4", "args": [["Vector3", "eye"], ["Vector3", "center"], ["Vector3", "up"]], "ty": "method", "doc": "Constructs a rotation matrix, looking from <i>>Vector3 eye</i> towards <i>>Vector3 center</i> oriented by the <i>>Vector3 up</i> vector."}, {"ret": "this", "name": "makeRotationAxis", "inside": "Matrix4", "args": [["Vector3", "axis"], ["Float", "theta"]], "ty": "method", "doc": "<i>>Vector3 axis</i> \u2014 Rotation axis, should be normalized."}, {"ret": "this", "name": "makeBasis", "inside": "Matrix4", "args": [["Vector3", "xAxis"], ["Vector3", "yAxis"], ["Vector3", "zAxis"]], "ty": "method", "doc": "Set this to the basis matrix consisting of the three provided basis vectors:"}, {"ret": "this", "name": "makePerspective", "inside": "Matrix4", "args": [["Float", "left"], ["Float", "right"], ["Float", "top"], ["Float", "bottom"], ["Float", "near"], ["Float", "far"]], "ty": "method", "doc": "Creates a projection matrix. This is used internally by [page:PerspectiveCamera.updateProjectionMatrix]()"}, {"ret": "this", "name": "makeOrthographic", "inside": "Matrix4", "args": [["Float", "left"], ["Float", "right"], ["Float", "top"], ["Float", "bottom"], ["Float", "near"], ["Float", "far"]], "ty": "method", "doc": "Creates an projection matrix. This is used internally by [page:OrthographicCamera.updateProjectionMatrix]()."}, {"ret": "this", "name": "makeRotationFromEuler", "inside": "Matrix4", "args": [["Euler", "euler"]], "ty": "method", "doc": "Sets the rotation component (the upper left 3x3 matrix) of this matrix to the rotation specified by the given [page:Euler Euler Angle]. The rest of the matrix is set to the identity. Depending on the <i>Euler.order</i> of the <i>>Euler euler</i>, there are six possible outcomes. See page for a complete list."}, {"ret": "this", "name": "makeRotationFromQuaternion", "inside": "Matrix4", "args": [["Quaternion", "q"]], "ty": "method", "doc": "Sets the rotation component of this matrix to the rotation specified by <i>>Quaternion q</i>, as outlined here. The rest of the matrix is set to the identity. So, given <i>>Quaternion q</i> = w + xi + yj + zk, the resulting matrix will be:"}, {"ret": "this", "name": "makeRotationX", "inside": "Matrix4", "args": [["Float", "theta"]], "ty": "method", "doc": "<i>>Float theta</i> \u2014 Rotation angle in radians."}, {"ret": "this", "name": "makeRotationY", "inside": "Matrix4", "args": [["Float", "theta"]], "ty": "method", "doc": "<i>>Float theta</i> \u2014 Rotation angle in radians."}, {"ret": "this", "name": "makeRotationZ", "inside": "Matrix4", "args": [["Float", "theta"]], "ty": "method", "doc": "<i>>Float theta</i> \u2014 Rotation angle in radians."}, {"ret": "this", "name": "makeScale", "inside": "Matrix4", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"]], "ty": "method", "doc": "<i>>Float x</i> - the amount to scale in the X axis."}, {"ret": "this", "name": "makeShear", "inside": "Matrix4", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"]], "ty": "method", "doc": "<i>>Float x</i> - the amount to shear in the X axis."}, {"ret": "this", "name": "makeTranslation", "inside": "Matrix4", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"]], "ty": "method", "doc": "<i>>Float x</i> - the amount to translate in the X axis."}, {"ret": "this", "name": "multiply", "inside": "Matrix4", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Post-multiplies this matrix by <i>>Matrix4 m</i>."}, {"ret": "this", "name": "multiplyMatrices", "inside": "Matrix4", "args": [["Matrix4", "a"], ["Matrix4", "b"]], "ty": "method", "doc": "Sets this matrix to <i>>Matrix4 a</i> x <i>>Matrix4 b</i>."}, {"ret": "this", "name": "multiplyScalar", "inside": "Matrix4", "args": [["Float", "s"]], "ty": "method", "doc": "Multiplies every component of the matrix by a scalar value <i>>Float s</i>."}, {"ret": "this", "name": "premultiply", "inside": "Matrix4", "args": [["Matrix4", "m"]], "ty": "method", "doc": "Pre-multiplies this matrix by <i>>Matrix4 m</i>."}, {"ret": "this", "name": "scale", "inside": "Matrix4", "args": [["Vector3", "v"]], "ty": "method", "doc": "Multiplies the columns of this matrix by vector <i>>Vector3 v</i>."}, {"ret": "this", "name": "set", "inside": "Matrix4", "args": [["Float", "n11"], ["Float", "n12"], ["Float", "n13"], ["Float", "n14"], ["Float", "n21"], ["Float", "n22"], ["Float", "n23"], ["Float", "n24"], ["Float", "n31"], ["Float", "n32"], ["Float", "n33"], ["Float", "n34"], ["Float", "n41"], ["Float", "n42"], ["Float", "n43"], ["Float", "n44"]], "ty": "method", "doc": "Set the [page:.elements elements] of this matrix to the supplied row-major values <i>>Float n11</i>, <i>>Float n12</i>, ... <i>>Float n44</i>."}, {"ret": "this", "name": "setPosition", "inside": "Matrix4", "args": [["Vector3", "v"]], "ty": "method", "doc": "Sets the position component for this matrix from vector <i>>Vector3 v</i>, without affecting the rest of the matrix - i.e. if the matrix is currently:"}, {"ret": "Array", "name": "toArray", "inside": "Matrix4", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - (optional) array to store the resulting vector in."}, {"ret": "this", "name": "transpose", "inside": "Matrix4", "args": [], "ty": "method", "doc": "Transposes this matrix."}] ,
[{"inside": "Plane", "args": [["Vector3", "normal"], ["Float", "constant"]], "ty": "constructor", "doc": "<i>>Vector3 normal</i> - (optional) a unit length <i>Vector3</i> defining the normal of the plane. Default is *(1, 0, 0)*."}, {"ret": "Vector3", "name": "normal", "inside": "Plane", "ty": "property"}, {"ret": "Float", "name": "constant", "inside": "Plane", "ty": "property", "doc": "Methods"}, {"ret": "Plane", "name": "applyMatrix4", "inside": "Plane", "args": [["Matrix4", "matrix"], ["Matrix3", "optionalNormalMatrix"]], "ty": "method", "doc": "<i>>Matrix4 matrix</i> - the [Page:Matrix4] to apply."}, {"ret": "Plane", "name": "clone", "inside": "Plane", "args": [], "ty": "method", "doc": "Returns a new plane with the same [page:.normal normal] and [page:.constant constant] as this one."}, {"ret": "Vector3", "name": "coplanarPoint", "inside": "Plane", "args": [["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 target</i> \u2014 the result will be copied into this Vector3."}, {"ret": "Plane", "name": "copy", "inside": "Plane", "args": [["Plane", "plane"]], "ty": "method", "doc": "Copies the values of the passed plane's [page:.normal normal] and [page:.constant constant] properties to this plane."}, {"ret": "Float", "name": "distanceToPoint", "inside": "Plane", "args": [["Vector3", "point"]], "ty": "method", "doc": "Returns the signed distance from the <i>>Vector3 point</i> to the plane."}, {"ret": "Float", "name": "distanceToSphere", "inside": "Plane", "args": [["Sphere", "sphere"]], "ty": "method", "doc": "Returns the signed distance from the <i>>Sphere sphere</i> to the plane."}, {"ret": "Boolean", "name": "equals", "inside": "Plane", "args": [["Plane", "plane"]], "ty": "method", "doc": "Checks to see if two planes are equal (their [page:.normal normal] and [page:.constant constant] properties match)."}, {"ret": "Vector3", "name": "intersectLine", "inside": "Plane", "args": [["Line3", "line"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Line3 line</i> - the <i>Line3</i> to check for intersection."}, {"ret": "Boolean", "name": "intersectsBox", "inside": "Plane", "args": [["Box3", "box"]], "ty": "method", "doc": "<i>>Box3 box</i> - the <i>Box3</i> to check for intersection."}, {"ret": "Boolean", "name": "intersectsLine", "inside": "Plane", "args": [["Line3", "line"]], "ty": "method", "doc": "<i>>Line3 line</i> - the <i>Line3</i> to check for intersection."}, {"ret": "Boolean", "name": "intersectsSphere", "inside": "Plane", "args": [["Sphere", "sphere"]], "ty": "method", "doc": "<i>>Sphere sphere</i> - the <i>Sphere</i> to check for intersection."}, {"ret": "Plane", "name": "negate", "inside": "Plane", "args": [], "ty": "method", "doc": "Negates both the normal vector and the constant."}, {"ret": "Plane", "name": "normalize", "inside": "Plane", "args": [], "ty": "method", "doc": "Normalizes the [page:.normal normal] vector, and adjusts the [page:.constant constant] value accordingly."}, {"ret": "Vector3", "name": "projectPoint", "inside": "Plane", "args": [["Vector3", "point"], ["Vector3", "target"]], "ty": "method", "doc": "<i>>Vector3 point</i> - the <i>Vector3</i> to project onto the plane."}, {"ret": "Plane", "name": "set", "inside": "Plane", "args": [["Vector3", "normal"], ["Float", "constant"]], "ty": "method", "doc": "<i>>Vector3 normal</i> - a unit length <i>Vector3</i> defining the normal of the plane."}, {"ret": "Plane", "name": "setComponents", "inside": "Plane", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"], ["Float", "w"]], "ty": "method", "doc": "<i>>Float x</i> - x value of the unit length normal vector."}, {"ret": "Plane", "name": "setFromCoplanarPoints", "inside": "Plane", "args": [["Vector3", "a"], ["Vector3", "b"], ["Vector3", "c"]], "ty": "method", "doc": "<i>>Vector3 a</i> - first point on the plane."}, {"ret": "Plane", "name": "setFromNormalAndCoplanarPoint", "inside": "Plane", "args": [["Vector3", "normal"], ["Vector3", "point"]], "ty": "method", "doc": "<i>>Vector3 normal</i> - a unit length <i>Vector3</i> defining the normal of the plane."}, {"ret": "Plane", "name": "translate", "inside": "Plane", "args": [["Vector3", "offset"]], "ty": "method", "doc": "<i>>Vector3 offset</i> - the amount to move the plane by."}] ,
[{"inside": "Color", "args": [["Color_Hex_or_String", "r"], ["Float", "g"], ["Float", "b"]], "ty": "constructor", "doc": "<i>>Color_Hex_or_String r</i> - (optional) If arguments <i>>Float g</i> and <i>>Float b</i> are defined, the red component of the color. If they are not defined, it can be a triplet (recommended), a CSS-style string, or another Color instance."}, {"ret": "Boolean", "name": "isColor", "inside": "Color", "ty": "property", "doc": "Used to check whether this or derived classes are Colors. Default is *true*."}, {"ret": "Float", "name": "r", "inside": "Color", "ty": "property", "doc": "Red channel value between 0 and 1. Default is 1."}, {"ret": "Float", "name": "g", "inside": "Color", "ty": "property", "doc": "Green channel value between 0 and 1. Default is 1."}, {"ret": "Float", "name": "b", "inside": "Color", "ty": "property", "doc": "Blue channel value between 0 and 1. Default is 1."}, {"ret": "Color", "name": "add", "inside": "Color", "args": [["Color", "color"]], "ty": "method", "doc": "Adds the RGB values of <i>>Color color</i> to the RGB values of this color."}, {"ret": "Color", "name": "addColors", "inside": "Color", "args": [["Color", "color1"], ["Color", "color2"]], "ty": "method", "doc": "Sets this color's RGB values to the sum of the RGB values of <i>>Color color1</i> and <i>>Color color2</i>."}, {"ret": "Color", "name": "addScalar", "inside": "Color", "args": [["Number", "s"]], "ty": "method", "doc": "Adds <i>>Number s</i> to the RGB values of this color."}, {"ret": "Color", "name": "clone", "inside": "Color", "args": [], "ty": "method", "doc": "Returns a new Color with the same [page:.r r], [page:.g g] and [page:.b b] values as this one."}, {"ret": "Color", "name": "copy", "inside": "Color", "args": [["Color", "color"]], "ty": "method", "doc": "Copies the [page:.r r], [page:.g g] and [page:.b b] parameters from <i>>Color color</i> in to this color."}, {"ret": "Color", "name": "convertGammaToLinear", "inside": "Color", "args": [["Float", "gammaFactor"]], "ty": "method", "doc": "<i>>Float gammaFactor</i> - (optional). Default is *2.0*."}, {"ret": "Color", "name": "convertLinearToGamma", "inside": "Color", "args": [["Float", "gammaFactor"]], "ty": "method", "doc": "<i>>Float gammaFactor</i> - (optional). Default is *2.0*."}, {"ret": "Color", "name": "convertLinearToSRGB", "inside": "Color", "args": [], "ty": "method", "doc": "Converts this color from linear space to sRGB space."}, {"ret": "Color", "name": "convertSRGBToLinear", "inside": "Color", "args": [], "ty": "method", "doc": "Converts this color from sRGB space to linear space."}, {"ret": "Color", "name": "copyGammaToLinear", "inside": "Color", "args": [["Color", "color"], ["Float", "gammaFactor"]], "ty": "method", "doc": "<i>>Color color</i> \u2014 Color to copy."}, {"ret": "Color", "name": "copyLinearToGamma", "inside": "Color", "args": [["Color", "color"], ["Float", "gammaFactor"]], "ty": "method", "doc": "<i>>Color color</i> \u2014 Color to copy."}, {"ret": "Color", "name": "copyLinearToSRGB", "inside": "Color", "args": [["Color", "color"]], "ty": "method", "doc": "<i>>Color color</i> \u2014 Color to copy."}, {"ret": "Color", "name": "copySRGBToLinear", "inside": "Color", "args": [["Color", "color"]], "ty": "method", "doc": "<i>>Color color</i> \u2014 Color to copy."}, {"ret": "Boolean", "name": "equals", "inside": "Color", "args": [["Color", "color"]], "ty": "method", "doc": "Compares the RGB values of <i>>Color color</i> with those of this object. Returns true if they are the same, false otherwise."}, {"ret": "Color", "name": "fromArray", "inside": "Color", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - <i>Array</i> of floats in the form [ <i>>Float r</i>, <i>>Float g</i>, <i>>Float b</i> ]."}, {"ret": "Integer", "name": "getHex", "inside": "Color", "args": [], "ty": "method", "doc": "Returns the hexadecimal value of this color."}, {"ret": "String", "name": "getHexString", "inside": "Color", "args": [], "ty": "method", "doc": "Returns the hexadecimal value of this color as a string (for example, 'FFFFFF')."}, {"ret": "Object", "name": "getHSL", "inside": "Color", "args": [["Object", "target"]], "ty": "method", "doc": "<i>>Object target</i> \u2014 the result will be copied into this Object. Adds h, s and l keys to the object (if not already present)."}, {"ret": "String", "name": "getStyle", "inside": "Color", "args": [], "ty": "method", "doc": "Returns the value of this color as a CSS style string. Example: 'rgb(255,0,0)'."}, {"ret": "Color", "name": "lerp", "inside": "Color", "args": [["Color", "color"], ["Float", "alpha"]], "ty": "method", "doc": "<i>>Color color</i> - color to converge on."}, {"ret": "Color", "name": "lerpHSL", "inside": "Color", "args": [["Color", "color"], ["Float", "alpha"]], "ty": "method", "doc": "<i>>Color color</i> - color to converge on."}, {"ret": "Color", "name": "multiply", "inside": "Color", "args": [["Color", "color"]], "ty": "method", "doc": "Multiplies this color's RGB values by the given <i>>Color color</i>'s RGB values."}, {"ret": "Color", "name": "multiplyScalar", "inside": "Color", "args": [["Number", "s"]], "ty": "method", "doc": "Multiplies this color's RGB values by <i>>Number s</i>."}, {"ret": "Color", "name": "offsetHSL", "inside": "Color", "args": [["Float", "h"], ["Float", "s"], ["Float", "l"]], "ty": "method", "doc": "Adds the given <i>>Float h</i>, <i>>Float s</i>, and <i>>Float l</i> to this color's values. Internally, this converts the color's [page:.r r], [page:.g g] and [page:.b b] values to HSL, adds <i>>Float h</i>, <i>>Float s</i>, and <i>>Float l</i>, and then converts the color back to RGB."}, {"ret": "Color", "name": "set", "inside": "Color", "args": [["Color_Hex_or_String", "value"]], "ty": "method", "doc": "<i>>Color_Hex_or_String value</i> - Value to set this color to."}, {"ret": "Color", "name": "setHex", "inside": "Color", "args": [["Integer", "hex"]], "ty": "method", "doc": "<i>>Integer hex</i> \u2014 triplet format."}, {"ret": "Color", "name": "setHSL", "inside": "Color", "args": [["Float", "h"], ["Float", "s"], ["Float", "l"]], "ty": "method", "doc": "<i>>Float h</i> \u2014 hue value between 0.0 and 1.0"}, {"ret": "Color", "name": "setRGB", "inside": "Color", "args": [["Float", "r"], ["Float", "g"], ["Float", "b"]], "ty": "method", "doc": "<i>>Float r</i> \u2014 Red channel value between 0.0 and 1.0."}, {"ret": "Color", "name": "setScalar", "inside": "Color", "args": [["Float", "scalar"]], "ty": "method", "doc": "<i>>Float scalar</i> \u2014 a value between 0.0 and 1.0."}, {"ret": "Color", "name": "setStyle", "inside": "Color", "args": [["String", "style"]], "ty": "method", "doc": "<i>>String style</i> \u2014 color as a CSS-style string."}, {"ret": "Color", "name": "sub", "inside": "Color", "args": [["Color", "color"]], "ty": "method", "doc": "Subtracts the RGB components of the given color from the RGB components of this color. If this results in a negative component, that component is set to zero."}, {"ret": "Array", "name": "toArray", "inside": "Color", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - An optional array to store the color to."}] ,
[{"inside": "Cylindrical", "args": [["Float", "radius"], ["Float", "theta"], ["Float", "y"]], "ty": "constructor", "doc": "<i>>Float radius</i> - distance from the origin to a point in the x-z plane. Default is *1.0*."}, {"ret": "Float", "name": "radius", "inside": "Cylindrical", "ty": "property"}, {"ret": "Float", "name": "theta", "inside": "Cylindrical", "ty": "property"}, {"ret": "Float", "name": "y", "inside": "Cylindrical", "ty": "property", "doc": "Methods"}, {"ret": "Cylindrical", "name": "clone", "inside": "Cylindrical", "args": [], "ty": "method", "doc": "Returns a new cylindrical with the same [page:.radius radius], [page:.theta theta] and [page:.y y] properties as this one."}, {"ret": "Cylindrical", "name": "copy", "inside": "Cylindrical", "args": [["Cylindrical", "other"]], "ty": "method", "doc": "Copies the values of the passed Cylindrical's [page:.radius radius], [page:.theta theta] and [page:.y y] properties to this cylindrical."}, {"ret": "Cylindrical", "name": "set", "inside": "Cylindrical", "args": [["Float", "radius"], ["Float", "theta"], ["Float", "y"]], "ty": "method", "doc": "Sets values of this cylindrical's [page:.radius radius], [page:.theta theta] and [page:.y y] properties."}, {"ret": "Cylindrical", "name": "setFromVector3", "inside": "Cylindrical", "args": [["Vector3", "vec3"]], "ty": "method", "doc": "Sets values of this cylindrical's [page:.radius radius], [page:.theta theta] and [page:.y y] properties from the <i>>Vector3 Vector3</i>."}, {"ret": "Cylindrical", "name": "setFromCartesianCoords", "inside": "Cylindrical", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"]], "ty": "method", "doc": "Sets values of this cylindrical's [page:.radius radius], [page:.theta theta] and [page:.y y] properties from Cartesian coordinates."}] ,
[{"inside": "Euler", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"], ["String", "order"]], "ty": "constructor", "doc": "<i>>Float x</i> - (optional) the angle of the x axis in radians. Default is *0*."}, {"ret": "Boolean", "name": "isEuler", "inside": "Euler", "ty": "property", "doc": "Used to check whether this or derived classes are Eulers. Default is *true*."}, {"ret": "String", "name": "order", "inside": "Euler", "ty": "property", "doc": "The order in which to apply rotations. Default is 'XYZ', which means that the object will first be rotated around its X axis, then its Y axis and finally its Z axis. Other possibilities are: 'YZX', 'ZXY', 'XZY', 'YXZ' and 'ZYX'. These must be in upper case."}, {"ret": "Float", "name": "x", "inside": "Euler", "ty": "property", "doc": "The current value of the x component."}, {"ret": "Float", "name": "y", "inside": "Euler", "ty": "property", "doc": "The current value of the y component."}, {"ret": "Float", "name": "z", "inside": "Euler", "ty": "property", "doc": "The current value of the z component."}, {"ret": "Euler", "name": "copy", "inside": "Euler", "args": [["Euler", "euler"]], "ty": "method", "doc": "Copies value of <i>>Euler euler</i> to this euler."}, {"ret": "Euler", "name": "clone", "inside": "Euler", "args": [], "ty": "method", "doc": "Returns a new Euler with the same parameters as this one."}, {"ret": "Boolean", "name": "equals", "inside": "Euler", "args": [["Euler", "euler"]], "ty": "method", "doc": "Checks for strict equality of this euler and <i>>Euler euler</i>."}, {"ret": "Euler", "name": "fromArray", "inside": "Euler", "args": [["Array", "array"]], "ty": "method", "doc": "<i>>Array array</i> of length 3 or 4. The optional 4th argument corresponds to the [page:.order order]."}, {"ret": "Euler", "name": "onChange", "inside": "Euler", "args": [["Function", "onChangeCallback"]], "ty": "method", "doc": "<i>>Function onChangeCallback</i> - set the value of the onChangeCallback() function."}, {"ret": "Euler", "name": "onChangeCallback", "inside": "Euler", "args": [], "ty": "method", "doc": "By default this is an empty function, however it can be set via [page:.onChange onChange]()."}, {"ret": "Euler", "name": "reorder", "inside": "Euler", "args": [["String", "newOrder"]], "ty": "method", "doc": "Resets the euler angle with a new order by creating a quaternion from this euler angle and then setting this euler angle with the quaternion and the new order."}, {"ret": "Euler", "name": "set", "inside": "Euler", "args": [["Float", "x"], ["Float", "y"], ["Float", "z"], ["String", "order"]], "ty": "method", "doc": "[page:.x x] - the angle of the x axis in radians."}, {"ret": "Euler", "name": "setFromRotationMatrix", "inside": "Euler", "args": [["Matrix4", "m"], ["String", "order"], ["Boolean", "update"]], "ty": "method", "doc": "<i>>Matrix4 m</i> - a <i>Matrix4</i> of which the upper 3x3 of matrix is a pure matrix (i.e. unscaled)."}, {"ret": "Euler", "name": "setFromQuaternion", "inside": "Euler", "args": [["Quaternion", "q"], ["String", "order"], ["Boolean", "update"]], "ty": "method", "doc": "<i>>Quaternion q</i> - a normalized quaternion."}, {"ret": "Euler", "name": "setFromVector3", "inside": "Euler", "args": [["Vector3", "vector"], ["String", "order"]], "ty": "method", "doc": "<i>>Vector3 vector</i> - <i>Vector3</i>."}, {"ret": "Array", "name": "toArray", "inside": "Euler", "args": [["Array", "array"], ["Integer", "offset"]], "ty": "method", "doc": "<i>>Array array</i> - (optional) array to store the euler in."}, {"ret": "Vector3", "name": "toVector3", "inside": "Euler", "args": [["Vector3", "optionalResult"]], "ty": "method", "doc": "<i>>Vector3 optionalResult</i> \u2014 (optional) If specified, the result will be copied into this Vector, otherwise a new one will be created."}] ,
[{"inside": "Audio", "args": [["AudioListener", "listener"]], "ty": "constructor", "doc": "listener \u2014 (required) <i>>AudioListener AudioListener</i> instance."}, {"ret": "Boolean", "name": "autoplay", "inside": "Audio", "ty": "property", "doc": "Whether to start playback automatically. Default is *false*."}, {"ret": "AudioContext", "name": "context", "inside": "Audio", "ty": "property", "doc": "The AudioContext of the <i>>AudioListener listener</i> given in the constructor."}, {"ret": "Array", "name": "filters", "inside": "Audio", "ty": "property", "doc": "Represents an array of BiquadFilterNodes. Can be used to apply a variety of low-order filters to create more complex sound effects. Filters are set via [page:Audio.setFilter] or [page:Audio.setFilters]."}, {"ret": "GainNode", "name": "gain", "inside": "Audio", "ty": "property", "doc": "A GainNode created using [link:https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createGain AudioContext.createGain]()."}, {"ret": "Boolean", "name": "hasPlaybackControl", "inside": "Audio", "ty": "property", "doc": "Whether playback can be controlled using the <i>Audio.play</i>(), <i>Audio.pause</i>() etc. methods. Default is *true*."}, {"ret": "Number", "name": "playbackRate", "inside": "Audio", "ty": "property", "doc": "Speed of playback. Default is *1*."}, {"ret": "Boolean", "name": "isPlaying", "inside": "Audio", "ty": "property", "doc": "Whether the audio is currently playing."}, {"ret": "Number", "name": "startTime", "inside": "Audio", "ty": "property", "doc": "The time at which the sound should begin to play. Same as the *when* paramter of [link:https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start AudioBufferSourceNode.start](). Default is *0*."}, {"ret": "Number", "name": "offset", "inside": "Audio", "ty": "property", "doc": "An offset to the time within the audio buffer that playback should begin. Same as the *offset* paramter of [link:https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start AudioBufferSourceNode.start](). Default is *0*."}, {"ret": "String", "name": "source", "inside": "Audio", "ty": "property", "doc": "An AudioBufferSourceNode created using [link:https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBufferSource AudioContext.createBufferSource]()."}, {"ret": "String", "name": "sourceType", "inside": "Audio", "ty": "property", "doc": "Type of the audio source. Default is string 'empty'."}, {"ret": "String", "name": "type", "inside": "Audio", "ty": "property", "doc": "String denoting the type, set to 'Audio'."}, {"ret": "Audio", "name": "connect", "inside": "Audio", "args": [], "ty": "method", "doc": "Connect to the [page:Audio.source]. This is used internally on initialisation and when setting / removing filters."}, {"ret": "Audio", "name": "disconnect", "inside": "Audio", "args": [], "ty": "method", "doc": "Disconnect from the [page:Audio.source]. This is used internally when setting / removing filters."}, {"ret": "BiquadFilterNode", "name": "getFilter", "inside": "Audio", "args": [], "ty": "method", "doc": "Returns the first element of the <i>Audio.filters</i> array."}, {"ret": "Array", "name": "getFilters", "inside": "Audio", "args": [], "ty": "method", "doc": "Returns the <i>Audio.filters</i> array."}, {"ret": "Boolean", "name": "getLoop", "inside": "Audio", "args": [], "ty": "method", "doc": "Return the value of [link:https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop source.loop] (whether playback should loop)."}, {"ret": "GainNode", "name": "getOutput", "inside": "Audio", "args": [], "ty": "method", "doc": "Return the <i>Audio.gain</i>."}, {"ret": "Float", "name": "getPlaybackRate", "inside": "Audio", "args": [], "ty": "method", "doc": "Return the value of <i>Audio.playbackRate</i>."}, {"ret": "Float", "name": "getVolume", "inside": "Audio", "args": [], "ty": "method", "doc": "Return the current volume."}, {"ret": "Audio", "name": "play", "inside": "Audio", "args": [], "ty": "method", "doc": "If <i>Audio.hasPlaybackControl</i> is true, starts playback."}, {"ret": "Audio", "name": "pause", "inside": "Audio", "args": [], "ty": "method", "doc": "If <i>Audio.hasPlaybackControl</i> is true, pauses playback."}, {"ret": "null", "name": "onEnded", "inside": "Audio", "args": [], "ty": "method", "doc": "Called automatically when playback finished. Sets If <i>Audio.isPlaying</i> to false."}, {"ret": "Audio", "name": "setBuffer", "inside": "Audio", "args": [], "ty": "method", "doc": "Setup the <i>Audio.source</i> to the audioBuffer, and sets <i>Audio.sourceType</i> to 'buffer'."}, {"ret": "Audio", "name": "setFilter", "inside": "Audio", "args": [], "ty": "method", "doc": "Applies a single BiquadFilterNode to the audio."}, {"ret": "Audio", "name": "setFilters", "inside": "Audio", "args": [["Array", "value"]], "ty": "method", "doc": "value - arrays of filters."}, {"ret": "Audio", "name": "setLoop", "inside": "Audio", "args": [["Boolean", "value"]], "ty": "method", "doc": "Set [link:https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop source.loop] to *value* (whether playback should loop)."}, {"ret": "Audio", "name": "setMediaElementSource", "inside": "Audio", "args": [], "ty": "method", "doc": "Applies the given object of type HTMLMediaElement as the source of this audio."}, {"ret": "Audio", "name": "setNodeSource", "inside": "Audio", "args": [], "ty": "method", "doc": "Setup the <i>Audio.source</i> to the audioBuffer, and sets <i>Audio.sourceType</i> to 'audioNode'."}, {"ret": "Audio", "name": "setPlaybackRate", "inside": "Audio", "args": [["Float", "value"]], "ty": "method", "doc": "If <i>Audio.hasPlaybackControl</i> is enabled, set the <i>Audio.playbackRate</i> to *value*."}, {"ret": "Audio", "name": "setVolume", "inside": "Audio", "args": [["Float", "value"]], "ty": "method", "doc": "Set the volume."}, {"ret": "Audio", "name": "stop", "inside": "Audio", "args": [], "ty": "method", "doc": "If <i>Audio.hasPlaybackControl</i> is enabled, stops playback, resets <i>Audio.startTime</i> to *0* and sets <i>Audio.isPlaying</i> to false."}] ,
[{"ret": "AudioContext", "name": "getContext", "inside": "AudioContext", "args": [], "ty": "method", "doc": "Return the value of the variable *context* in the outer scope, if defined, otherwise set it to a new AudioContext."}, {"ret": "AudioContext", "name": "setContext", "inside": "AudioContext", "args": [["AudioConetxt", "value"]], "ty": "method", "doc": "Set the variable *context* in the outer scope to *value*."}] ,
[{"inside": "AudioListener", "args": [], "ty": "constructor", "doc": "Create a new AudioListener."}, {"ret": "AudioContext", "name": "context", "inside": "AudioListener", "ty": "property", "doc": "The AudioContext of the <i>>AudioListener listener</i> given in the constructor."}, {"ret": "GainNode", "name": "gain", "inside": "AudioListener", "ty": "property", "doc": "A GainNode created using [link:https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createGain AudioContext.createGain]()."}, {"ret": "AudioNode", "name": "filter", "inside": "AudioListener", "ty": "property", "doc": "Default is *null*."}, {"ret": "GainNode", "name": "getInput", "inside": "AudioListener", "args": [], "ty": "method", "doc": "Return the <i>AudioListener.gain</i>."}, {"ret": "AudioListener", "name": "removeFilter", "inside": "AudioListener", "args": [], "ty": "method", "doc": "Set the <i>AudioListener.filter</i> property to *null*."}, {"ret": "AudioNode", "name": "getFilter", "inside": "AudioListener", "args": [], "ty": "method", "doc": "Returns the value of the <i>AudioListener.filter</i> property."}, {"ret": "AudioListener", "name": "setFilter", "inside": "AudioListener", "args": [["AudioNode", "value"]], "ty": "method", "doc": "Set the <i>AudioListener.filter</i> property to *value*."}, {"ret": "Float", "name": "getMasterVolume", "inside": "AudioListener", "args": [], "ty": "method", "doc": "Return the volume."}, {"ret": "AudioListener", "name": "setMasterVolume", "inside": "AudioListener", "args": [["Number", "value"]], "ty": "method", "doc": "Set the volume."}] ,
[{"inside": "AudioAnalyser", "args": [], "ty": "constructor", "doc": "Create a new <i>>AudioAnalyser AudioAnalyser</i>."}, {"ret": "AnalyserNode", "name": "analyser", "inside": "AudioAnalyser", "ty": "property", "doc": "An AnalyserNode used to analyze audio."}, {"ret": "Integer", "name": "fftSize", "inside": "AudioAnalyser", "ty": "property", "doc": "A non-zero power of two up to 2048, representing the size of the FFT (Fast Fourier Transform) to be used to determine the frequency domain. See page for details."}, {"ret": "Uint8Array", "name": "data", "inside": "AudioAnalyser", "ty": "property", "doc": "A Uint8Array with size determined by [link:https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount analyser.frequencyBinCount] used to hold analysis data."}, {"ret": "Uint8Array", "name": "getFrequencyData", "inside": "AudioAnalyser", "args": [], "ty": "method", "doc": "Uses the Web Audio's getByteFrequencyData method. See that page."}, {"ret": "Number", "name": "getAverageFrequency", "inside": "AudioAnalyser", "args": [], "ty": "method", "doc": "Get the average of the frequencies returned by the <i>AudioAnalyser.getFrequencyData</i> method."}] ,
[{"inside": "PositionalAudio", "args": [["AudioListener", "listener"]], "ty": "constructor", "doc": "listener \u2014 (required) <i>>AudioListener AudioListener</i> instance."}, {"ret": "PannerNode", "name": "panner", "inside": "PositionalAudio", "ty": "property", "doc": "The PositionalAudio's PannerNode."}, {"ret": "PannerNode", "name": "getOutput", "inside": "PositionalAudio", "args": [], "ty": "method", "doc": "Returns the <i>PositionalAudio.panner</i>."}, {"ret": "Float", "name": "getRefDistance", "inside": "PositionalAudio", "args": [], "ty": "method", "doc": "Returns the value of [link:https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance panner.refDistance]."}, {"ret": "PositionalAudio", "name": "setRefDistance", "inside": "PositionalAudio", "args": [["Float", "value"]], "ty": "method", "doc": "Sets the value of [link:https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance panner.refDistance]."}, {"ret": "Float", "name": "getRolloffFactor", "inside": "PositionalAudio", "args": [], "ty": "method", "doc": "Returns the value of [link:https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor panner.rolloffFactor]."}, {"ret": "PositionalAudio", "name": "setRolloffFactor", "inside": "PositionalAudio", "args": [["Float", "value"]], "ty": "method", "doc": "Sets the value of [link:https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor panner.rolloffFactor]."}, {"ret": "String", "name": "getDistanceModel", "inside": "PositionalAudio", "args": [], "ty": "method", "doc": "Returns the value of [link:https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel panner.distanceModel]."}, {"ret": "PositionalAudio", "name": "setDistanceModel", "inside": "PositionalAudio", "args": [["String", "value"]], "ty": "method", "doc": "Sets the value of [link:https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel panner.distanceModel]."}, {"ret": "Float", "name": "getMaxDistance", "inside": "PositionalAudio", "args": [], "ty": "method", "doc": "Returns the value of [link:https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance panner.maxDistance]."}, {"ret": "PositionalAudio", "name": "setMaxDistance", "inside": "PositionalAudio", "args": [["Float", "value"]], "ty": "method", "doc": "Sets the value of [link:https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance panner.maxDistance]."}, {"ret": "PositionalAudio", "name": "setDirectionalCone", "inside": "PositionalAudio", "args": [["Float", "coneInnerAngle"], ["Float", "coneOuterAngle"], ["Float", "coneOuterGain"]], "ty": "method", "doc": "This method can be used in order to transform an omnidirectional sound into a sound."}] ,
[{"inside": "TetrahedronGeometry", "args": [["Float", "radius"], ["Integer", "detail"]], "ty": "constructor", "doc": "radius \u2014 Radius of the tetrahedron. Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "TetrahedronGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "BoxGeometry", "args": [["Float", "width"], ["Float", "height"], ["Float", "depth"], ["Integer", "widthSegments"], ["Integer", "heightSegments"], ["Integer", "depthSegments"]], "ty": "constructor", "doc": "width \u2014 Width of the sides on the X axis. Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "BoxGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "TubeGeometry", "args": [["Curve", "path"], ["Integer", "tubularSegments"], ["Float", "radius"], ["Integer", "radialSegments"], ["Boolean", "closed"]], "ty": "constructor", "doc": "path \u2014 <i>Curve</i> - A path that inherits from the <i>Curve</i> base class"}, {"ret": "Object", "name": "parameters", "inside": "TubeGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}, {"ret": "Array", "name": "tangents", "inside": "TubeGeometry", "ty": "property", "doc": "An array of <i>Vector3</i> tangents"}, {"ret": "Array", "name": "normals", "inside": "TubeGeometry", "ty": "property", "doc": "An array of <i>Vector3</i> normals"}, {"ret": "Array", "name": "binormals", "inside": "TubeGeometry", "ty": "property", "doc": "An array of <i>Vector3</i> binormals"}] ,
[{"inside": "ExtrudeGeometry", "args": [["Array", "shapes"], ["Object", "options"]], "ty": "constructor", "doc": "shapes \u2014 Shape or an array of shapes."}, {"ret": "Object", "name": "parameters", "inside": "ExtrudeGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "DodecahedronBufferGeometry", "args": [["Float", "radius"], ["Integer", "detail"]], "ty": "constructor", "doc": "radius \u2014 Radius of the dodecahedron. Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "DodecahedronBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "PolyhedronBufferGeometry", "args": [["Array", "vertices"], ["Array", "indices"], ["Float", "radius"], ["Integer", "detail"]], "ty": "constructor", "doc": "vertices \u2014 <i>Array</i> of points of the form [1,1,1, -1,-1,-1, ... ]"}, {"ret": "Object", "name": "parameters", "inside": "PolyhedronBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "CylinderGeometry", "args": [["Float", "radiusTop"], ["Float", "radiusBottom"], ["Float", "height"], ["Integer", "radialSegments"], ["Integer", "heightSegments"], ["Boolean", "openEnded"], ["Float", "thetaStart"], ["Float", "thetaLength"]], "ty": "constructor", "doc": "radiusTop \u2014 Radius of the cylinder at the top. Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "CylinderGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "OctahedronBufferGeometry", "args": [["Float", "radius"], ["Integer", "detail"]], "ty": "constructor", "doc": "radius \u2014 Radius of the octahedron. Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "OctahedronBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "EdgesGeometry", "args": [["Geometry", "geometry"], ["Integer", "thresholdAngle"]], "ty": "constructor", "doc": "geometry \u2014 Any geometry object."}, {"ret": "Object", "name": "parameters", "inside": "EdgesGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "ExtrudeBufferGeometry", "args": [["Array", "shapes"], ["Object", "options"]], "ty": "constructor", "doc": "shapes \u2014 Shape or an array of shapes."}, {"ret": "Object", "name": "parameters", "inside": "ExtrudeBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "ShapeBufferGeometry", "args": [["Array", "shapes"], ["Integer", "curveSegments"]], "ty": "constructor", "doc": "shapes \u2014 <i>Array</i> of shapes or a single <i>>Shape shape</i>."}, {"ret": "Object", "name": "parameters", "inside": "ShapeBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "PlaneBufferGeometry", "args": [["Float", "width"], ["Float", "height"], ["Integer", "widthSegments"], ["Integer", "heightSegments"]], "ty": "constructor", "doc": "width \u2014 Width along the X axis. Default is 1."}] ,
[{"inside": "ParametricGeometry", "args": [["Function", "func"], ["Integer", "slices"], ["Integer", "stacks"]], "ty": "constructor", "doc": "func \u2014 A function that takes in a <i>>Float u</i> and <i>>Float v</i> value each between 0 and 1 and modifies a third <i>Vector3</i> argument"}, {"ret": "Object", "name": "parameters", "inside": "ParametricGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "SphereBufferGeometry", "args": [["Float", "radius"], ["Integer", "widthSegments"], ["Integer", "heightSegments"], ["Float", "phiStart"], ["Float", "phiLength"], ["Float", "thetaStart"], ["Float", "thetaLength"]], "ty": "constructor", "doc": "radius \u2014 sphere radius. Default is 1."}] ,
[{"inside": "BoxBufferGeometry", "args": [["Float", "width"], ["Float", "height"], ["Float", "depth"], ["Integer", "widthSegments"], ["Integer", "heightSegments"], ["Integer", "depthSegments"]], "ty": "constructor", "doc": "width \u2014 Width of the sides on the X axis. Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "BoxBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "LatheGeometry", "args": [["Array", "points"], ["Integer", "segments"], ["Float", "phiStart"], ["Float", "phiLength"]], "ty": "constructor", "doc": "points \u2014 Array of Vector2s. The x-coordinate of each point must be greater than zero."}, {"ret": "Object", "name": "parameters", "inside": "LatheGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "LatheBufferGeometry", "args": [["Array", "points"], ["Integer", "segments"], ["Float", "phiStart"], ["Float", "phiLength"]], "ty": "constructor", "doc": "points \u2014 Array of Vector2s. The x-coordinate of each point must be greater than zero."}, {"ret": "Object", "name": "parameters", "inside": "LatheBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "PlaneGeometry", "args": [["Float", "width"], ["Float", "height"], ["Integer", "widthSegments"], ["Integer", "heightSegments"]], "ty": "constructor", "doc": "width \u2014 Width along the X axis. Default is 1."}] ,
[{"inside": "CircleGeometry", "args": [["Float", "radius"], ["Integer", "segments"], ["Float", "thetaStart"], ["Float", "thetaLength"]], "ty": "constructor", "doc": "radius \u2014 Radius of the circle, default = 1."}, {"ret": "Object", "name": "parameters", "inside": "CircleGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "WireframeGeometry", "args": [["Geometry", "geometry"]], "ty": "constructor", "doc": "geometry \u2014 any geometry object."}] ,
[{"inside": "CircleBufferGeometry", "args": [["Float", "radius"], ["Integer", "segments"], ["Float", "thetaStart"], ["Float", "thetaLength"]], "ty": "constructor", "doc": "radius \u2014 Radius of the circle, default = 1."}, {"ret": "Object", "name": "parameters", "inside": "CircleBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "TetrahedronBufferGeometry", "args": [["Float", "radius"], ["Integer", "detail"]], "ty": "constructor", "doc": "radius \u2014 Radius of the tetrahedron. Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "TetrahedronBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "TextGeometry", "args": [["String", "text"], ["Object", "parameters"]], "ty": "constructor", "doc": "text \u2014 The text that needs to be shown."}, {"ret": "Object", "name": "parameters", "inside": "TextGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "ParametricBufferGeometry", "args": [["Function", "func"], ["Integer", "slices"], ["Integer", "stacks"]], "ty": "constructor", "doc": "func \u2014 A function that takes in a <i>>Float u</i> and <i>>Float v</i> value each between 0 and 1 and modifies a third <i>Vector3</i> argument"}, {"ret": "Object", "name": "parameters", "inside": "ParametricBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "TorusKnotGeometry", "args": [["Float", "radius"], ["Float", "tube"], ["Integer", "tubularSegments"], ["Integer", "radialSegments"], ["Integer", "p"], ["Integer", "q"]], "ty": "constructor", "doc": "radius - Radius of the torus. Default is 1."}] ,
[{"inside": "TorusBufferGeometry", "args": [["Float", "radius"], ["Float", "tube"], ["Integer", "radialSegments"], ["Integer", "tubularSegments"], ["Float", "arc"]], "ty": "constructor", "doc": "radius - Radius of the torus, from the center of the torus to the center of the tube. Default is 1."}] ,
[{"inside": "ConeBufferGeometry", "args": [["Float", "radius"], ["Float", "height"], ["Integer", "radialSegments"], ["Integer", "heightSegments"], ["Boolean", "openEnded"], ["Float", "thetaStart"], ["Float", "thetaLength"]], "ty": "constructor", "doc": "radius \u2014 Radius of the cone base. Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "ConeBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "CylinderBufferGeometry", "args": [["Float", "radiusTop"], ["Float", "radiusBottom"], ["Float", "height"], ["Integer", "radialSegments"], ["Integer", "heightSegments"], ["Boolean", "openEnded"], ["Float", "thetaStart"], ["Float", "thetaLength"]], "ty": "constructor", "doc": "radiusTop \u2014 Radius of the cylinder at the top. Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "CylinderBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "ShapeGeometry", "args": [["Array", "shapes"], ["Integer", "curveSegments"]], "ty": "constructor", "doc": "shapes \u2014 <i>Array</i> of shapes or a single <i>>Shape shape</i>."}, {"ret": "Object", "name": "parameters", "inside": "ShapeGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "IcosahedronBufferGeometry", "args": [["Float", "radius"], ["Integer", "detail"]], "ty": "constructor", "doc": "radius \u2014 Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "IcosahedronBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "DodecahedronGeometry", "args": [["Float", "radius"], ["Integer", "detail"]], "ty": "constructor", "doc": "radius \u2014 Radius of the dodecahedron. Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "DodecahedronGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "TextBufferGeometry", "args": [["String", "text"], ["Object", "parameters"]], "ty": "constructor", "doc": "text \u2014 The text that needs to be shown."}, {"ret": "Object", "name": "parameters", "inside": "TextBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "RingBufferGeometry", "args": [["Float", "innerRadius"], ["Float", "outerRadius"], ["Integer", "thetaSegments"], ["Integer", "phiSegments"], ["Float", "thetaStart"], ["Float", "thetaLength"]], "ty": "constructor", "doc": "innerRadius \u2014 Default is 0.5."}, {"ret": "Object", "name": "parameters", "inside": "RingBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "ConeGeometry", "args": [["Float", "radius"], ["Float", "height"], ["Integer", "radialSegments"], ["Integer", "heightSegments"], ["Boolean", "openEnded"], ["Float", "thetaStart"], ["Float", "thetaLength"]], "ty": "constructor", "doc": "radius \u2014 Radius of the cone at the base. Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "ConeGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "SphereGeometry", "args": [["Float", "radius"], ["Integer", "widthSegments"], ["Integer", "heightSegments"], ["Float", "phiStart"], ["Float", "phiLength"], ["Float", "thetaStart"], ["Float", "thetaLength"]], "ty": "constructor", "doc": "radius \u2014 sphere radius. Default is 1."}] ,
[{"inside": "IcosahedronGeometry", "args": [["Float", "radius"], ["Integer", "detail"]], "ty": "constructor", "doc": "radius \u2014 Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "IcosahedronGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "TorusKnotBufferGeometry", "args": [["Float", "radius"], ["Float", "tube"], ["Integer", "tubularSegments"], ["Integer", "radialSegments"], ["Integer", "p"], ["Integer", "q"]], "ty": "constructor", "doc": "radius - Radius of the torus. Default is 1."}] ,
[{"inside": "TorusGeometry", "args": [["Float", "radius"], ["Float", "tube"], ["Integer", "radialSegments"], ["Integer", "tubularSegments"], ["Float", "arc"]], "ty": "constructor", "doc": "radius - Radius of the torus, from the center of the torus to the center of the tube. Default is 1."}] ,
[{"inside": "RingGeometry", "args": [["Float", "innerRadius"], ["Float", "outerRadius"], ["Integer", "thetaSegments"], ["Integer", "phiSegments"], ["Float", "thetaStart"], ["Float", "thetaLength"]], "ty": "constructor", "doc": "innerRadius \u2014 Default is 0.5."}, {"ret": "Object", "name": "parameters", "inside": "RingGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "TubeBufferGeometry", "args": [["Curve", "path"], ["Integer", "tubularSegments"], ["Float", "radius"], ["Integer", "radialSegments"], ["Boolean", "closed"]], "ty": "constructor", "doc": "path \u2014 <i>Curve</i> - A path that inherits from the <i>Curve</i> base class"}, {"ret": "Object", "name": "parameters", "inside": "TubeBufferGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}, {"ret": "Array", "name": "tangents", "inside": "TubeBufferGeometry", "ty": "property", "doc": "An array of <i>Vector3</i> tangents"}, {"ret": "Array", "name": "normals", "inside": "TubeBufferGeometry", "ty": "property", "doc": "An array of <i>Vector3</i> normals"}, {"ret": "Array", "name": "binormals", "inside": "TubeBufferGeometry", "ty": "property", "doc": "An array of <i>Vector3</i> binormals"}] ,
[{"inside": "OctahedronGeometry", "args": [["Float", "radius"], ["Integer", "detail"]], "ty": "constructor", "doc": "radius \u2014 Radius of the octahedron. Default is 1."}, {"ret": "Object", "name": "parameters", "inside": "OctahedronGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "PolyhedronGeometry", "args": [["Array", "vertices"], ["Array", "indices"], ["Float", "radius"], ["Integer", "detail"]], "ty": "constructor", "doc": "vertices \u2014 <i>Array</i> of points of the form [1,1,1, -1,-1,-1, ... ]"}, {"ret": "Object", "name": "parameters", "inside": "PolyhedronGeometry", "ty": "property", "doc": "An object with a property for each of the constructor parameters. Any modification after instantiation does not change the geometry."}] ,
[{"inside": "Template", "args": [["Number", "todo"]], "ty": "constructor", "doc": "Properties"}, {"ret": "Number", "name": "todo", "inside": "Template", "ty": "property", "doc": "todo"}, {"ret": "null", "name": "todo", "inside": "Template", "args": [], "ty": "method", "doc": "todo"}] ,
[{"inside": "DataTextureLoader", "args": [["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>LoadingManager manager</i> \u2014 The <i>>LoadingManager loadingManager</i> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager]."}, {"ret": "LoadingManager", "name": "manager", "inside": "DataTextureLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "null", "name": "load", "inside": "DataTextureLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI."}] ,
[{"inside": "MaterialLoader", "args": [["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>LoadingManager manager</i> \u2014 The <i>>LoadingManager loadingManager</i> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager]."}, {"ret": "LoadingManager", "name": "manager", "inside": "MaterialLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "Object", "name": "textures", "inside": "MaterialLoader", "ty": "property", "doc": "Object holding any textures used by the material. See <i>>setTextures</i>."}, {"ret": "null", "name": "load", "inside": "MaterialLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI."}, {"ret": "Material", "name": "parse", "inside": "MaterialLoader", "args": [["Object", "json"]], "ty": "method", "doc": "<i>>Object json</i> \u2014 The json object containing the parameters of the Material."}, {"ret": "null", "name": "setTextures", "inside": "MaterialLoader", "args": [["Object", "textures"]], "ty": "method", "doc": "<i>>Object textures</i> \u2014 object containing any textures used by the material."}] ,
[{"inside": "CompressedTextureLoader", "args": [["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>LoadingManager manager</i> \u2014 The <i>>LoadingManager loadingManager</i> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager]."}, {"ret": "LoadingManager", "name": "manager", "inside": "CompressedTextureLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "String", "name": "path", "inside": "CompressedTextureLoader", "ty": "property", "doc": "The base path from which files will be loaded. See <i>>setPath</i>. Default is *undefined*."}, {"ret": "null", "name": "load", "inside": "CompressedTextureLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI."}, {"ret": "FileLoader", "name": "setPath", "inside": "CompressedTextureLoader", "args": [["String", "path"]], "ty": "method", "doc": "Set the base path or URL from which to load files. This can be useful if you are loading many textures from the same directory."}] ,
[{"ret": "LoadingManager", "name": "manager", "inside": "FileLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "String", "name": "mimeType", "inside": "FileLoader", "ty": "property", "doc": "The expected mimeType. See <i>>setMimeType</i>. Default is *undefined*."}, {"ret": "String", "name": "path", "inside": "FileLoader", "ty": "property", "doc": "The base path from which files will be loaded. See <i>>setPath</i>. Default is *undefined*."}, {"ret": "object", "name": "requestHeader", "inside": "FileLoader", "ty": "property", "doc": "The header used in HTTP request. See <i>>setRequestHeader</i>. Default is *undefined*."}, {"ret": "String", "name": "responseType", "inside": "FileLoader", "ty": "property", "doc": "The expected response type. See <i>>setResponseType</i>. Default is *undefined*."}, {"ret": "String", "name": "withCredentials", "inside": "FileLoader", "ty": "property", "doc": "Whether the XMLHttpRequest uses credentials. See <i>>setWithCredentials</i>. Default is *undefined*."}, {"ret": "null", "name": "load", "inside": "FileLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI."}, {"ret": "FileLoader", "name": "setMimeType", "inside": "FileLoader", "args": [["String", "mimeType"]], "ty": "method", "doc": "Set the expected mimeType of the file being loaded. Note that in many cases this will be determined automatically, so by default it is *undefined*."}, {"ret": "FileLoader", "name": "setPath", "inside": "FileLoader", "args": [["String", "path"]], "ty": "method", "doc": "Set the base path or URL from which to load files. This can be useful if you are loading many models from the same directory."}, {"ret": "FileLoader", "name": "setRequestHeader", "inside": "FileLoader", "args": [["object", "requestHeader"]], "ty": "method", "doc": "<i>>object requestHeader</i> - key: The name of the header whose value is to be set. value: The value to set as the body of the header."}, {"ret": "FileLoader", "name": "setResponseType", "inside": "FileLoader", "args": [["String", "responseType"]], "ty": "method", "doc": "Change the response type. Valid values are:"}, {"ret": "FileLoader", "name": "setWithCredentials", "inside": "FileLoader", "args": [["Boolean", "value"]], "ty": "method", "doc": "Whether the XMLHttpRequest uses credentials such as cookies, authorization headers or TLS client certificates. See [link:https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials XMLHttpRequest.withCredentials]."}] ,
[{"inside": "CubeTextureLoader", "args": [["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>LoadingManager manager</i> \u2014 The <i>>LoadingManager loadingManager</i> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager]."}, {"ret": "String", "name": "crossOrigin", "inside": "CubeTextureLoader", "ty": "property", "doc": "If set, assigns the crossOrigin attribute of the image to the value of *crossOrigin*, prior to starting the load. Default is *\"anonymous\"*."}, {"ret": "LoadingManager", "name": "manager", "inside": "CubeTextureLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "String", "name": "path", "inside": "CubeTextureLoader", "ty": "property", "doc": "The base path from which files will be loaded. See <i>>setPath</i>. Default is *undefined*."}, {"ret": "null", "name": "load", "inside": "CubeTextureLoader", "args": [["String", "urls"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String urls</i> \u2014 array of 6 urls to images, one for each side of the CubeTexture. The urls should be specified in the following order: pos-x, neg-x, pos-y, neg-y, pos-z, neg-z. They can also be URIs."}, {"ret": "null", "name": "setCrossOrigin", "inside": "CubeTextureLoader", "args": [["String", "value"]], "ty": "method", "doc": "Set the <i>>crossOrigin</i> attribute."}, {"ret": "FileLoader", "name": "setPath", "inside": "CubeTextureLoader", "args": [["String", "path"]], "ty": "method", "doc": "Set the base path or URL from which to load files. This can be useful if you are loading many textures from the same directory."}] ,
[{"inside": "Loader", "args": [], "ty": "constructor", "doc": "Creates a new [name]. This should be called as base class."}, {"ret": "Function", "name": "onLoadStart", "inside": "Loader", "ty": "property", "doc": "Will be called when load starts."}, {"ret": "Function", "name": "onLoadProgress", "inside": "Loader", "ty": "property", "doc": "Will be called while load progresses."}, {"ret": "Function", "name": "onLoadComplete", "inside": "Loader", "ty": "property", "doc": "Will be called when load completes."}, {"ret": "string", "name": "crossOrigin", "inside": "Loader", "ty": "property", "doc": "The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS. Default is *\"anonymous\"*."}, {"ret": "Material", "name": "createMaterial", "inside": "Loader", "args": [["object", "m"], ["string", "texturePath"]], "ty": "method", "doc": "<i>>Object m</i> \u2014 The parameters to create the material."}, {"ret": "Array", "name": "initMaterials", "inside": "Loader", "args": [["Array", "materials"], ["string", "texturePath"]], "ty": "method", "doc": "<i>>Array materials</i> \u2014 an array of parameters to create materials."}] ,
[{"inside": "LoadingManager", "args": [["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "constructor", "doc": "<i>>Function onLoad</i> \u2014 (optional) this function will be called when all loaders are done."}, {"ret": "Function", "name": "onStart", "inside": "LoadingManager", "ty": "property", "doc": "This function will be called when loading starts. The arguments are:"}, {"ret": "Function", "name": "onLoad", "inside": "LoadingManager", "ty": "property", "doc": "This function will be called when all loading is completed. By default this is undefined, unless passed in the constructor."}, {"ret": "Function", "name": "onProgress", "inside": "LoadingManager", "ty": "property", "doc": "This function will be called when an item is complete. The arguments are:"}, {"ret": "Function", "name": "onError", "inside": "LoadingManager", "ty": "property", "doc": "This function will be called when any item errors, with the argument:"}, {"ret": "null", "name": "setURLModifier", "inside": "LoadingManager", "args": [["Function", "callback"]], "ty": "method", "doc": "<i>>Function callback</i> \u2014 URL modifier callback. Called with <i>>String url</i> argument, and must return <i>>String resolvedURL</i>."}, {"ret": "String", "name": "resolveURL", "inside": "LoadingManager", "args": [["String", "url"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the url to load"}, {"ret": "null", "name": "itemStart", "inside": "LoadingManager", "args": [["String", "url"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the url to load"}, {"ret": "null", "name": "itemEnd", "inside": "LoadingManager", "args": [["String", "url"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the loaded url"}, {"ret": "null", "name": "itemError", "inside": "LoadingManager", "args": [["String", "url"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the loaded url"}] ,
[{"inside": "ImageBitmapLoader", "args": [["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>LoadingManager manager</i> \u2014 The <i>>LoadingManager loadingManager</i> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager]."}, {"ret": "LoadingManager", "name": "manager", "inside": "ImageBitmapLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "String", "name": "options", "inside": "ImageBitmapLoader", "ty": "property", "doc": "An optional object that sets options for the internally used createImageBitmap factory method. Default is *undefined*."}, {"ret": "String", "name": "path", "inside": "ImageBitmapLoader", "ty": "property", "doc": "The base path from which files will be loaded. See <i>>setPath</i>. Default is *undefined*."}, {"ret": "null", "name": "load", "inside": "ImageBitmapLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI."}, {"ret": "ImageBitmapLoader", "name": "setCrossOrigin", "inside": "ImageBitmapLoader", "args": [], "ty": "method", "doc": "This method exists for compatibility reasons and implements no logic. It ensures that [name] has a similar interface like <i>ImageLoader</i>."}, {"ret": "ImageBitmapLoader", "name": "setOptions", "inside": "ImageBitmapLoader", "args": [["Object", "options"]], "ty": "method", "doc": "Sets the options object for createImageBitmap."}, {"ret": "ImageBitmapLoader", "name": "setPath", "inside": "ImageBitmapLoader", "args": [["String", "path"]], "ty": "method", "doc": "Sets the base path or URL from which to load files. This can be useful if you are loading many images from the same directory."}] ,
[{"ret": "Boolean", "name": "enabled", "inside": "Cache", "ty": "property", "doc": "Whether caching is enabled. Default is *false*."}, {"ret": "Object", "name": "files", "inside": "Cache", "ty": "property", "doc": "An <i>>Object object</i> that holds cached files."}, {"ret": "null", "name": "add", "inside": "Cache", "args": [["String", "key"]], "ty": "method", "doc": "<i>>String key</i> \u2014 the <i>>String key</i> to reference the cached file by."}, {"ret": "null", "name": "get", "inside": "Cache", "args": [["String", "key"]], "ty": "method", "doc": "<i>>String key</i> \u2014 A string key"}, {"ret": "null", "name": "remove", "inside": "Cache", "args": [["String", "key"]], "ty": "method", "doc": "<i>>String key</i> \u2014 A string key that references a cached file."}, {"ret": "null", "name": "clear", "inside": "Cache", "args": [], "ty": "method", "doc": "Remove all values from the cache."}] ,
[{"inside": "AnimationLoader", "args": [["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>LoadingManager manager</i> \u2014 The <i>>LoadingManager loadingManager</i> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager]."}, {"ret": "LoadingManager", "name": "manager", "inside": "AnimationLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "null", "name": "load", "inside": "AnimationLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI."}, {"ret": "null", "name": "parse", "inside": "AnimationLoader", "args": [["JSON", "json"], ["Function", "onLoad"]], "ty": "method", "doc": "<i>>JSON json</i> \u2014 required"}] ,
[{"inside": "TextureLoader", "args": [["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>LoadingManager manager</i> \u2014 The <i>>LoadingManager loadingManager</i> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager]."}, {"ret": "String", "name": "crossOrigin", "inside": "TextureLoader", "ty": "property", "doc": "If set, assigns the crossOrigin attribute of the image to the value of *crossOrigin*, prior to starting the load. Default is *\"anonymous\"*."}, {"ret": "LoadingManager", "name": "manager", "inside": "TextureLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "String", "name": "path", "inside": "TextureLoader", "ty": "property", "doc": "The base path from which files will be loaded. See <i>>setPath</i>. Default is *undefined*."}, {"ret": "Texture", "name": "load", "inside": "TextureLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI."}, {"ret": "null", "name": "setCrossOrigin", "inside": "TextureLoader", "args": [["String", "value"]], "ty": "method", "doc": "Set the <i>>crossOrigin</i> attribute."}, {"ret": "FileLoader", "name": "setPath", "inside": "TextureLoader", "args": [["String", "path"]], "ty": "method", "doc": "Set the base path or URL from which to load files. This can be useful if you are loading many models from the same directory."}] ,
[{"inside": "JSONLoader", "args": [["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>LoadingManager manager</i> \u2014 The <i>>LoadingManager loadingManager</i> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager]."}, {"ret": "String", "name": "crossOrigin", "inside": "JSONLoader", "ty": "property", "doc": "If set, assigns the crossOrigin attribute of the image to the value of *crossOrigin*, prior to starting the load. Default is *\"anonymous\"*."}, {"ret": "LoadingManager", "name": "manager", "inside": "JSONLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "String", "name": "withCredentials", "inside": "JSONLoader", "ty": "property", "doc": "Whether the XMLHttpRequest uses credentials. Default is *false*."}, {"ret": "null", "name": "load", "inside": "JSONLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI.."}, {"ret": "JSONLoader", "name": "setCrossOrigin", "inside": "JSONLoader", "args": [["String", "value"]], "ty": "method", "doc": "Set the <i>>crossOrigin</i> attribute."}, {"ret": "JSONLoader", "name": "setTexturePath", "inside": "JSONLoader", "args": [["String", "texturePath"]], "ty": "method", "doc": "Set the base path or URL from which to load files. This can be useful if you are loading many files from the same directory."}, {"ret": "Object3D", "name": "parse", "inside": "JSONLoader", "args": [["Object", "json"], ["String", "texturePath"]], "ty": "method", "doc": "<i>>String json</i> \u2014 JSON object to parse."}] ,
[{"inside": "AudioLoader", "args": [["String", "context"], ["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>String context</i> \u2014 The <i>>String AudioContext</i> for the loader to use. Default is [page:String window.AudioContext]."}, {"ret": "LoadingManager", "name": "manager", "inside": "AudioLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "null", "name": "load", "inside": "AudioLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI."}] ,
[{"ret": "String", "name": "decodeText", "inside": "LoaderUtils", "args": [["TypedArray", "array"]], "ty": "method", "doc": "<i>>TypedArray array</i> \u2014 A stream of bytes as a typed array."}, {"ret": "String", "name": "extractUrlBase", "inside": "LoaderUtils", "args": [["string", "url"]], "ty": "method", "doc": "<i>>String url</i> \u2014 The url to extract the base url from."}] ,
[{"inside": "BufferGeometryLoader", "args": [["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>LoadingManager manager</i> \u2014 The <i>>LoadingManager loadingManager</i> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager]."}, {"ret": "LoadingManager", "name": "manager", "inside": "BufferGeometryLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "null", "name": "load", "inside": "BufferGeometryLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI.d"}, {"ret": "BufferGeometry", "name": "parse", "inside": "BufferGeometryLoader", "args": [["Object", "json"]], "ty": "method", "doc": "<i>>Object json</i> \u2014 The"}] ,
[{"inside": "ObjectLoader", "args": [["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>LoadingManager manager</i> \u2014 The <i>>LoadingManager loadingManager</i> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager]."}, {"ret": "String", "name": "crossOrigin", "inside": "ObjectLoader", "ty": "property", "doc": "If set, assigns the crossOrigin attribute of the image to the value of *crossOrigin*, prior to starting the load. Default is *\"anonymous\"*."}, {"ret": "LoadingManager", "name": "manager", "inside": "ObjectLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "String", "name": "texturePath", "inside": "ObjectLoader", "ty": "property", "doc": "The base path or URL from which textures will be loaded. See <i>>setTexturePath</i>. Default is the empty string."}, {"ret": "null", "name": "load", "inside": "ObjectLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI."}, {"ret": "Object3D", "name": "parse", "inside": "ObjectLoader", "args": [["Object", "json"], ["Function", "onLoad"]], "ty": "method", "doc": "<i>>Object json</i> \u2014 required. The JSON source to parse."}, {"ret": "Object3D", "name": "parseGeometries", "inside": "ObjectLoader", "args": [["Object", "json"]], "ty": "method", "doc": "<i>>Object json</i> \u2014 required. The JSON source to parse."}, {"ret": "Object3D", "name": "parseMaterials", "inside": "ObjectLoader", "args": [["Object", "json"]], "ty": "method", "doc": "<i>>Object json</i> \u2014 required. The JSON source to parse."}, {"ret": "Object3D", "name": "parseAnimations", "inside": "ObjectLoader", "args": [["Object", "json"]], "ty": "method", "doc": "<i>>Object json</i> \u2014 required. The JSON source to parse."}, {"ret": "Object3D", "name": "parseImages", "inside": "ObjectLoader", "args": [["Object", "json"]], "ty": "method", "doc": "<i>>Object json</i> \u2014 required. The JSON source to parse."}, {"ret": "Object3D", "name": "parseTextures", "inside": "ObjectLoader", "args": [["Object", "json"]], "ty": "method", "doc": "<i>>Object json</i> \u2014 required. The JSON source to parse."}, {"ret": "Object3D", "name": "parseObject", "inside": "ObjectLoader", "args": [["Object", "json"]], "ty": "method", "doc": "<i>>Object json</i> \u2014 required. The JSON source to parse."}, {"ret": "ObjectLoader", "name": "setCrossOrigin", "inside": "ObjectLoader", "args": [["String", "value"]], "ty": "method", "doc": "<i>>String value</i> \u2014 The crossOrigin string to implement CORS for loading the url from a different domain that allows CORS."}, {"ret": "ObjectLoader", "name": "setTexturePath", "inside": "ObjectLoader", "args": [["String", "value"]], "ty": "method", "doc": "<i>>String value</i> \u2014 The base path or URL from which textures will be loaded."}] ,
[{"inside": "FontLoader", "args": [["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>LoadingManager manager</i> \u2014 The <i>>LoadingManager loadingManager</i> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager]."}, {"ret": "LoadingManager", "name": "manager", "inside": "FontLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "String", "name": "path", "inside": "FontLoader", "ty": "property", "doc": "The base path from which fonts will be loaded. See <i>>setPath</i>. Default is *undefined*."}, {"ret": "null", "name": "load", "inside": "FontLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI."}, {"ret": "Font", "name": "parse", "inside": "FontLoader", "args": [["Object", "json"]], "ty": "method", "doc": "<i>>Object json</i> \u2014 The"}, {"ret": "FontLoader", "name": "setPath", "inside": "FontLoader", "args": [["String", "path"]], "ty": "method", "doc": "Set the base path or URL from which to load fonts. This can be useful if you are loading many fonts from the same directory."}] ,
[{"inside": "ImageLoader", "args": [["LoadingManager", "manager"]], "ty": "constructor", "doc": "<i>>LoadingManager manager</i> \u2014 The <i>>LoadingManager loadingManager</i> for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager]."}, {"ret": "String", "name": "crossOrigin", "inside": "ImageLoader", "ty": "property", "doc": "If set, assigns the crossOrigin attribute of the image to the value of *crossOrigin*, prior to starting the load. Default is *\"anonymous\"*."}, {"ret": "LoadingManager", "name": "manager", "inside": "ImageLoader", "ty": "property", "doc": "The <i>>LoadingManager loadingManager</i> the loader is using. Default is <i>DefaultLoadingManager</i>."}, {"ret": "String", "name": "path", "inside": "ImageLoader", "ty": "property", "doc": "The base path from which files will be loaded. See <i>>setPath</i>. Default is *undefined*."}, {"ret": "null", "name": "load", "inside": "ImageLoader", "args": [["String", "url"], ["Function", "onLoad"], ["Function", "onProgress"], ["Function", "onError"]], "ty": "method", "doc": "<i>>String url</i> \u2014 the path or URL to the file. This can also be a URI."}, {"ret": "null", "name": "setCrossOrigin", "inside": "ImageLoader", "args": [["String", "value"]], "ty": "method", "doc": "Set the <i>>crossOrigin</i> attribute."}, {"ret": "FileLoader", "name": "setPath", "inside": "ImageLoader", "args": [["String", "path"]], "ty": "method", "doc": "Set the base path or URL from which to load files. This can be useful if you are loading many images from the same directory."}] ,
[{"inside": "DirectionalLightHelper", "args": [["DirectionalLight", "light"], ["Number", "size"], ["Hex", "color"]], "ty": "constructor", "doc": "<i>>DirectionalLight light</i>-- The light to be visualized."}, {"ret": "Line", "name": "lightPlane", "inside": "DirectionalLightHelper", "ty": "property", "doc": "Contains the line mesh showing the location of the directional light."}, {"ret": "DirectionalLight", "name": "light", "inside": "DirectionalLightHelper", "ty": "property", "doc": "Reference to the <i>>DirectionalLight directionalLight</i> being visualized."}, {"ret": "object", "name": "matrix", "inside": "DirectionalLightHelper", "ty": "property", "doc": "Reference to the light's <i>Object3D.matrixWorld</i>."}, {"ret": "object", "name": "matrixAutoUpdate", "inside": "DirectionalLightHelper", "ty": "property", "doc": "See [page:Object3D.matrixAutoUpdate]. Set to *false* here as the helper is using the light's <i>Object3D.matrixWorld</i>."}, {"ret": "hex", "name": "color", "inside": "DirectionalLightHelper", "ty": "property", "doc": "The color parameter passed in the constructor. Default is *undefined*. If this is changed, the helper's color will update the next time [page:.update update] is called."}, {"ret": "null", "name": "dispose", "inside": "DirectionalLightHelper", "args": [], "ty": "method", "doc": "Dispose of the directionalLightHelper."}, {"ret": "null", "name": "update", "inside": "DirectionalLightHelper", "args": [], "ty": "method", "doc": "Updates the helper to match the position and direction of the [page:.light directionalLight] being visualized."}] ,
[{"inside": "SkeletonHelper", "args": [], "ty": "constructor", "doc": "object -- can be any object that has an array of <i>>Bone Bone</i>s as a sub object."}, {"ret": "Array", "name": "bones", "inside": "SkeletonHelper", "ty": "property", "doc": "The list of bones that the helper renders as <i>>Line Lines</i>."}, {"ret": "Object", "name": "root", "inside": "SkeletonHelper", "ty": "property", "doc": "The object passed in the constructor."}] ,
[{"inside": "PolarGridHelper", "args": [["Number", "radius"], ["Number", "radials"], ["Number", "circles"], ["Number", "divisions"], ["Color", "color1"], ["Color", "color2"]], "ty": "constructor", "doc": "radius -- The radius of the polar grid. This can be any positive number. Default is 10."}] ,
[{"inside": "SpotLightHelper", "args": [["SpotLight", "light"], ["Hex", "color"]], "ty": "constructor", "doc": "<i>>SpotLight light</i> -- The <i>SpotLight</i> to be visualized."}, {"ret": "LineSegments", "name": "cone", "inside": "SpotLightHelper", "ty": "property", "doc": "<i>LineSegments</i> used to visualize the light."}, {"ret": "SpotLight", "name": "light", "inside": "SpotLightHelper", "ty": "property", "doc": "Reference to the <i>SpotLight</i> being visualized."}, {"ret": "object", "name": "matrix", "inside": "SpotLightHelper", "ty": "property", "doc": "Reference to the spotLight's <i>Object3D.matrixWorld</i>."}, {"ret": "object", "name": "matrixAutoUpdate", "inside": "SpotLightHelper", "ty": "property", "doc": "See [page:Object3D.matrixAutoUpdate]. Set to *false* here as the helper is using the spotLight's <i>Object3D.matrixWorld</i>."}, {"ret": "hex", "name": "color", "inside": "SpotLightHelper", "ty": "property", "doc": "The color parameter passed in the constructor. Default is *undefined*. If this is changed, the helper's color will update the next time [page:.update update] is called."}, {"ret": "null", "name": "dispose", "inside": "SpotLightHelper", "args": [], "ty": "method", "doc": "Disposes of the light helper."}, {"ret": "null", "name": "update", "inside": "SpotLightHelper", "args": [], "ty": "method", "doc": "Updates the light helper."}] ,
[{"inside": "CameraHelper", "args": [["Camera", "camera"]], "ty": "constructor", "doc": "<i>>Camera camera</i> -- The camera to visualize."}, {"ret": "Camera", "name": "camera", "inside": "CameraHelper", "ty": "property", "doc": "The camera being visualized."}, {"ret": "object", "name": "pointMap", "inside": "CameraHelper", "ty": "property", "doc": "This contains the points used to visualize the camera."}, {"ret": "object", "name": "matrix", "inside": "CameraHelper", "ty": "property", "doc": "Reference to the [page:Object3D.matrixWorld camera.matrixWorld]."}, {"ret": "object", "name": "matrixAutoUpdate", "inside": "CameraHelper", "ty": "property", "doc": "See [page:Object3D.matrixAutoUpdate]. Set to *false* here as the helper is using the camera's <i>Object3D.matrixWorld</i>."}, {"ret": "null", "name": "update", "inside": "CameraHelper", "args": [], "ty": "method", "doc": "Updates the helper based on the projectionMatrix of the camera."}] ,
[{"inside": "FaceNormalsHelper", "args": [["Object3D", "object"], ["Number", "size"], ["Color", "color"], ["Number", "linewidth"]], "ty": "constructor", "doc": "<i>>Object3D object</i> -- object for which to render face normals."}, {"ret": "object", "name": "matrixAutoUpdate", "inside": "FaceNormalsHelper", "ty": "property", "doc": "See [page:Object3D.matrixAutoUpdate]. Set to *false* here as the helper is using the objects's <i>Object3D.matrixWorld</i>."}, {"ret": "Object3D", "name": "object", "inside": "FaceNormalsHelper", "ty": "property", "doc": "The object for which the face normals are being visualized."}, {"ret": "Number", "name": "size", "inside": "FaceNormalsHelper", "ty": "property", "doc": "Length of the arrows. Default is *1*."}, {"ret": "null", "name": "update", "inside": "FaceNormalsHelper", "args": [], "ty": "method", "doc": "Updates the face normal preview based on movement of the object."}] ,
[{"inside": "GridHelper", "args": [["number", "size"], ["Number", "divisions"], ["Color", "colorCenterLine"], ["Color", "colorGrid"]], "ty": "constructor", "doc": "size -- The size of the grid. Default is 10."}] ,
[{"inside": "AxesHelper", "args": [["Number", "size"]], "ty": "constructor", "doc": "<i>>Number size</i> -- (optional) size of the lines representing the axes. Default is *1*."}] ,
[{"inside": "RectAreaLightHelper", "args": [["RectAreaLight", "light"], ["Hex", "color"]], "ty": "constructor", "doc": "<i>>RectAreaLight light</i> -- The light being visualized."}, {"ret": "RectAreaLight", "name": "light", "inside": "RectAreaLightHelper", "ty": "property", "doc": "Reference to the RectAreaLight being visualized."}, {"ret": "hex", "name": "color", "inside": "RectAreaLightHelper", "ty": "property", "doc": "The color parameter passed in the constructor. Default is *undefined*. If this is changed, the helper's color will update the next time [page:.update update] is called."}, {"ret": "null", "name": "dispose", "inside": "RectAreaLightHelper", "args": [], "ty": "method", "doc": "Dispose of the rectAreaLightHelper."}, {"ret": "null", "name": "update", "inside": "RectAreaLightHelper", "args": [], "ty": "method", "doc": "Updates the helper to match the position and direction of the <i>>light</i>."}] ,
[{"inside": "VertexNormalsHelper", "args": [["Object3D", "object"], ["Number", "size"], ["Hex", "color"], ["Number", "linewidth"]], "ty": "constructor", "doc": "<i>>Object3D object</i> -- object for which to render vertex normals."}, {"ret": "object", "name": "matrixAutoUpdate", "inside": "VertexNormalsHelper", "ty": "property", "doc": "See [page:Object3D.matrixAutoUpdate]. Set to *false* here as the helper is using the objects's <i>Object3D.matrixWorld</i>."}, {"ret": "Object3D", "name": "object", "inside": "VertexNormalsHelper", "ty": "property", "doc": "The object for which the vertex normals are being visualized."}, {"ret": "Number", "name": "size", "inside": "VertexNormalsHelper", "ty": "property", "doc": "Length of the arrows. Default is *1*."}, {"ret": "null", "name": "update", "inside": "VertexNormalsHelper", "args": [], "ty": "method", "doc": "Updates the vertex normal preview based on movement of the object."}] ,
[{"inside": "ArrowHelper", "args": [["Vector3", "dir"], ["Vector3", "origin"], ["Number", "length"], ["Number", "hex"], ["Number", "headLength"], ["Number", "headWidth"]], "ty": "constructor", "doc": "<i>>Vector3 dir</i> -- direction from origin. Must be a unit vector."}, {"ret": "Line", "name": "line", "inside": "ArrowHelper", "ty": "property", "doc": "Contains the line part of the arrowHelper."}, {"ret": "Mesh", "name": "cone", "inside": "ArrowHelper", "ty": "property", "doc": "Contains the cone part of the arrowHelper."}, {"ret": "null", "name": "setColor", "inside": "ArrowHelper", "args": [["Number", "hex"]], "ty": "method", "doc": "hex -- The hexadecimal value of the color."}, {"ret": "null", "name": "setLength", "inside": "ArrowHelper", "args": [["Number", "length"], ["Number", "headLength"], ["Number", "headWidth"]], "ty": "method", "doc": "length -- The desired length."}, {"ret": "null", "name": "setDirection", "inside": "ArrowHelper", "args": [["Vector3", "dir"]], "ty": "method", "doc": "dir -- The desired direction. Must be a unit vector."}] ,
[{"inside": "BoxHelper", "args": [["Object3D", "object"], ["Color", "color"]], "ty": "constructor", "doc": "<i>>Object3D object</i> -- (optional) the object3D to show the world-axis-aligned boundingbox."}, {"ret": "null", "name": "update", "inside": "BoxHelper", "args": [], "ty": "method", "doc": "Updates the helper's geometry to match the dimensions of the object, including any children. See [page:Box3.setFromObject]."}, {"ret": "BoxHelper", "name": "setFromObject", "inside": "BoxHelper", "args": [["Object3D", "object"]], "ty": "method", "doc": "<i>>Object3D object</i> - <i>Object3D</i> to create the helper of."}] ,
[{"inside": "PointLightHelper", "args": [["PointLight", "light"], ["Float", "sphereSize"], ["Hex", "color"]], "ty": "constructor", "doc": "<i>>PointLight light</i> -- The light to be visualized."}, {"ret": "PointLight", "name": "light", "inside": "PointLightHelper", "ty": "property", "doc": "The <i>PointLight</i> that is being visualized."}, {"ret": "object", "name": "matrix", "inside": "PointLightHelper", "ty": "property", "doc": "Reference to the pointLight's <i>Object3D.matrixWorld</i>."}, {"ret": "object", "name": "matrixAutoUpdate", "inside": "PointLightHelper", "ty": "property", "doc": "See [page:Object3D.matrixAutoUpdate]. Set to *false* here as the helper is using the pointLight's <i>Object3D.matrixWorld</i>."}, {"ret": "hex", "name": "color", "inside": "PointLightHelper", "ty": "property", "doc": "The color parameter passed in the constructor. Default is *undefined*. If this is changed, the helper's color will update the next time [page:.update update] is called."}, {"ret": "null", "name": "dispose", "inside": "PointLightHelper", "args": [], "ty": "method", "doc": "Dispose of the pointLightHelper."}, {"ret": "null", "name": "update", "inside": "PointLightHelper", "args": [], "ty": "method", "doc": "Updates the helper to match the position of the <i>>light</i>."}] ,
[{"inside": "Box3Helper", "args": [["Box3", "box"], ["Color", "color"]], "ty": "constructor", "doc": "<i>>Box3 box</i> -- the Box3 to show."}, {"ret": "Box3", "name": "box", "inside": "Box3Helper", "ty": "property", "doc": "The Box3 being visualized."}, {"ret": "void", "name": "updateMatrixWorld", "inside": "Box3Helper", "args": [["Boolean", "force"]], "ty": "method", "doc": "This overrides the method in the base <i>Object3D</i> class so that it also updates the wireframe box to the extent of the [page:Box3Helper.box .box] property."}] ,
[{"inside": "HemisphereLightHelper", "args": [["HemisphereLight", "light"], ["Number", "sphereSize"], ["Hex", "color"]], "ty": "constructor", "doc": "<i>>HemisphereLight light</i> -- The light being visualized."}, {"ret": "HemisphereLight", "name": "light", "inside": "HemisphereLightHelper", "ty": "property", "doc": "Reference to the HemisphereLight being visualized."}, {"ret": "object", "name": "matrix", "inside": "HemisphereLightHelper", "ty": "property", "doc": "Reference to the hemisphereLight's <i>Object3D.matrixWorld</i>."}, {"ret": "object", "name": "matrixAutoUpdate", "inside": "HemisphereLightHelper", "ty": "property", "doc": "See [page:Object3D.matrixAutoUpdate]. Set to *false* here as the helper is using the hemisphereLight's <i>Object3D.matrixWorld</i>."}, {"ret": "hex", "name": "color", "inside": "HemisphereLightHelper", "ty": "property", "doc": "The color parameter passed in the constructor. Default is *undefined*. If this is changed, the helper's color will update the next time [page:.update update] is called."}, {"ret": "null", "name": "dispose", "inside": "HemisphereLightHelper", "args": [], "ty": "method", "doc": "Dispose of the hemisphereLightHelper."}, {"ret": "null", "name": "update", "inside": "HemisphereLightHelper", "args": [], "ty": "method", "doc": "Updates the helper to match the position and direction of the <i>>light</i>."}] ,
[{"inside": "PlaneHelper", "args": [["Plane", "plane"], ["Float", "size"], ["Color", "hex"]], "ty": "constructor", "doc": "<i>>Plane plane</i> -- the plane to visualize."}, {"ret": "Plane", "name": "plane", "inside": "PlaneHelper", "ty": "property", "doc": "The <i>>Plane plane</i> being visualized."}, {"ret": "Float", "name": "size", "inside": "PlaneHelper", "ty": "property", "doc": "The side lengths of plane helper."}, {"ret": "void", "name": "updateMatrixWorld", "inside": "PlaneHelper", "args": [["Boolean", "force"]], "ty": "method", "doc": "This overrides the method in the base <i>Object3D</i> class so that it also updates the helper object according to the [page:PlaneHelper.plane .plane] and [page:PlaneHelper.size .size] properties."}] ,
[{"inside": "SpotLight", "args": [["Integer", "color"], ["Float", "intensity"], ["Float", "distance"], ["Radians", "angle"], ["Float", "penumbra"], ["Float", "decay"]], "ty": "constructor", "doc": "<i>>Integer color</i> - (optional) hexadecimal color of the light. Default is 0xffffff (white)."}, {"ret": "Float", "name": "angle", "inside": "SpotLight", "ty": "property", "doc": "Maximum extent of the spotlight, in radians, from its direction. Should be no more than *Math.PI/2*. The default is *Math.PI/3*."}, {"ret": "Boolean", "name": "castShadow", "inside": "SpotLight", "ty": "property", "doc": "If set to *true* light will cast dynamic shadows. *Warning*: This is expensive and requires tweaking to get shadows looking right. See the <i>SpotLightShadow</i> for details. The default is *false*."}, {"ret": "Float", "name": "decay", "inside": "SpotLight", "ty": "property", "doc": "The amount the light dims along the distance of the light."}, {"ret": "Float", "name": "distance", "inside": "SpotLight", "ty": "property", "doc": "If non-zero, light will attenuate linearly from maximum intensity at the light's position down to zero at this distance from the light. Default is *0.0*."}, {"ret": "Boolean", "name": "isSpotLight", "inside": "SpotLight", "ty": "property", "doc": "Used to check whether this or derived classes are spot lights. Default is *true*."}, {"ret": "Float", "name": "penumbra", "inside": "SpotLight", "ty": "property", "doc": "Percent of the spotlight cone that is attenuated due to penumbra. Takes values between zero and 1. The default is *0.0*."}, {"ret": "Vector3", "name": "position", "inside": "SpotLight", "ty": "property", "doc": "This is set equal to [page:Object3D.DefaultUp] (0, 1, 0), so that the light shines from the top down."}, {"ret": "Float", "name": "power", "inside": "SpotLight", "ty": "property", "doc": "The light's power."}, {"ret": "SpotLightShadow", "name": "shadow", "inside": "SpotLight", "ty": "property", "doc": "A <i>SpotLightShadow</i> used to calculate shadows for this light."}, {"ret": "Object3D", "name": "target", "inside": "SpotLight", "ty": "property", "doc": "The Spotlight points from its [page:.position position] to target.position. The default position of the target is *(0, 0, 0)*."}, {"ret": "SpotLight", "name": "copy", "inside": "SpotLight", "args": [["SpotLight", "source"]], "ty": "method", "doc": "Copies value of all the properties from the <i>>SpotLight source</i> to this SpotLight."}] ,
[{"inside": "DirectionalLightShadow", "args": [], "ty": "constructor", "doc": "Creates a new [name]. This is not intended to be called directly - it is called internally by <i>DirectionalLight</i>."}, {"ret": "Camera", "name": "camera", "inside": "DirectionalLightShadow", "ty": "property", "doc": "The light's view of the world. This is used to generate a depth map of the scene; objects behind other objects from the light's perspective will be in shadow."}] ,
[{"ret": "Camera", "name": "camera", "inside": "SpotLightShadow", "ty": "property", "doc": "The light's view of the world. This is used to generate a depth map of the scene; objects behind other objects from the light's perspective will be in shadow."}, {"ret": "Boolean", "name": "isSpotLightShadow", "inside": "SpotLightShadow", "ty": "property", "doc": "Used to check whether this or derived classes are spot light shadows. Default is *true*."}, {"ret": "SpotLightShadow", "name": "update", "inside": "SpotLightShadow", "args": [["SpotLight", "light"]], "ty": "method", "doc": "Updates the internal perspective [page:.camera camera] based on the passed in <i>>SpotLight light</i>."}] ,
[{"inside": "LightShadow", "args": [["Camera", "camera"]], "ty": "constructor", "doc": "<i>>Camera camera</i> - the light's view of the world."}, {"ret": "Camera", "name": "camera", "inside": "LightShadow", "ty": "property", "doc": "The light's view of the world. This is used to generate a depth map of the scene; objects behind other objects from the light's perspective will be in shadow."}, {"ret": "Float", "name": "bias", "inside": "LightShadow", "ty": "property", "doc": "Shadow map bias, how much to add or subtract from the normalized depth when deciding whether a surface is in shadow."}, {"ret": "WebGLRenderTarget", "name": "map", "inside": "LightShadow", "ty": "property", "doc": "The depth map generated using the internal camera; a location beyond a pixel's depth is in shadow. Computed internally during rendering."}, {"ret": "Vector2", "name": "mapSize", "inside": "LightShadow", "ty": "property", "doc": "A [Page:Vector2] defining the width and height of the shadow map."}, {"ret": "Matrix4", "name": "matrix", "inside": "LightShadow", "ty": "property", "doc": "Model to shadow camera space, to compute location and depth in shadow map. Stored in a <i>>Matrix4 Matrix4</i>. This is computed internally during rendering."}, {"ret": "Float", "name": "radius", "inside": "LightShadow", "ty": "property", "doc": "Setting this to values greater than 1 will blur the edges of the shadow."}, {"ret": "LightShadow", "name": "copy", "inside": "LightShadow", "args": [["LightShadow", "source"]], "ty": "method", "doc": "Copies value of all the properties from the <i>>LightShadow source</i> to this SpotLight."}, {"ret": "LightShadow", "name": "clone", "inside": "LightShadow", "args": [], "ty": "method", "doc": "Creates a new LightShadow with the same properties as this one."}, {"ret": "Object", "name": "toJSON", "inside": "LightShadow", "args": [], "ty": "method", "doc": "Serialize this LightShadow."}] ,
[{"inside": "DirectionalLight", "args": [["Integer", "color"], ["Float", "intensity"]], "ty": "constructor", "doc": "<i>>Integer color</i> - (optional) hexadecimal color of the light. Default is 0xffffff (white)."}, {"ret": "Boolean", "name": "castShadow", "inside": "DirectionalLight", "ty": "property", "doc": "If set to *true* light will cast dynamic shadows. *Warning*: This is expensive and requires tweaking to get shadows looking right. See the <i>DirectionalLightShadow</i> for details. The default is *false*."}, {"ret": "Boolean", "name": "isDirectionalLight", "inside": "DirectionalLight", "ty": "property", "doc": "Used to check whether this or derived classes are directional lights. Default is *true*."}, {"ret": "Vector3", "name": "position", "inside": "DirectionalLight", "ty": "property", "doc": "This is set equal to [page:Object3D.DefaultUp] (0, 1, 0), so that the light shines from the top down."}, {"ret": "DirectionalLightShadow", "name": "shadow", "inside": "DirectionalLight", "ty": "property", "doc": "A <i>DirectionalLightShadow</i> used to calculate shadows for this light."}, {"ret": "Object3D", "name": "target", "inside": "DirectionalLight", "ty": "property", "doc": "The DirectionalLight points from its [page:.position position] to target.position. The default position of the target is *(0, 0, 0)*."}, {"ret": "DirectionalLight", "name": "copy", "inside": "DirectionalLight", "args": [["DirectionalLight", "source"]], "ty": "method", "doc": "Copies value of all the properties from the <i>>DirectionalLight source</i> to this DirectionalLight."}] ,
[{"inside": "RectAreaLight", "args": [["Integer", "color"], ["Float", "intensity"], ["Float", "width"], ["Float", "height"]], "ty": "constructor", "doc": "<i>>Integer color</i> - (optional) hexadecimal color of the light. Default is 0xffffff (white)."}, {"ret": "Boolean", "name": "isRectAreaLight", "inside": "RectAreaLight", "ty": "property", "doc": "Used to check whether this or derived classes are RectAreaLights. Default is *true*."}, {"ret": "RectAreaLight", "name": "copy", "inside": "RectAreaLight", "args": [["RectAreaLight", "source"]], "ty": "method", "doc": "Copies value of all the properties from the <i>>RectAreaLight source</i> to this RectAreaLight."}] ,
[{"inside": "PointLight", "args": [["Integer", "color"], ["Float", "intensity"], ["Number", "distance"], ["Float", "decay"]], "ty": "constructor", "doc": "<i>>Integer color</i> - (optional) hexadecimal color of the light. Default is 0xffffff (white)."}, {"ret": "Float", "name": "decay", "inside": "PointLight", "ty": "property", "doc": "The amount the light dims along the distance of the light"}, {"ret": "Float", "name": "distance", "inside": "PointLight", "ty": "property", "doc": "If non-zero, light will attenuate linearly from maximum intensity at the light's position down to zero at this distance from the light. Default is *0.0*."}, {"ret": "Boolean", "name": "isPointLight", "inside": "PointLight", "ty": "property", "doc": "Used to check whether this or derived classes are point lights. Default is *true*."}, {"ret": "Float", "name": "power", "inside": "PointLight", "ty": "property", "doc": "The light's power."}, {"ret": "LightShadow", "name": "shadow", "inside": "PointLight", "ty": "property", "doc": "A <i>LightShadow</i> used to calculate shadows for this light."}, {"ret": "PointLight", "name": "copy", "inside": "PointLight", "args": [["PointLight", "source"]], "ty": "method", "doc": "Copies value of all the properties from the <i>>PointLight source</i> to this PointLight."}] ,
[{"inside": "AmbientLight", "args": [["Integer", "color"], ["Float", "intensity"]], "ty": "constructor", "doc": "<i>>Integer color</i> - (optional) Numeric value of the RGB component of the color. Default is 0xffffff."}, {"ret": "Boolean", "name": "castShadow", "inside": "AmbientLight", "ty": "property", "doc": "This is set to *undefined* in the constructor as ambient lights cannot cast shadows."}, {"ret": "Boolean", "name": "isAmbientLight", "inside": "AmbientLight", "ty": "property", "doc": "Used to check whether this or derived classes are ambient lights. Default is *true*."}] ,
[{"inside": "HemisphereLight", "args": [["Integer", "skyColor"], ["Integer", "groundColor"], ["Float", "intensity"]], "ty": "constructor", "doc": "<i>>Integer skyColor</i> - (optional) hexadecimal color of the sky. Default is 0xffffff."}, {"ret": "Boolean", "name": "castShadow", "inside": "HemisphereLight", "ty": "property", "doc": "This is set to *undefined* in the constructor as hemisphere lights cannot cast shadows."}, {"ret": "Float", "name": "color", "inside": "HemisphereLight", "ty": "property", "doc": "The light's sky color, as passed in the constructor. Default is a new <i>Color</i> set to white (0xffffff)."}, {"ret": "Float", "name": "groundColor", "inside": "HemisphereLight", "ty": "property", "doc": "The light's ground color, as passed in the constructor. Default is a new <i>Color</i> set to white (0xffffff)."}, {"ret": "Boolean", "name": "isHemisphereLight", "inside": "HemisphereLight", "ty": "property", "doc": "Used to check whether this or derived classes are hemisphere lights. Default is *true*."}, {"ret": "Vector3", "name": "position", "inside": "HemisphereLight", "ty": "property", "doc": "This is set equal to [page:Object3D.DefaultUp] (0, 1, 0), so that the light shines from the top down."}, {"ret": "HemisphereLight", "name": "copy", "inside": "HemisphereLight", "args": [["HemisphereLight", "source"]], "ty": "method", "doc": "Copies the value of [page:.color color], [page:.intensity intensity] and [page:.groundColor groundColor] from the <i>>Light source</i> light into this one."}] ,
[{"inside": "Light", "args": [["Integer", "color"], ["float", "intensity"]], "ty": "constructor", "doc": "<i>>Integer color</i> - (optional) hexadecimal color of the light. Default is 0xffffff (white)."}, {"ret": "Color", "name": "color", "inside": "Light", "ty": "property", "doc": "Color of the light. Defaults to a new <i>Color</i> set to white, if not passed in the constructor."}, {"ret": "Float", "name": "intensity", "inside": "Light", "ty": "property", "doc": "The light's intensity, or strength."}, {"ret": "Boolean", "name": "isLight", "inside": "Light", "ty": "property", "doc": "Used to check whether this or derived classes are lights. Default is *true*."}, {"ret": "Light", "name": "copy", "inside": "Light", "args": [["Light", "source"]], "ty": "method", "doc": "Copies the value of [page:.color color] and [page:.intensity intensity] from the <i>>Light source</i> light into this one."}, {"ret": "JSON", "name": "toJSON", "inside": "Light", "args": [["String", "meta"]], "ty": "method", "doc": "Return Light data in JSON format."}] ,
[{"inside": "CurvePath", "args": [], "ty": "constructor", "doc": "The constructor take no parameters."}, {"ret": "array", "name": "curves", "inside": "CurvePath", "ty": "property", "doc": "The array of <i>>Curve Curves</i>."}, {"ret": "boolean", "name": "autoClose", "inside": "CurvePath", "ty": "property", "doc": "Whether or not to automatically close the path."}, {"ret": "null", "name": "add", "inside": "CurvePath", "args": [["Curve", "curve"]], "ty": "method", "doc": "Add a curve to the <i>>curves</i> array."}, {"ret": "null", "name": "closePath", "inside": "CurvePath", "args": [], "ty": "method", "doc": "Adds a <i>>LineCurve lineCurve</i> to close the path."}, {"ret": "Float", "name": "getCurveLengths", "inside": "CurvePath", "args": [], "ty": "method", "doc": "Adds together the lengths of the curves in the <i>>curves</i> array."}] ,
[{"ret": "Float", "name": "CatmullRom", "inside": "Interpolations", "args": [["Float", "t"], ["Float", "p0"], ["Float", "p1"], ["Float", "p2"], ["Float", "p3"]], "ty": "method", "doc": "t -- interpolation weight."}, {"ret": "Float", "name": "QuadraticBezier", "inside": "Interpolations", "args": [["Float", "t"], ["Float", "p0"], ["Float", "p1"], ["Float", "p2"]], "ty": "method", "doc": "t -- interpolation weight."}, {"ret": "Float", "name": "CubicBezier", "inside": "Interpolations", "args": [["Float", "t"], ["Float", "p0"], ["Float", "p1"], ["Float", "p2"], ["Float", "p3"]], "ty": "method", "doc": "t -- interpolation weight."}] ,
[{"inside": "ShapePath", "args": [], "ty": "constructor", "doc": "Creates a new ShapePath. Unlike a <i>Path</i>, no points are passed in as the ShapePath is designed to be generated after creation."}, {"ret": "array", "name": "subPaths", "inside": "ShapePath", "ty": "property", "doc": "Array of <i>Path</i>s."}, {"ret": "array", "name": "currentPath", "inside": "ShapePath", "ty": "property", "doc": "The current <i>Path</i> that is being generated."}, {"ret": "null", "name": "moveTo", "inside": "ShapePath", "args": [["Float", "x"], ["Float", "y"]], "ty": "method", "doc": "Starts a new <i>Path</i> and calls [page:Path.moveTo]( x, y ) on that <i>Path</i>. Also points <i>ShapePath.currentPath</i> to that <i>Path</i>."}, {"ret": "null", "name": "lineTo", "inside": "ShapePath", "args": [["Float", "x"], ["Float", "y"]], "ty": "method", "doc": "This creates a line from the <i>ShapePath.currentPath</i>'s offset to X and Y and updates the offset to X and Y."}, {"ret": "null", "name": "quadraticCurveTo", "inside": "ShapePath", "args": [["Float", "cpX"], ["Float", "cpY"], ["Float", "x"], ["Float", "y"]], "ty": "method", "doc": "This creates a quadratic curve from the <i>ShapePath.currentPath</i>'s offset to x and y with cpX and cpY as control point and updates the <i>ShapePath.currentPath</i>'s offset to x and y."}, {"ret": "null", "name": "bezierCurveTo", "inside": "ShapePath", "args": [["Float", "cp1X"], ["Float", "cp1Y"], ["Float", "cp2X"], ["Float", "cp2Y"], ["Float", "x"], ["Float", "y"]], "ty": "method", "doc": "This creates a bezier curve from the <i>ShapePath.currentPath</i>'s offset to x and y with cp1X, cp1Y and cp1X, cp1Y as control points and updates the <i>ShapePath.currentPath</i>'s offset to x and y."}, {"ret": "Array", "name": "toShapes", "inside": "ShapePath", "args": [["Boolean", "isCCW"], ["Boolean", "noHoles"]], "ty": "method", "doc": "isCCW -- Changes how solids and holes are generated"}] ,
[{"inside": "Font", "args": [], "ty": "constructor", "doc": "data -- JSON data representing the font."}, {"ret": "array", "name": "data", "inside": "Font", "ty": "property", "doc": "The JSON data passed in the constructor."}, {"ret": "Boolean", "name": "isFont", "inside": "Font", "ty": "property", "doc": "Used to check whether this or derived classes are fonts. Default is *true*."}, {"ret": "null", "name": "generateShapes", "inside": "Font", "args": [["String", "text"], ["Float", "size"]], "ty": "method", "doc": "<i>>String text</i> -- string of text."}] ,
[{"inside": "Curve", "args": [], "ty": "constructor", "doc": "This constructor creates a new [name]."}, {"ret": "Integer", "name": "arcLengthDivisions", "inside": "Curve", "ty": "property", "doc": "This value determines the amount of divisions when calculating the cumulative segment lengths of a curve via <i>>getLengths</i>. To ensure precision when using methods like <i>>getSpacedPoints</i>, it is recommended to increase <i>>arcLengthDivisions</i> if the curve is very large. Default is 200."}, {"ret": "Vector", "name": "getPoint", "inside": "Curve", "args": [["Float", "t"], ["Vector", "optionalTarget"]], "ty": "method", "doc": "<i>>Float t</i> - A position on the curve. Must be in the range [ 0, 1 ]."}, {"ret": "Vector", "name": "getPointAt", "inside": "Curve", "args": [["Float", "u"], ["Vector", "optionalTarget"]], "ty": "method", "doc": "<i>>Float u</i> - A position on the curve according to the arc length. Must be in the range [ 0, 1 ]."}, {"ret": "Array", "name": "getPoints", "inside": "Curve", "args": [["Integer", "divisions"]], "ty": "method", "doc": "divisions -- number of pieces to divide the curve into. Default is *5*."}, {"ret": "Array", "name": "getSpacedPoints", "inside": "Curve", "args": [["Integer", "divisions"]], "ty": "method", "doc": "divisions -- number of pieces to divide the curve into. Default is *5*."}, {"ret": "Float", "name": "getLength", "inside": "Curve", "args": [], "ty": "method", "doc": "Get total curve arc length."}, {"ret": "Array", "name": "getLengths", "inside": "Curve", "args": [["Integer", "divisions"]], "ty": "method", "doc": "Get list of cumulative segment lengths."}, {"ret": "null", "name": "updateArcLengths", "inside": "Curve", "args": [], "ty": "method", "doc": "Update the cumlative segment distance cache."}, {"ret": "Float", "name": "getUtoTmapping", "inside": "Curve", "args": [["Float", "u"], ["Float", "distance"]], "ty": "method", "doc": "Given u in the range ( 0 .. 1 ), returns <i>>Float t</i> also in the range ( 0 .. 1 ). u and t can then be used to give you points which are equidistant from the ends of the curve, using <i>>getPoint</i>."}, {"ret": "Vector", "name": "getTangent", "inside": "Curve", "args": [["Float", "t"]], "ty": "method", "doc": "Returns a unit vector tangent at t. If the derived curve does not implement its tangent derivation, two points a small delta apart will be used to find its gradient which seems to give a reasonable approximation."}, {"ret": "Vector", "name": "getTangentAt", "inside": "Curve", "args": [["Float", "u"]], "ty": "method", "doc": "Returns tangent at a point which is equidistant to the ends of the curve from the point given in <i>>getTangent</i>."}, {"ret": "Object", "name": "computeFrenetFrames", "inside": "Curve", "args": [["Integer", "segments"], ["Boolean", "closed"]], "ty": "method", "doc": "Generates the Frenet Frames. Used in geometries like <i>TubeGeometry</i> or <i>ExtrudeGeometry</i>."}, {"ret": "Curve", "name": "clone", "inside": "Curve", "args": [], "ty": "method", "doc": "Creates a clone of this instance."}, {"ret": "Curve", "name": "copy", "inside": "Curve", "args": [["Curve", "source"]], "ty": "method", "doc": "Copies another [name] object to this instance."}, {"ret": "Object", "name": "toJSON", "inside": "Curve", "args": [], "ty": "method", "doc": "Returns a JSON object representation of this instance."}, {"ret": "Curve", "name": "fromJSON", "inside": "Curve", "args": [["Object", "json"]], "ty": "method", "doc": "Copies the data from the given JSON object to this instance."}] ,
[{"inside": "Shape", "args": [["Array", "points"]], "ty": "constructor", "doc": "points -- (optional) array of <i>>Vector2 Vector2s</i>."}, {"ret": "String", "name": "uuid", "inside": "Shape", "ty": "property", "doc": "UUID of this instance. This gets automatically assigned, so this shouldn't be edited."}, {"ret": "array", "name": "holes", "inside": "Shape", "ty": "property", "doc": "An array of <i>>Path paths</i> that define the holes in the shape."}, {"ret": "Array", "name": "extractPoints", "inside": "Shape", "args": [["Integer", "divisions"]], "ty": "method", "doc": "divisions -- The fineness of the result."}, {"ret": "Array", "name": "getPointsHoles", "inside": "Shape", "args": [["Integer", "divisions"]], "ty": "method", "doc": "divisions -- The fineness of the result."}] ,
[{"inside": "Path", "args": [["Array", "points"]], "ty": "constructor", "doc": "points -- (optional) array of <i>>Vector2 Vector2s</i>."}, {"ret": "array", "name": "currentPoint", "inside": "Path", "ty": "property", "doc": "The current offset of the path. Any new <i>Curve</i> added will start here."}, {"ret": "null", "name": "absarc", "inside": "Path", "args": [["Float", "x"], ["Float", "y"], ["Float", "radius"], ["Float", "startAngle"], ["Float", "endAngle"], ["Float", "clockwise"]], "ty": "method", "doc": "x, y -- The absolute center of the arc."}, {"ret": "null", "name": "absellipse", "inside": "Path", "args": [["Float", "x"], ["Float", "y"], ["Float", "xRadius"], ["Float", "yRadius"], ["Float", "startAngle"], ["Float", "endAngle"], ["Float", "clockwise"], ["Float", "rotation"]], "ty": "method", "doc": "x, y -- The absolute center of the ellipse."}, {"ret": "null", "name": "arc", "inside": "Path", "args": [["Float", "x"], ["Float", "y"], ["Float", "radius"], ["Float", "startAngle"], ["Float", "endAngle"], ["Float", "clockwise"]], "ty": "method", "doc": "x, y -- The center of the arc offset from the last call."}, {"ret": "null", "name": "bezierCurveTo", "inside": "Path", "args": [["Float", "cp1X"], ["Float", "cp1Y"], ["Float", "cp2X"], ["Float", "cp2Y"], ["Float", "x"], ["Float", "y"]], "ty": "method", "doc": "This creates a bezier curve from <i>>currentPoint</i> with (cp1X, cp1Y) and (cp2X, cp2Y) as control points and updates <i>>currentPoint</i> to x and y."}, {"ret": "null", "name": "ellipse", "inside": "Path", "args": [["Float", "x"], ["Float", "y"], ["Float", "xRadius"], ["Float", "yRadius"], ["Float", "startAngle"], ["Float", "endAngle"], ["Float", "clockwise"], ["Float", "rotation"]], "ty": "method", "doc": "x, y -- The center of the ellipse offset from the last call."}, {"ret": "null", "name": "lineTo", "inside": "Path", "args": [["Float", "x"], ["Float", "y"]], "ty": "method", "doc": "Connects a <i>LineCurve</i> from <i>>currentPoint</i> to x, y onto the path."}, {"ret": "null", "name": "moveTo", "inside": "Path", "args": [["Float", "x"], ["Float", "y"]], "ty": "method", "doc": "Move the <i>>currentPoint</i> to x, y."}, {"ret": "null", "name": "quadraticCurveTo", "inside": "Path", "args": [["Float", "cpX"], ["Float", "cpY"], ["Float", "x"], ["Float", "y"]], "ty": "method", "doc": "Creates a quadratic curve from <i>>currentPoint</i> with cpX and cpY as control point and updates <i>>currentPoint</i> to x and y."}, {"ret": "null", "name": "setFromPoints", "inside": "Path", "args": [["Array", "vector2s"]], "ty": "method", "doc": "points -- array of <i>>Vector2 Vector2s</i>."}] ,
[{"ret": "Number", "name": "area", "inside": "ShapeUtils", "args": [], "ty": "method", "doc": "contour -- 2D polygon."}, {"ret": "Boolean", "name": "isClockwise", "inside": "ShapeUtils", "args": [], "ty": "method", "doc": "pts -- points defining a 2D polygon"}, {"ret": "Array", "name": "triangulateShape", "inside": "ShapeUtils", "args": [], "ty": "method", "doc": "contour -- 2D polygon."}] ,
[{"inside": "ImmediateRenderObject", "args": [], "ty": "constructor", "doc": "This creates a new [name]."}, {"ret": "null", "name": "render", "inside": "ImmediateRenderObject", "args": [["Function", "renderCallback"]], "ty": "method", "doc": "renderCallback -- A function to render the generated object."}] ,
[{"ret": "Array", "name": "triangulate", "inside": "Earcut", "args": [], "ty": "method", "doc": "data -- A flat array of vertice coordinates."}] ,
[{"inside": "SplineCurve", "args": [["Array", "points"]], "ty": "constructor", "doc": "points \u2013 An array of <i>Vector2</i> points that define the curve."}, {"ret": "Boolean", "name": "isSplineCurve", "inside": "SplineCurve", "ty": "property", "doc": "Used to check whether this or derived classes are SplineCurves. Default is *true*."}, {"ret": "Array", "name": "points", "inside": "SplineCurve", "ty": "property", "doc": "The array of <i>Vector2</i> points that define the curve."}] ,
[{"inside": "QuadraticBezierCurve3", "args": [["Vector3", "v0"], ["Vector3", "v1"], ["Vector3", "v2"]], "ty": "constructor", "doc": "<i>>Vector3 v0</i> \u2013 The starting point"}, {"ret": "Boolean", "name": "isQuadraticBezierCurve3", "inside": "QuadraticBezierCurve3", "ty": "property", "doc": "Used to check whether this or derived classes are QuadraticBezierCurve3s. Default is *true*."}, {"ret": "Vector3", "name": "v0", "inside": "QuadraticBezierCurve3", "ty": "property", "doc": "The startpoint."}, {"ret": "Vector3", "name": "v1", "inside": "QuadraticBezierCurve3", "ty": "property", "doc": "The control point."}, {"ret": "Vector3", "name": "v2", "inside": "QuadraticBezierCurve3", "ty": "property", "doc": "The endpoint."}] ,
[{"inside": "CatmullRomCurve3", "args": [["Array", "points"], ["Boolean", "closed"], ["String", "curveType"], ["Float", "tension"]], "ty": "constructor", "doc": "points \u2013 An array of <i>Vector3</i> points"}, {"ret": "Boolean", "name": "isCatmullRomCurve3", "inside": "CatmullRomCurve3", "ty": "property", "doc": "Used to check whether this or derived classes are CatmullRomCurve3s. Default is *true*."}, {"ret": "Array", "name": "points", "inside": "CatmullRomCurve3", "ty": "property", "doc": "The array of <i>Vector3</i> points that define the curve. It needs at least two entries."}, {"ret": "Boolean", "name": "closed", "inside": "CatmullRomCurve3", "ty": "property", "doc": "The curve will loop back onto itself when this is true."}, {"ret": "String", "name": "curveType", "inside": "CatmullRomCurve3", "ty": "property", "doc": "Possible values are *centripetal*, *chordal* and *catmullrom*."}, {"ret": "float", "name": "tension", "inside": "CatmullRomCurve3", "ty": "property", "doc": "When <i>>type</i> is *catmullrom*, defines catmullrom's tension."}] ,
[{"inside": "EllipseCurve", "args": [["Float", "aX"], ["Float", "aY"], ["Float", "xRadius"], ["Float", "yRadius"], ["Radians", "aStartAngle"], ["Radians", "aEndAngle"], ["Boolean", "aClockwise"], ["Radians", "aRotation"]], "ty": "constructor", "doc": "<i>>Float aX</i> \u2013 The X center of the ellipse. Default is *0*."}, {"ret": "Boolean", "name": "isEllipseCurve", "inside": "EllipseCurve", "ty": "property", "doc": "Used to check whether this or derived classes are EllipseCurves. Default is *true*."}, {"ret": "Float", "name": "aX", "inside": "EllipseCurve", "ty": "property", "doc": "The X center of the ellipse."}, {"ret": "Float", "name": "aY", "inside": "EllipseCurve", "ty": "property", "doc": "The Y center of the ellipse."}, {"ret": "Radians", "name": "xRadius", "inside": "EllipseCurve", "ty": "property", "doc": "The radius of the ellipse in the x direction."}, {"ret": "Radians", "name": "yRadius", "inside": "EllipseCurve", "ty": "property", "doc": "The radius of the ellipse in the y direction."}, {"ret": "Float", "name": "aStartAngle", "inside": "EllipseCurve", "ty": "property", "doc": "The start angle of the curve in radians starting from the middle right side."}, {"ret": "Float", "name": "aEndAngle", "inside": "EllipseCurve", "ty": "property", "doc": "The end angle of the curve in radians starting from the middle right side."}, {"ret": "Boolean", "name": "aClockwise", "inside": "EllipseCurve", "ty": "property", "doc": "Whether the ellipse is drawn clockwise."}, {"ret": "Float", "name": "aRotation", "inside": "EllipseCurve", "ty": "property", "doc": "The rotation angle of the ellipse in radians, counterclockwise from the positive X axis (optional). Default is *0*."}, {"ret": "Boolean", "name": "isEllipseCurve", "inside": "EllipseCurve", "ty": "property", "doc": "Used to check whether this or derived classes are ellipses. Default is *true*."}] ,
[{"inside": "CubicBezierCurve3", "args": [["Vector3", "v0"], ["Vector3", "v1"], ["Vector3", "v2"], ["Vector3", "v3"]], "ty": "constructor", "doc": "<i>>Vector3 v0</i> \u2013 The starting point."}, {"ret": "Boolean", "name": "isCubicBezierCurve3", "inside": "CubicBezierCurve3", "ty": "property", "doc": "Used to check whether this or derived classes are CubicBezierCurve3s. Default is *true*."}, {"ret": "Vector2", "name": "v0", "inside": "CubicBezierCurve3", "ty": "property", "doc": "The starting point."}, {"ret": "Vector2", "name": "v1", "inside": "CubicBezierCurve3", "ty": "property", "doc": "The first control point."}, {"ret": "Vector2", "name": "v2", "inside": "CubicBezierCurve3", "ty": "property", "doc": "The second control point."}, {"ret": "Vector2", "name": "v3", "inside": "CubicBezierCurve3", "ty": "property", "doc": "The ending point."}] ,
[{"inside": "QuadraticBezierCurve", "args": [["Vector2", "v0"], ["Vector2", "v1"], ["Vector2", "v2"]], "ty": "constructor", "doc": "<i>>Vector2 v0</i> \u2013 The startpoint."}, {"ret": "Boolean", "name": "isQuadraticBezierCurve", "inside": "QuadraticBezierCurve", "ty": "property", "doc": "Used to check whether this or derived classes are QuadraticBezierCurves. Default is *true*."}, {"ret": "Vector2", "name": "v0", "inside": "QuadraticBezierCurve", "ty": "property", "doc": "The startpoint."}, {"ret": "Vector2", "name": "v1", "inside": "QuadraticBezierCurve", "ty": "property", "doc": "The control point."}, {"ret": "Vector2", "name": "v2", "inside": "QuadraticBezierCurve", "ty": "property", "doc": "The endpoint."}] ,
[{"ret": "Boolean", "name": "isArcCurve", "inside": "ArcCurve", "ty": "property", "doc": "Used to check whether this or derived classes are ArcCurves. Default is *true*."}] ,
[{"inside": "LineCurve3", "args": [["Vector3", "v1"], ["Vector3", "v2"]], "ty": "constructor", "doc": "<i>>Vector3 v1</i> \u2013 The start point."}, {"ret": "Boolean", "name": "isLineCurve3", "inside": "LineCurve3", "ty": "property", "doc": "Used to check whether this or derived classes are LineCurve3s. Default is *true*."}, {"ret": "Vector3", "name": "v1", "inside": "LineCurve3", "ty": "property", "doc": "The start point."}, {"ret": "Vector3", "name": "v2", "inside": "LineCurve3", "ty": "property", "doc": "The end point."}] ,
[{"inside": "LineCurve", "args": [["Vector2", "v1"], ["Vector2", "v2"]], "ty": "constructor", "doc": "<i>>Vector2 v1</i> \u2013 The start point."}, {"ret": "Boolean", "name": "isLineCurve", "inside": "LineCurve", "ty": "property", "doc": "Used to check whether this or derived classes are LineCurves. Default is *true*."}, {"ret": "Vector2", "name": "v1", "inside": "LineCurve", "ty": "property", "doc": "The start point."}, {"ret": "Vector2", "name": "v2", "inside": "LineCurve", "ty": "property", "doc": "The end point"}] ,
[{"ret": "Boolean", "name": "isCubicBezierCurve", "inside": "CubicBezierCurve", "ty": "property", "doc": "Used to check whether this or derived classes are CubicBezierCurves. Default is *true*."}, {"ret": "Vector2", "name": "v0", "inside": "CubicBezierCurve", "ty": "property", "doc": "The starting point."}, {"ret": "Vector2", "name": "v1", "inside": "CubicBezierCurve", "ty": "property", "doc": "The first control point."}, {"ret": "Vector2", "name": "v2", "inside": "CubicBezierCurve", "ty": "property", "doc": "The second control point."}, {"ret": "Vector2", "name": "v3", "inside": "CubicBezierCurve", "ty": "property", "doc": "The ending point."}] ,
].flat()