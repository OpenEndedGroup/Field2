{
  "_code_cookie" "{\"output\":\"appendRemoteOutputToLine(19, \\\"<div class=\\\\\\\"outputline\\\\\\\"><div class=\\\\\\\"outputline\\\\\\\"><div class=\\\\\\\"outputline\\\\\\\">[function defined]<br><\\/div><\\/div><\\/div>\\\", 'Field-remoteOutput-error', 'Field-remoteOutput', false,0)\\n\",\"folds\":{\"selections\":[{\"head\":{\"ch\":0,\"line\":0,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":0,\"sticky\":null}}],\"marks\":[]},\"history\":{\"done\":[{\"primIndex\":0,\"ranges\":[{\"head\":{\"ch\":0,\"line\":0,\"sticky\":null},\"anchor\":{\"ch\":0,\"line\":0,\"sticky\":null}}]}],\"undone\":[]},\"currentpos\":{\"ch\":0,\"line\":0,\"sticky\":null},\"widgets\":[],\"brackets\":\"\"}"
  "code" "\n_r = () => {\n\tvar s = _.analysis.getRawSamples(_.time.frame.x/24)\n\n\tvar f = new FLine()\n\n\t// for every entry in 's' add it to 'f'\n\tfor(var i=0;i<s.length;i++)\n\t{\n\t\t// scale it so that it fits into the 100x100 canvas \n\t\tf.lineTo(i/20, 50-s[i]*50)\t\n\t}\n\n\tf.color = vec(1,1,1,1)\n\n\t_.stage.lines.f = f\n\n}\n\n"
  "withOverloading" true
  "boxOutline" #field/serializable{
    :base64 "rO0ABXNyABFmaWVsZC5saW5hbGcuVmVjNAAAAAAAAAABDAAAeHB3IAAAAAAAAAAAAAAAAAAAAAA/0zMzMzMzMz/QAAAAAAAAeA=="
  }
  "__boxclass__" "fieldbox.boxes.Box"
  "__id__" "_560ef9a7_ab5b_4621_ad54_342b4d39cf55"
  "__datafilename__" "{{templates}}/sound_analysis/raw.box"
  "boxBackground" #field/serializable{
    :base64 "rO0ABXNyABFmaWVsZC5saW5hbGcuVmVjNAAAAAAAAAABDAAAeHB3ID/wAAAAAAAAP+5mZmZmZmY/7MzMzMzMzT/oAAAAAAAAeA=="
  }
  "name" "raw"
  "frame" #field/rect{
    :x -200.53053283691406
    :y -143.45208740234375
    :w 100.0
    :h 104.76953125
  }
  "__filename__code" "{{templates}}/sound_analysis/raw.box.js"
}