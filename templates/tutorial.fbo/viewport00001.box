{
  "code" "// a Viewport is a box that has a full-fledge _.scene and _.camera in it that embeds the complete Field graphics system into a box in the canvas. You can have as many of these as you like, rendering is automatically clipped to the bounds of the box\n\nvar GL11 = Java.type('org.lwjgl.opengl.GL11')\n\n// attach a function to the scene in this box\n_.scene[-10].clear_viewport_first = () => {\n\t// that clears the background to a dark gray\n\tGL11.glClearColor(0.1, 0.1, 0.1, 1)\t\n\t\n\t// turn on depth testing\n\tGL11.glDepthFunc(GL11.GL_LESS)\n\tGL11.glDisable(GL11.GL_DEPTH_TEST)\n\n\t// actual clear the viewport\n\tGL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT)\n\t\n\t// return true to do this function every time this scene is drawn\n\treturn true\n}\n\nvar KeyboardCamera = Java.type('field.graphics.util.KeyboardCamera')\nvar ArcBallCamera = Java.type('field.graphics.util.ArcBallCamera')\n\n// attach an \"ArcBall\" mouse control to the viewport (this will only work when the box is selected)\nabc = new ArcBallCamera(_.camera, _)\n\n// attach a keyboard control to the viewport's camera (this will also only work when the box is selected)\nkc = new KeyboardCamera(_.camera, _)\n\n// set up a standard set of keys for controlling the camera:\n// shift-arrow keys orbit the camera left/right and in/out, shift-pg-up / down orbits up and down\n// non-shift keys move the camera target as well\nkc.standardMap()\n\n// export this box under the name 'viewport'\n_.viewport = _\n\n// and, just for readibility, let's call this box 'viewport'\n_.name = \"viewport\"\n"
  "clips" true
  "__id__" "_6edded1b_6e93_45cf_8bb8_553f791e6fb5"
  "__datafilename__" "{{templates}}/tutorial.fbo/viewport00001.box"
  "name" "viewport"
  "__filename__code" "{{templates}}/tutorial.fbo/viewport00001.box.js"
  "frame" #field/rect{
    :x 1102.18359375
    :y -309.6953125
    :w 505.98046875
    :h 475.69921875
  }
  "__boxclass__" "fieldbox.boxes.plugins.Viewport"
}